import{_ as i,c as a,o as n,b0 as l}from"./chunks/framework.C5ev1SXp.js";const t="/scm-docs/assets/MDK002.BDfC37Tj.jpg",p="/scm-docs/assets/image-20230410223415106.BaLbgwwi.png",e="/scm-docs/assets/image-20230410223657951.B_dTwPU-.png",h="/scm-docs/assets/image-20230410223927930.BYZJALLL.png",k="/scm-docs/assets/image-20230410225220408.CzOyjafm.png",r="/scm-docs/assets/image-20230410225611744.ByI2ajXN.png",d="/scm-docs/assets/image-20230410225740347.BBujl2t3.png",F="/scm-docs/assets/image-20230410230117924.4snysLim.png",c="/scm-docs/assets/image-20230410230449727.Bab5NZOi.png",o="/scm-docs/assets/image-20230410230546472.CxMUaIvQ.png",g="/scm-docs/assets/image-20230410230625703.WdDGg4sn.png",y="/scm-docs/assets/image-20230410230731311.1aOXCATS.png",m="/scm-docs/assets/image-20230410231410382.CLKF4Rr3.png",E="/scm-docs/assets/image-20230410231446006.BNLWJ_iW.png",C="/scm-docs/assets/image-20230410231521158.BhXw4AhD.png",b="/scm-docs/assets/section.puOQ1AFb.png",u="/scm-docs/assets/cdad3ae5fdcc43ec608edef8b4726d48.SyiFKOWi.png",B="/scm-docs/assets/62a7331c20dde716b023576f31f2f173.DjuqKCg5.png",_="/scm-docs/assets/MDK01.7akrNDlU.png",A="/scm-docs/assets/image-20251009080728602.CoLFdXUz.png",f="/scm-docs/assets/MDK006.BBlCa6ce.jpeg",D="/scm-docs/assets/MDK02.DOOb5o33.png",T=JSON.parse('{"title":"LV010-程序与编译","description":null,"frontmatter":{"title":"LV010-程序与编译","date":"2025-09-20T13:51:08.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/dev-tool/keil/126b08e6a9c4187125e57a5f","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-20T13:51:08.391Z","fulluuid":"125e57a5ff854ebaa58b6fff51b99a11","useduuid":"125e57a5f"}},"headers":[],"relativePath":"sdoc/dev-tool/keil/126b08e6a9c4187125e57a5f.md","filePath":"sdoc/01-开发工具/01-keil/LV010-程序与编译.md","lastUpdated":1758811394000}'),R={name:"sdoc/dev-tool/keil/126b08e6a9c4187125e57a5f.md"};function M(v,s,O,x,S,L){return n(),a("div",null,[...s[0]||(s[0]=[l('<h1 id="lv010-程序与编译" tabindex="-1">LV010-程序与编译 <a class="header-anchor" href="#lv010-程序与编译" aria-label="Permalink to &quot;LV010-程序与编译&quot;">​</a></h1><h2 id="一、编译过程" tabindex="-1">一、编译过程 <a class="header-anchor" href="#一、编译过程" aria-label="Permalink to &quot;一、编译过程&quot;">​</a></h2><h3 id="_1-编译过程简介" tabindex="-1">1. 编译过程简介 <a class="header-anchor" href="#_1-编译过程简介" aria-label="Permalink to &quot;1. 编译过程简介&quot;">​</a></h3><p>我们简单了解下MDK的编译过程，它与其它编译器的工作过程是类似的：</p><img src="'+t+'" alt="MDK编译过程" style="zoom:67%;"><p>(1) 编译，MDK软件使用的编译器是 armcc 和 armasm ， 它们根据每个C/C++和汇编源文件编译成对应的以“ .o ”为后缀名的对象文件(Object Code，也称目标文件)， 其内容主要是从源文件编译得到的机器码，包含了代码、数据以及调试使用的信息；</p><p>(2) 链接， 链接器 armlink 把各个 .o 文件及库文件链接成一个映像文件“ .axf ”或“ .elf ”；</p><p>(3) 格式转换，一般来说 Windows 或 Linux 系统使用链接器直接生成可执行映像文件 elf 后，内核根据该文件的信息加载后， 就可以运行程序了，但在单片机平台上，需要把该文件的内容加载到芯片上， 所以还需要对链接器生成的 elf 映像文件利用格式转换器 fromelf 转换成“ .bin ”或“ .hex ”文件，交给下载器下载到芯片的 FLASH 或 ROM 中。</p><h3 id="_2-具体过程" tabindex="-1">2. 具体过程 <a class="header-anchor" href="#_2-具体过程" aria-label="Permalink to &quot;2. 具体过程&quot;">​</a></h3><img src="'+p+'" alt="image-20230410223415106"><p>如上图所示，MDK编译工程的输出提示主要可以分为上边6个部分：</p><p>(1) 提示信息的第一部分说明构建过程调用的编译器。图中的编译器名字是“ V5.06 update 6 (build 750) ”，后面附带了该编译器所在的文件夹。 在电脑上打开该路径，可看到该编译器包含的各个编译工具，如armar、armasm、armcc、armlink及fromelf， 后面四个工具已在上一小节已讲解，而 armar 是用于把.o文件打包成lib文件的。</p><img src="'+e+'" alt="image-20230410223657951" style="zoom:55%;"><p>(2) 使用armasm编译汇编文件。图中列出了编译 startup 启动文件时的提示， 编译后每个汇编源文件都对应有一个独立的.o文件。</p><p>(3) 使用armcc编译c/c++文件。图中列出了工程中所有的c/c++文件的提示， 同样地，编译后每个c/c++源文件都对应有一个独立的.o文件。</p><p>(4) 使用armlink链接对象文件，根据程序的调用把各个.o文件的内容链接起来，最后生成程序的 axf 映像文件， 并附带程序各个域大小的说明，包括Code、RO-data、RW-data及ZI-data的大小。</p><p>(5) 使用 fromelf 生成下载格式文件，它根据axf映像文件转化成hex文件， 并列出编译过程出现的错误(Error)和警告(Warning)数量。</p><p>(6) 最后一段提示给出了整个构建过程消耗的时间。</p><p>构建完成后，可在工程的“Output”及“Listing”目录下找到由以上过程生成的各种文件：</p><img src="'+h+'" alt="image-20230410223927930" style="zoom:57%;"><p>后边的文件省略，这里只列举部分文件，可以看到，每个C源文件都对应生成了.o、.d及.crf后缀的文件，还有一些额外的.dep、.hex、.axf、.htm、.lnp、.sct、.lst及.map文件。</p><h2 id="二、编译工具链" tabindex="-1">二、编译工具链 <a class="header-anchor" href="#二、编译工具链" aria-label="Permalink to &quot;二、编译工具链&quot;">​</a></h2><p>前面编译过程中，MDK调用了各种编译工具，平时我们直接配置MDK，不需要学习如何使用它们，但了解它们是非常有好处的。例如， 若希望使用MDK编译生成bin文件的，需要在MDK中输入指令控制fromelf工具；在后面讲解AXF及O文件的时候，需要利用fromelf工具查看其文件信息， 这都是无法直接通过MDK做到的。关于这些工具链的说明，在MDK的帮助手册《ARM Development Tools》都有详细讲解， 点击MDK界面的“help-&gt;uVision Help”菜单可打开该文件。</p><h3 id="_1-设置环境变量" tabindex="-1">1. 设置环境变量 <a class="header-anchor" href="#_1-设置环境变量" aria-label="Permalink to &quot;1. 设置环境变量&quot;">​</a></h3><p>用这些编译工具，需要用到Windows的命令行提示符工具，为了让命令行方便地找到这些工具，我们先把工具链的目录添加到系统的环境变量中。 查看本机工具链所在的具体目录可根据上一小节讲解的工程编译提示输出信息中找到，如本机的路径为“C:\\LenovoSoft\\Keil_v5\\ARM\\ARMCC\\bin”。</p><h3 id="_2-添加路径到path环境变量" tabindex="-1">2. 添加路径到PATH环境变量 <a class="header-anchor" href="#_2-添加路径到path环境变量" aria-label="Permalink to &quot;2. 添加路径到PATH环境变量&quot;">​</a></h3><p>(1) 右键电脑系统的【此电脑】， 在弹出的菜单中选择“属性”</p><img src="'+k+'" alt="image-20230410225220408" style="zoom:50%;"><p>(2) 在弹出的属性页面依次点击【高级系统设置】→【环境变量】，在用户变量一栏中找到名为“PATH”的变量，若没有该变量， 则新建一个。编辑“PATH”变量，在它的变量值中输入工具链的路径，如本机的是“ C:\\LenovoSoft\\Keil_v5\\ARM\\ARMCC\\bin ”， 注意要使用“ 分号 ; ”让它与其它路径分隔开，输入完毕后依次点确定：</p><img src="'+r+'" alt="image-20230410225611744" style="zoom:50%;"><p>(3) 打开Windows的命令行。</p><p>(4) 在弹出的命令行窗口中输入“fromelf”回车，若窗口打印出formelf的帮助说明，那么路径正常，就可以开始后面的工作了； 若提示“不是内部名外部命令，也不是可运行的程序…”信息，说明路径不对，请重新配置环境变量，并确认该工作目录下有编译工具链。</p><img src="'+d+`" alt="image-20230410225740347" style="zoom:50%;"><p>这个过程本质就是让命令行通过“PATH”路径找到“fromelf.exe”程序运行，默认运行“fromelf.exe”时它会输出自己的帮助信息， 这就是工具链的调用过程，MDK本质上也是如此调用工具链的，只是它集成为GUI，相对于命令行对用户更友好。</p><h3 id="_3-armcc、armasm及armlink" tabindex="-1">3. armcc、armasm及armlink <a class="header-anchor" href="#_3-armcc、armasm及armlink" aria-label="Permalink to &quot;3. armcc、armasm及armlink&quot;">​</a></h3><h4 id="_3-1-armcc" tabindex="-1">3.1 armcc <a class="header-anchor" href="#_3-1-armcc" aria-label="Permalink to &quot;3.1 armcc&quot;">​</a></h4><p>armcc用于把c/c++文件编译成ARM指令代码，编译后会输出ELF格式的O文件(对象、目标文件)，在命令行中输入“armcc”回车可调用该工具， 它会打印帮助说明：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\Users\\20380</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">armcc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Product:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Plus</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.29</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ARM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Compiler</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.06</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (build </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">750</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tool:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> armcc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [4d3637]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">For</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> support</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> see</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://www.arm.com/support</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Software</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> supplied</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> by:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ARM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Limited</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Usage:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         armcc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options] file1 file2 ... filen</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> options:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--arm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          Generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ARM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> code</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--thumb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Thumb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> code</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--c90</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          Switch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (default </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--cpp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          Switch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (default </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .cpp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-O0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            Minimum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> optimization</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 中间部分省略......</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;symbol&gt;     </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Define</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">symbo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compiler</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             Generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tables</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> high-level</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debugging</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;directory&gt;  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Include</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">director</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #include search path</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>帮助提示中分三部分，第一部分是armcc版本信息，第二部分是命令的用法，第三部分是主要命令选项。</p><p>根据命令用法： armcc [options] file1 file2 …filen ， 在[option]位置可输入下面的“–arm”、“–cpu list”选项， 若选项带文件输入，则把文件名填充在file1 file2…的位置，这些文件一般是c/c++文件。</p><p>例如根据它的帮助说明，“–cpu list”可列出编译器支持的所有cpu，我们在命令行中输入“armcc –cpu list”， 可查看cpu列表：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\Users\\20380</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">armcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -cpu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Warning:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C3910W:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Old</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> syntax,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> please</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;--cpu&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arguments</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> option</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cpu&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> selected:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ... ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --cpu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">7-R</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --cpu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">7-M</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --cpu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">7E-M</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --cpu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">7-A.security</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --cpu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ARM7EJ-S</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 后边的省略... ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>打开MDK的Options for Targe→c/c++菜单，可看到MDK对编译器的控制命令：</p><img src="`+F+'" alt="image-20230410230117924" style="zoom:50%;"><p>从该图中的命令可看到，它调用了-c、-cpu –D –g –O1等编译选项，当我们修改MDK的编译配置时，可看到该控制命令也会有相应的变化。 然而我们无法在该编译选项框中输入命令，只能通过MDK提供的选项修改。</p><p>了解这些，我们就可以查询具体的MDK编译选项的具体信息了，如c/c++选项中的“Optimization：Leve 1（-O1）”是什么功能呢？ 首先可了解到它是“-O”命令，命令后还带个数字，查看MDK的帮助手册（【help】→【uVision help】），在armcc编译器说明章节：</p><img src="'+c+'" alt="image-20230410230449727" style="zoom:50%;"><p>利用MDK，我们一般不需要自己调用armcc工具，但经过这样的过程我们就会对MDK有更深入的认识。</p><h4 id="_3-2-armasm" tabindex="-1">3.2 armasm <a class="header-anchor" href="#_3-2-armasm" aria-label="Permalink to &quot;3.2 armasm&quot;">​</a></h4><p>armasm 是汇编器，它把汇编文件编译成O文件。与armcc类似， MDK对armasm的调用选项可在“Option for Target→Asm”页面进行配置：</p><img src="'+o+'" alt="image-20230410230546472" style="zoom:50%;"><h4 id="_3-3-armlink" tabindex="-1">3.3 armlink <a class="header-anchor" href="#_3-3-armlink" aria-label="Permalink to &quot;3.3 armlink&quot;">​</a></h4><p>armlink是链接器，它把各个O文件链接组合在一起生成ELF格式的AXF文件，AXF文件是可执行的，下载器把该文件中的指令代码下载到芯片后， 该芯片就能运行程序了；利用armlink还可以控制程序存储到指定的ROM或RAM地址。 在MDK中可在“Option for Target→Linker”页面配置armlink选项：</p><img src="'+g+'" alt="image-20230410230625703" style="zoom:50%;"><p>链接器默认是根据芯片类型的存储器分布来生成程序的，该存储器分布被记录在工程里的sct后缀的文件中，有特殊需要的话可自行编辑该文件， 改变链接器的链接方式。</p><h3 id="_4-armar、fromelf及用户指令" tabindex="-1">4. armar、fromelf及用户指令 <a class="header-anchor" href="#_4-armar、fromelf及用户指令" aria-label="Permalink to &quot;4. armar、fromelf及用户指令&quot;">​</a></h3><p>armar工具用于把工程打包成库文件，fromelf可根据axf文件生成hex、bin文件，hex和bin文件是大多数下载器支持的下载文件格式。</p><p>在MDK中，针对armar和fromelf工具的选项几乎没有，仅集成了生成HEX或Lib的选项：</p><img src="'+y+'" alt="image-20230410230731311" style="zoom:50%;"><p>例如如果我们想利用fromelf生成bin文件，可以在MDK的“【Option for Target】→【User】”页中添加调用fromelf的指令：</p><img src="'+m+'" alt="image-20230410231410382" style="zoom:50%;"><p>在User配置页面中，提供了三种类型的用户指令输入框，在不同组的框输入指令， 可控制指令的执行时间，分别是编译前 (Before Compile c/c++ file )、 构建前( Before Build/Rebuild )及构建后( AfterBuild/Rebuild )执行。 这些指令并没有限制必须是arm的编译工具链，例如如果自己编写了python脚本， 也可以在这里输入用户指令执行该脚本。</p><p>图中的生成bin文件指令调用了 fromelf 工具，紧跟后面的是工具的选项及输出文件名、输入文件名。由于fromelf是根据 axf 文件生成 bin 的， 而 axf 文件又是构建(build)工程后才生成，所以我们把该指令放到“ After Build/Rebuild ”一栏。这里的路径应该是以<strong>工程所在目录为起点</strong>。</p><p>当我们重新编译工程，便会调用这条命令：</p><img src="'+E+'" alt="image-20230410231446006" style="zoom:50%;"><p>然后我们便会在对应的目录下生成bin文件：</p><img src="'+C+'" alt="image-20230410231521158" style="zoom:33%;"><h2 id="三、程序的组成、存储与运行" tabindex="-1">三、程序的组成、存储与运行 <a class="header-anchor" href="#三、程序的组成、存储与运行" aria-label="Permalink to &quot;三、程序的组成、存储与运行&quot;">​</a></h2><h3 id="_1-c-c-程序编译后的存储数据段" tabindex="-1">1. C/C++ 程序编译后的存储数据段 <a class="header-anchor" href="#_1-c-c-程序编译后的存储数据段" aria-label="Permalink to &quot;1. C/C++ 程序编译后的存储数据段&quot;">​</a></h3><p>6个储存数据段和3个</p><img src="'+b+'" style="zoom:33%;"><h4 id="_1-1-6个储存数据段" tabindex="-1">1.1 6个储存数据段 <a class="header-anchor" href="#_1-1-6个储存数据段" aria-label="Permalink to &quot;1.1 6个储存数据段&quot;">​</a></h4><h5 id="_1-1-1-哪6个段" tabindex="-1">1.1.1 哪6个段？ <a class="header-anchor" href="#_1-1-1-哪6个段" aria-label="Permalink to &quot;1.1.1 哪6个段？&quot;">​</a></h5><p>先来了解一下6个储存数据段的概念，借用一张图：</p><img src="'+u+`" alt="内存运行时五段" style="zoom:67%;"><p>这张图是程序在虚拟内存（VM, Virtual Memory）中的典型布局结构，呈现了内存空间的划分方式及各区域的功能。单片机的程序在内存中也大概就是这几种段：</p><ul><li><p><strong>.data</strong>：数据段，储存已初始化且不为0的全局变量和静态变量（全局静态变量和局部静态变量）。static声明的变量放在data段。数据段属于静态内存分配，所以放在RAM里，准确来说，是在程序运行的时候需要在RAM中运行。</p></li><li><p><strong>.BSS</strong>：Block Started by Symbol。储存未初始化的，或初始化为0的全局变量和静态变量。BSS段属于静态内存分配，所以放在RAM里。</p></li><li><p><strong>.text（CodeSegment/Text Segment）</strong>：代码段，储存程序代码。也就是存放CPU执行的机器指令(machineinstructions)。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。一般会放在Flash里。</p></li><li><p><strong>.rodata</strong>：储存只读常量。const修饰的常量，不管是在局部还是全局放在Flash 里。所以为了节省 RAM，把常量的字符串，数据等 用const声明。</p></li><li><p><strong>heap</strong>（堆）：堆是用于存放进程运行中被动态分配的内存段。他的大小并不固定，可动态扩张或者缩减，由程序员使用malloc()和free()函数进行分配和释放。当调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）。放在RAM里，其可用大小定义在启动文件startup_stm32fxx.s中。</p></li><li><p><strong>stack</strong>（栈）：栈又称堆栈，是用户存放程序临时创建的局部变量，由系统自动分配和释放。可存放局部变量、函数的参数和返回值（但不包括static声明的变量，static意味着 放在 data 数据段中）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。<strong>后进先出（LIFO, Last In First Out）</strong>，即最后入栈元素先出栈。所以栈特别方便用来保存/恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。放在RAM里，其大小定义在启动文件startup_stm32fxx.s中。</p></li></ul><h5 id="_1-1-2-一个示例" tabindex="-1">1.1.2 一个示例 <a class="header-anchor" href="#_1-1-2-一个示例" aria-label="Permalink to &quot;1.1.2 一个示例&quot;">​</a></h5><p>下面是一个实例：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//hello.c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globe_var1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globe_var2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globe_static_var1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globe_static_var2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globe_const_var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static_var1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 70</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static_var2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> const_var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    var2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globe_var1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globe_static_var1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globe_const_var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static_var1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> const_var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var1;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var2);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><img src="`+B+`" alt="段信息" style="zoom:50%;"><ul><li>为什么把程序的“ 代码段 ”和“ 数据段 ”分开存放?</li></ul><p>（1）当程序被装载后，数据和指令分别被映射到两个虚拟内存区域。数据段对进程来讲是可读写的，而代码段对进程来说是只读的，所以这两个虚拟内存区域的权限可以被分别设置为可读写和只读，防止程序的指令被有意和无意地改写。</p><p>（2）现代CPU的缓存一般被设计成数据缓存和指令缓存分离，程序的指令和数据被分开存放对CPU的缓存命中率提高有好处。</p><p>（3）当系统中运行着多个该程序的副本时，例如多个线程同时都运行同一个程序，它们的代码段指令都是一样的，所以内存中只需要保存一份该程序的代码段，然后将每个副本进程的数据段区域分来，这样可以节省大量空间。</p><ul><li>为什么数据段还需要分&quot; .data “、” .bss “、” .rodata &quot;这么麻烦？有什么区别？主要根据两个维度进行区分，<strong>是否占内存空间</strong>、<strong>读写权限</strong>。</li></ul><p>已经初始化的全局变量和局部静态变量都保存在&quot; .data “段。未初始化的全局变量和局部静态变量一般都放在” .bss &quot;段，因为未初始化的变量默认值为0，本来它们也可以放在.data段，但是因为它们都是0，所以为它们在.data段分配空间并且存放数据0是没有必要的。</p><p>&quot; .data&quot;段和&quot; .bss “段都是可读写的数据段，而” .rodata “存放的是只读数据，主要是一些const变量和字符串常量。单独设立” .radata “段的好处是，在程序加载的时候可以将” .rodata “段的属性映射成只读，这样对这个段的任何修改操作都作为非法操作处理。另外在某些平台还可以将” .rodata &quot;段存放在只读存储器，例如ROM，通过硬件保证只读。</p><p>所以如果通过命令objdump查看各个段的大小发现，.data段大小为12字节，正好是变量globle_var1、globle_static_var1、static_var1的大小。但是.bss段的大小为8个字节，并不是变量globle_var2、globle_static_var2、static_var2变量的大小，可以看出.bss并没有为变量分配内存。</p><p>所以如果通过命令objdump查看各个段的大小发现，.data段大小为12字节，正好是变量globle_var1、globle_static_var1、static_var1的大小。但是.bss段的大小为8个字节，并不是变量globle_var2、globle_static_var2、static_var2变量的大小，可以看出.bss并没有为变量分配内存。我们可以现在linux下编译然后查看：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lubancat@lubancat-vm:~/test$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lubancat@lubancat-vm:~/test$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.o</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lubancat@lubancat-vm:~/test$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> objdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.o</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello.o：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     文件格式</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elf64-x86-64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello.o</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">体系结构：i386:x86-64，</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 标志</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0x00000011：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAS_RELOC,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HAS_SYMS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">起始地址</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x0000000000000000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">节：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Idx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          Size</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      VMA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               LMA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               File</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> off</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Algn</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .text</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         0000007d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  00000040</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">**</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                  CONTENTS,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ALLOC,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RELOC,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> READONLY,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CODE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         0000000c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  000000c0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">**</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                  CONTENTS,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ALLOC,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DATA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .bss</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          00000008</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  000000cc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">**</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                  ALLOC</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .rodata</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       00000008</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  000000cc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">**</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                  CONTENTS,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ALLOC,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> READONLY,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DATA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .comment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      0000002c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  000000d4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">**</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                  CONTENTS,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> READONLY</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .note.GNU-stack</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  00000100</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">**</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                  CONTENTS,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> READONLY</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .note.gnu.property</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00000020</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  00000100</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">**</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                  CONTENTS,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ALLOC,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> READONLY,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DATA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .eh_frame</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     00000058</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0000000000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  00000120</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">**</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                  CONTENTS,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ALLOC,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RELOC,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> READONLY,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DATA</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="_1-2-3种存储属性区" tabindex="-1">1.2 3种存储属性区 <a class="header-anchor" href="#_1-2-3种存储属性区" aria-label="Permalink to &quot;1.2 3种存储属性区&quot;">​</a></h4><p><strong>RO、RW、ZI</strong> 是嵌入式系统和编译链接过程中常用的术语，用于描述程序内存的分布情况：</p><ul><li><p>RO（Read-Only）：只读区域，包括程序代码和只读数据。对应上面的<code>.text</code>段和<code>.rodata</code>段。</p></li><li><p>RW（Read-Write）：可读可写区域，包括已初始化的全局变量和静态变量。对应上面的<code>.data</code>段。</p></li><li><p>ZI（Zero-Initialized）：零初始化区域，包括未初始化的全局变量和静态变量，不占用ROM空间（只记录大小信息）。对应上面的<code>.bss</code>段。另外, 可翻看Keil工具编译的map文件，Heap和Stack区也进行了Zero的属性标注, 因此，Heap和Stack也可认为是ZI区域。</p></li></ul><h4 id="_1-3-总结" tabindex="-1">1.3 总结 <a class="header-anchor" href="#_1-3-总结" aria-label="Permalink to &quot;1.3 总结&quot;">​</a></h4><p>RO、RW、ZI 是从<strong>访问权限</strong>和<strong>初始化状态</strong>角度对程序数据的分类，而 <code>.text</code>、<code>.data</code>、<code>.bss</code> 等是具体的<strong>存储段实现</strong>。二者的对应关系本质是：</p><ul><li>编译时，编译器将代码和数据按 RO/RW/ZI 特性分配到不同存储段；</li><li>链接和加载时，系统根据存储段类型决定其在存储器（Flash/RAM）中的位置，确保程序正确运行。</li></ul><h3 id="_2-code、ro、rw、zi-data域及堆栈空间" tabindex="-1">2. CODE、RO、RW、ZI Data域及堆栈空间 <a class="header-anchor" href="#_2-code、ro、rw、zi-data域及堆栈空间" aria-label="Permalink to &quot;2. CODE、RO、RW、ZI Data域及堆栈空间&quot;">​</a></h3><p>在工程的编译提示输出信息中有一个语句：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Program</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Size：Code=xx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO-data=xx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RW-data=xx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ZI-data=xx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>它说明了程序各个域的大小，编译后，应用程序中所有具有同一性质的数据(包括代码)被归到一个域，程序在存储或运行的时候， 不同的域会呈现不同的状态，这些域的意义如下：</p><ul><li>Code：即代码域，对应.text 段，它指的是编译器生成的机器指令，这些内容被存储到ROM区。一般就是Flash，需要占用flash空间。</li><li>RO-data：Read Only data，即只读数据域，对应.rodata段，它指程序中用到的只读数据，这些数据被存储在ROM区，因而程序不能修改其内容。 例如C语言中const关键字定义的变量就是典型的RO-data。放在flash里面，需要占用flash空间。</li><li>RW-data：Read Write data，即可读写数据域，对应.data段，它指初始化为“非0值”的可读写数据，程序刚运行时，这些数据具有非0的初始值， 且运行的时候它们会常驻在RAM区，因而应用程序可以修改其内容。例如C语言中使用定义的全局变量，且定义时赋予“非0值”给该变量进行初始化。需要在 RAM里面运行，但是<strong>起初需要保存在 Flash里面，程序运行后复制到 RAM里面运行</strong>，需要占用Flash空间。</li><li>ZI-data：Zero Initialie data，即0初始化数据，对应.bss段，它指初始化为“0值”的可读写数据域， 它与RW-data的区别是程序刚运行时这些数据初始值全都为0， 而后续运行过程与RW-data的性质一样，它们也常驻在RAM区，因而应用程序可以更改其内容。例如C语言中使用定义的全局变量， 且定义时赋予“0值”给该变量进行初始化(若定义该变量时没有赋予初始值，编译器会把它当ZI-data来对待，初始化为0)。ZI的数据全部是0，没必要开始就包含，只要程序运行之前将ZI数据所在的区域（RAM里面）一律清 0，不占用Flash，运行时候占用RAM。</li><li>ZI-data的栈空间(Stack)及堆空间(Heap)：在C语言中，函数内部定义的局部变量属于栈空间，进入函数的时候从向栈空间申请内存给局部变量， 退出时释放局部变量，归还内存空间。而使用malloc动态分配的变量属于堆空间。在程序中的栈空间和堆空间都是属于ZI-data区域的， 这些空间都会被初始值化为0值。编译器给出的ZI-data占用的空间值中包含了堆栈的大小(经实际测试，若程序中完全没有使用malloc动态申请堆空间， 编译器会优化，不把堆空间计算在内)。</li></ul><p>综上所述，以程序的组成构件为例，它们所属的区域类别：</p><img src="`+_+'" alt="程序组件所属的区域" style="zoom:67%;"><p>这些内容在单片机的FLASH中的大概位置如下（后面了解完map文件后可以通过map文件来具体找到每部分在FLASH中的位置）：</p><p><img src="'+A+'" alt="image-20251009080728602"></p><h3 id="_2-程序的存储与运行" tabindex="-1">2. 程序的存储与运行 <a class="header-anchor" href="#_2-程序的存储与运行" aria-label="Permalink to &quot;2. 程序的存储与运行&quot;">​</a></h3><p>RW-data和ZI-data它们仅仅是初始值不一样而已，为什么编译器非要把它们区分开？这就涉及到程序的存储状态了，应用程序具有静止状态和运行状态。</p><p>静止态的程序被存储在非易失存储器中，如STM32的内部FLASH，因而系统掉电后也能正常保存。但是当程序在运行状态的时候，程序常常需要<strong>修改一些暂存数据</strong>， 由于运行速度的要求，这些数据往往存放在内存中(RAM)，掉电后这些数据会丢失。因此，程序在静止与运行的时候它在存储器中的表现是不一样的，如下图：</p><img src="'+f+'" alt="应用程序的加载视图与执行视图" style="zoom:50%;"><table tabindex="0"><thead><tr><th>类别</th><th>包含的存储段</th><th>存储内容示例</th></tr></thead><tbody><tr><td>RO</td><td><code>.text</code>、<code>.rodata</code></td><td>- <code>.text</code>：函数代码（如 <code>func()</code>、<code>main()</code> 的指令）- <code>.rodata</code>：只读常量（如 <code>const int globe_const_var = 30</code>）</td></tr><tr><td>RW</td><td><code>.data</code></td><td>已初始化且非零的全局变量 / 静态变量（如 <code>int globe_var1 = 10</code>、<code>static int static_var1 = 70</code>）</td></tr><tr><td>ZI</td><td><code>.bss</code></td><td>未初始化或初始化为 0 的全局变量 / 静态变量（如 <code>int globe_var2</code>、<code>static int static_var2</code>、<code>static int x = 0</code>）</td></tr></tbody></table><p>图中的左侧是应用程序的存储状态，右侧是运行状态，而上方是RAM存储器区域，下方是ROM存储器区域。</p><p>程序在存储状态时，RO节(RO section)及RW节都被保存在ROM区。当程序开始运行时，内核直接从ROM中读取代码，并且在执行主体代码前， 会先执行一段加载代码，它把RW节数据从ROM复制到RAM， 并且在RAM加入ZI节，ZI节的数据都被初始化为0。加载完后RAM区准备完毕，正式开始执行主体程序。</p><blockquote><p>Tips：重定位？</p><p>在单片机系统中，将存储在非易失性存储器（如 Flash）中的已初始化变量（RW-data）复制到 SRAM 中的这个过程，更准确的说法是 <strong>数据段初始化</strong> 或 <strong>RW数据初始化</strong>。</p><p>为什么这么做？因为单片机运行时，变量必须存在于可读写的 RAM 中才能被改变。但 Flash 是只读的，无法在烧录后存入初始值。因此，编译器会把这些变量的初始值像常量一样保存在 Flash 里（这部分区域通常叫做 <code>.data</code> 段），上电后再由启动代码将其“搬”到 SRAM 里对应的地址，完成变量的初始化。通常是由芯片厂商提供的<strong>启动文件</strong> 中的汇编/C代码完成的，这个文件一般是 <code>startup.s</code>、<code>crt0.s</code> 等。</p><p>“重定位”是一个更广义的链接器/加载器概念。指确定一个程序段（代码或数据）最终在内存中的<strong>运行时地址</strong> 的过程。在单片机中有两点体现：</p><ul><li><strong>链接时重定位</strong>，链接器根据链接脚本（Linker Script）中的内存布局定义，为所有代码和数据分配最终的运行地址。例如，它知道 <code>.data</code> 段在 SRAM 中的运行地址应该是 <code>0x20000000</code>，而在 Flash 中的加载地址是 <code>0x08001000</code>；</li><li><strong>加载时重定位</strong>：对于有操作系统的复杂系统，程序被加载到内存的任意位置时，需要动态修正其中的地址引用。在<strong>裸机单片机</strong>中，这个过程是静态的，由启动代码在<strong>运行时</strong>通过复制数据来完成，这可以看作是加载时重定位的一个特例。</li></ul><p>所以，“将RW数据复制到SRAM”这个动作，是实现“RW数据段重定位”的具体手段。可以认为：<strong>数据段初始化 = 实现RW数据重定位的过程</strong>，所以提到“复制RW数据到SRAM”时，说“<strong>数据初始化</strong>”是最清晰的。如果说“<strong>这是RW段的重定位过程</strong>”，在技术上也正确，能体现出对程序加载机制的更深理解。</p></blockquote><p>编译生成的RW-data的数据属于图中的RW节，ZI-data的数据属于图中的ZI节。<strong>是否需要掉电保存，这就是把RW-data与ZI-data区别开来的原因</strong>， 因为在RAM创建数据的时候，默认值为0，但如果有的数据要求初值非0，那就需要使用ROM记录该初始值，<strong>运行时再复制到RAM</strong>。</p><p>STM32的RO区域不需要加载到SRAM，内核直接从FLASH读取指令运行。计算机系统的应用程序运行过程很类似，不过计算机系统的程序在存储状态时位于硬盘， 执行的时候甚至会把上述的RO区域(代码、只读数据)加载到内存，加快运行速度，还有虚拟内存管理单元(MMU)辅助加载数据， 使得可以运行比物理内存还大的应用程序。而STM32没有MMU，所以无法支持Linux和Windows系统。</p><p>当程序存储到STM32芯片的内部FLASH时(即ROM区)，它占用的空间是Code、RO-data及RW-data的总和，所以如果这些内容比STM32芯片的FLASH空间大， 程序就无法被正常保存了。当程序在执行的时候，需要占用内部SRAM空间(即RAM区)，占用的空间包括RW-data和ZI-data。 应用程序在各个状态时各区域的组成如下表：</p><img src="'+D+'" alt="程序状态区域的组成" style="zoom:67%;"><blockquote><p><strong>Code</strong> + <strong>RO data</strong> + <strong>RW data</strong> 的大小也是生成的 <strong>bin</strong> 文件的大小。</p></blockquote><p>在MDK中，我们建立的工程一般会选择芯片型号，选择后就有确定的FLASH及SRAM大小，若代码超出了芯片的存储器的极限， 编译器会提示错误，这时就需要裁剪程序了，裁剪时可针对超出的区域来优化。</p><blockquote><p>参考资料：</p><p><a href="https://bbs.huaweicloud.com/blogs/375342" target="_blank" rel="noreferrer">STM32的内存管理相关（内存架构，内存管理，map文件分析）-云社区-华为云</a></p><p><a href="https://blog.csdn.net/xingqingly/article/details/120260398" target="_blank" rel="noreferrer">STM32内存结构介绍，FreeRTOS内存分配技巧，Stack_Size和Heap_Size大小设置_heap size stack size-CSDN博客</a></p><p><a href="https://blog.csdn.net/DZRYWYBL/article/details/125703009" target="_blank" rel="noreferrer">两种存储器，三种内存大小，六段段_6个储存数据段和3种储存属性区-CSDN博客</a></p><p><a href="https://blog.csdn.net/freee12/article/details/108809947" target="_blank" rel="noreferrer">实例说明代码段(.text)、数据段(.data)、bss段、只读数据段(.rodata)、堆栈的划分依据_rodata 和rosdata-CSDN博客</a></p></blockquote>',121)])])}const W=i(R,[["render",M]]);export{T as __pageData,W as default};
