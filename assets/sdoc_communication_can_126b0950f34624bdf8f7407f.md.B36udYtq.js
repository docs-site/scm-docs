import{_ as e,c as t,o,b0 as s}from"./chunks/framework.C5ev1SXp.js";const i="/scm-docs/assets/image-20230502094247993.phRFobwp.png",r="/scm-docs/assets/image-20230502094312429.Dobb45vm.png",l="/scm-docs/assets/image-20230502094501198.BtFqRXa2.png",n="/scm-docs/assets/image-20230502094510371.B9BoMD40.png",c="/scm-docs/assets/image-20230502094842195.CS4UB9vc.png",p="/scm-docs/assets/image-20230502094956476.CENp9ncs.png",d="/scm-docs/assets/image-20230502100222299.BaAH3JXD.png",m="/scm-docs/assets/image-20230502100325963.BzSIaXuS.png",h="/scm-docs/assets/image-20230502100559117.cRUQoaoy.png",C="/scm-docs/assets/image-20230502100648721.DN2xqhE0.png",_="/scm-docs/assets/image-20230502100728154.BoTey_YZ.png",u="/scm-docs/assets/image-20230502100818549.leyXnN93.png",A="/scm-docs/assets/image-20230502101242527.B6Pzv_eF.png",b="/scm-docs/assets/image-20230502101408532.CBmxl_Nj.png",g="/scm-docs/assets/image-20230502101543523.CRFugVG8.png",P=JSON.parse('{"title":"LV001-CAN通信简介","description":null,"frontmatter":{"title":"LV001-CAN通信简介","date":"2025-09-27T10:07:42.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/communication/can/126b0950f34624bdf8f7407f","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-27T10:07:42.587Z","fulluuid":"df8f7407fc324becb0237697f4ea8f9c","useduuid":"df8f7407f"}},"headers":[],"relativePath":"sdoc/communication/can/126b0950f34624bdf8f7407f.md","filePath":"sdoc/60-通信专题/40-CAN/LV001-CAN通信简介.md","lastUpdated":1758811394000}'),N={name:"sdoc/communication/can/126b0950f34624bdf8f7407f.md"};function f(D,a,q,I,S,x){return o(),t("div",null,[...a[0]||(a[0]=[s('<h1 id="lv001-can通信简介" tabindex="-1">LV001-CAN通信简介 <a class="header-anchor" href="#lv001-can通信简介" aria-label="Permalink to &quot;LV001-CAN通信简介&quot;">​</a></h1><h2 id="一、can简介" tabindex="-1">一、CAN简介 <a class="header-anchor" href="#一、can简介" aria-label="Permalink to &quot;一、CAN简介&quot;">​</a></h2><h3 id="_1-can" tabindex="-1">1. CAN <a class="header-anchor" href="#_1-can" aria-label="Permalink to &quot;1. CAN&quot;">​</a></h3><p>控制器局域网（ Controller Area Network， CAN） ，是由德国BOSCH（博世）公司开发， 是目前国际上应用最为广泛的现场总线之一。 其特点是可拓展性好，可承受大量数据的高速通信， 高度稳定可靠，因此常应用于汽车电子领域、工业自动化、医疗设备等高要求环境。</p><p>它是 ISO 国际标准化的串行通信协议。在当前的汽车产业中，出于对安全性、舒适性、方便性、低公害、低成本的要求，各种各样的电子控制系统被开发了出来。由于这些系统之间通信所用的数据类型及对可靠性的要求不尽相同，由多条总线构成的情况很多，线束的数量也随之增加。为适应“减少线束的数量”、“通过多个 LAN，进行大量数据的高速通信”的需要， 1986 年德国电气商博世公司开发出面向汽车的 CAN 通信协议。此后， CAN 通过 ISO11898 及 ISO11519 进行了标准化，现在在欧洲已是汽车网络的标准协议。</p><p>（1） ISO11519定义了通信速率为10～125Kbps的低速CAN通信标准，属于开环总线，传输速率为40Kbps时，总线长度可达1000米；</p><p>（2）ISO11898定义了通信速率为125Kbps～1 Mbps的高速CAN通信标准，属于闭环总线，传输速率可达1Mbps，总线长度≤40米；</p><p>高速CAN主要应用在发动机、变速箱等对实时性、传输速度要求高的场景。低速CAN主要应用在车身控制系统等可靠性要求高的场景，低速CAN在断掉其任一导线后，仍可以继续接收数据，因此在汽车发生交通事故时，使用低速CAN能更大提高设备正常接收数据工作的可能性，提高安全性。</p><p>现在， CAN 的高性能和可靠性已被认同，并被广泛地应用于工业自动化、船舶、医疗设备、工业设备等方面。现场总线是当今自动化领域技术发展的热点之一，被誉为自动化领域的计算机局域网。它的出现为分布式控制系统实现各节点之间实时、可靠的数据通信提供了强有力的技术支持。</p><h3 id="_2-特点" tabindex="-1">2. 特点 <a class="header-anchor" href="#_2-特点" aria-label="Permalink to &quot;2. 特点&quot;">​</a></h3><p>CAN 控制器根据两根线上的电位差来判断总线电平。总线电平分为显性电平和隐性电平，二者必居其一。发送方通过使总线电平发生变化，将消息发送给接收方。 它主要有以下特点：</p><p>（1）多主控制。 在总线空闲时，所有单元都可以发送消息（多主控制），而两个以上的单元同时开始发送消息时，根据标识符（Identifier 以下称为 ID）决定优先级。 ID 并不是表示发送的目的地址，而是表示访问总线的消息的优先级。两个以上的单元同时开始发送消息时，对各消息 ID 的每个位进行逐个仲裁比较。仲裁获胜（被判定为优先级最高）的单元可继续发送消息，仲裁失利的单元则立刻停止发送而进行接收工作。</p><p>（2）系统的柔软性。 与总线相连的单元没有类似于“地址”的信息。因此在总线上增加单元时，连接在总线上的其它单元的软硬件及应用层都不需要改变。</p><p>（3）通信速度较快，通信距离远。 最高 1Mbps（距离小于 40M），最远可达 10KM（速率低于 5Kbps）。</p><p>（4）具有错误检测、错误通知和错误恢复功能。 所有单元都可以检测错误（错误检测功能），检测出错误的单元会立即同时通知其他所有单元（错误通知功能）， 正在发送消息的单元一旦检测出错误，会强制结束当前的发送。强制结束发送的单元会不断反复地重新发送此消息直到成功发送为止（错误恢复功能）。</p><p>（5）故障封闭功能。 CAN 可以判断出错误的类型是总线上暂时的数据错误（如外部噪声等）还是持续的数据错误（如单元内部故障、驱动器故障、断线等）。由此功能，当总线上发生持续数据错误时，可将引起此故障的单元从总线上隔离出去。</p><p>（6）连接节点多。 CAN 总线是可同时连接多个单元的总线。可连接的单元总数理论上是没有限制的。但实际上可连接的单元数受总线上的时间延迟及电气负载的限制。降低通信速度，可连接的单元数增加；提高通信速度，则可连接的单元数减少。</p><p>正是因为 CAN 协议的这些特点，使得 CAN 特别适合工业过程监控设备的互连，因此，越来越受到工业界的重视，并已公认为最有前途的现场总线之一。</p><h2 id="二、网络拓扑结构" tabindex="-1">二、网络拓扑结构 <a class="header-anchor" href="#二、网络拓扑结构" aria-label="Permalink to &quot;二、网络拓扑结构&quot;">​</a></h2><ul><li>低速 CAN 拓扑结构</li></ul><img src="'+i+'" alt="image-20230502094247993" style="zoom:33%;"><ul><li>高速 CAN 拓扑结构</li></ul><img src="'+r+'" alt="image-20230502094312429" style="zoom:33%;"><p>基于ISO11519标准的低速CAN，是一个“开环网络”，每根总线上个串联一个2.2KΩ的电阻；基于ISO11898标准的高速CAN，是一个“闭环网络”，总线的两端各需串联一个120Ω的电阻用于阻抗匹配，以减少回波反射。</p><h2 id="三、电气特性与协议" tabindex="-1">三、电气特性与协议 <a class="header-anchor" href="#三、电气特性与协议" aria-label="Permalink to &quot;三、电气特性与协议&quot;">​</a></h2><h3 id="_1-电气特性" tabindex="-1">1. 电气特性 <a class="header-anchor" href="#_1-电气特性" aria-label="Permalink to &quot;1. 电气特性&quot;">​</a></h3><p>类似RS485， CAN也使用差分信号传输数据。 CAN总线使用CAN_H和CAN_L的电位差来表示数据电平。电位差分为显性电平和隐性电平，分别表示逻辑0和1。</p><ul><li>低速CAN（ ISO11519标准）的电平定义</li></ul><img src="'+l+'" alt="image-20230502094501198" style="zoom:25%;"><ul><li>高速CAN（ ISO11898标准）的电平定义</li></ul><img src="'+n+'" alt="image-20230502094510371" style="zoom:25%;"><p>两者物理层电气特性不一样，因此不能将它们连接在一起。可以看到当CAN_H和CAN_L电压相近，则表示隐性电平，对应逻辑1，当两个电压相差较大，表示显性电平，对应逻辑0。</p><h3 id="_2-低速-高速-can-对比" tabindex="-1">2. 低速/高速 CAN 对比 <a class="header-anchor" href="#_2-低速-高速-can-对比" aria-label="Permalink to &quot;2. 低速/高速 CAN 对比&quot;">​</a></h3><img src="'+c+'" alt="image-20230502094842195" style="zoom:50%;"><h3 id="_3-can协议" tabindex="-1">3. CAN协议 <a class="header-anchor" href="#_3-can协议" aria-label="Permalink to &quot;3. CAN协议&quot;">​</a></h3><p>CAN是一种基于消息广播模式的串行通信总线， 即在同一时刻网络上所有节点监测到的数据是一致的，各节点根据报文ID来甄别是否是发给自己的报文。</p><p>CAN总线以“帧”（ Frame）的形式进行通信。 CAN 总线协议规定了5种帧，分别是数据帧、 远程帧、错误帧、 超载帧以及帧间隔， 其中数据帧最常用， 各个帧的用途如下：</p><table tabindex="0"><thead><tr><th>帧类型</th><th>作用</th></tr></thead><tbody><tr><td>数据帧(Data Frame)</td><td>用于发送节点向接收节点传输数据的帧</td></tr><tr><td>远程帧(Remote Frame)</td><td>用于接收节点向具有相同ID的发送节点请求数据的帧</td></tr><tr><td>错误帧(Error Frame)</td><td>用于当检测出错误时，向其它节点通知错误的帧</td></tr><tr><td>超载帧(Overload Frame)</td><td>用于接收节点通知其尚未做好接收准备的帧</td></tr><tr><td>帧间隔(Inter Frame Space)</td><td>用于将数据帧及远程帧与前面的帧分离开来的帧</td></tr></tbody></table><p>数据帧又分为标准帧（ CAN2.0A） 和扩展帧（ CAN2.0B） ，标准帧有 11 个位的标识符（ID），扩展帧有 29 个位的 ID ，主要体现在在仲裁段和控制段上。 当CAN总线网络中有多个CAN节点设备时， 某一CAN设备发出数据帧，总线上所有设备(无过滤时)都获取该数据帧中仲裁段中的ID，如果是自己关注ID的数据，则获取数据段的内容，完成数据的传输。</p><h3 id="_4-数据帧详解" tabindex="-1">4. 数据帧详解 <a class="header-anchor" href="#_4-数据帧详解" aria-label="Permalink to &quot;4. 数据帧详解&quot;">​</a></h3><h4 id="_4-1-格式概览" tabindex="-1">4.1 格式概览 <a class="header-anchor" href="#_4-1-格式概览" aria-label="Permalink to &quot;4.1 格式概览&quot;">​</a></h4><p>数据帧由七段组成， 如下图（CAN 标准数据帧和扩展数据帧结构 ）：</p><p><img src="'+p+'" alt="image-20230502094956476"></p><p>（1）帧起始(Start Of Frame-SOF)： 1bit，显性信号，表示数据帧（或远程帧）的开始；</p><p>（2）仲裁段(Arbitration Field)：包括标识符位（ Identifier field-ID）和远程发送请求位（ Remote Transfer Request， RTR） 。标准帧的ID位是11位，即范围是0x000~0x7FF， 而扩展帧的ID是11+18=29位；在CAN协议中， ID决定报文的优先级高低，也决定这拓扑结构的节点是否接收此ID的帧数据。远程发送请求位， 用于区分该帧是数据帧还是远程帧，显性信号（ 0 ）代表数据帧（ Data Frame） ，隐性信号（ 1 ）代表远程帧（ Remote Frame）；</p><p>（3）控制段（ Control Field） ：标准帧中由扩展标识符位（ Identifier Extension bit-IDE， 1 bit） 、 保留位 0（ Reseved bit0-r0， 1 bit） 、 数据长度编码位（ Data Length Code-DLC， 4 bits） 组成；扩展帧用由两个保留位（ Reseved bit， 2 bit） 、 数据长度编码位（ Data Length Code-DLC， 4 bits） 组成</p><p>（4）数据段（ Data Field）：发送数据的内容，最多8个字节（ 64bit），它的实际长度会写到前面的数据长度编码位DLC里。</p><p>（5）循环校验段（ CRC Field）：包括循环校验序列（ CRC Sequence）和界定符（ Delimiter， DEL） ；循环校验序列用于校验传输是否正确； 界定符用于表示循环校验序列是否结束。</p><p>（6）确认段（ ACK Field）：包括确认位（ ACK SLOT）和界定符（ Delimiter， DEL） ；确认位在节点收到正确的CRC序列时，发送端的ACK位被置位； 界定符表示确认是否正常接收；</p><p>（7）帧结束（ End of Frame-EOF） ： 7位长度，隐性信号，表示帧的结束。</p><h4 id="_4-2-各部分说明" tabindex="-1">4.2 各部分说明 <a class="header-anchor" href="#_4-2-各部分说明" aria-label="Permalink to &quot;4.2 各部分说明&quot;">​</a></h4><img src="'+d+'" alt="image-20230502100222299" style="zoom:50%;"><p>图中 D 表示显性电平， R 表示隐形电平（下同）。</p><h5 id="_4-2-1-帧起始和仲裁段" tabindex="-1">4.2.1 帧起始和仲裁段 <a class="header-anchor" href="#_4-2-1-帧起始和仲裁段" aria-label="Permalink to &quot;4.2.1 帧起始和仲裁段&quot;">​</a></h5><ul><li><p>帧起始，标准帧和扩展帧都是由 1 个位的显性电平表示帧起始。</p></li><li><p>仲裁段，表示数据优先级的段，标准帧和扩展帧格式在本段有所区别 ，如下图（数据帧仲裁段构成 ）</p></li></ul><img src="'+m+'" alt="image-20230502100325963" style="zoom:50%;"><p>标准格式的 ID 有 11 个位。从 ID28 到 ID18 被依次发送。禁止高 7 位都为隐性（禁止设定： ID=1111111XXXX）。扩展格式的 ID 有 29 个位。基本 ID 从 ID28 到 ID18，扩展 ID 由 ID17 到 ID0 表示。基本 ID 和标准格式的 ID 相同。禁止高 7 位都为隐性（禁止设定：基本ID=1111111XXXX）。</p><p>其中 RTR 位用于标识是否是远程帧（ 0，数据帧； 1，远程帧）， IDE 位为标识符选择位（ 0，使用标准标识符； 1，使用扩展标识符）， SRR 位为代替远程请求位，为隐性位，它代替了标准帧中的 RTR 位。</p><h5 id="_4-2-2-控制段" tabindex="-1">4.2.2 控制段 <a class="header-anchor" href="#_4-2-2-控制段" aria-label="Permalink to &quot;4.2.2 控制段&quot;">​</a></h5><p>控制段，由 6 个位构成，表示数据段的字节数。标准帧和扩展帧的控制段稍有不同 ：</p><img src="'+h+'" alt="image-20230502100559117" style="zoom:50%;"><p>上图中， r0 和 r1 为保留位，必须全部以显性电平发送，但是接收端可以接收显性、隐性及任意组合的电平。 DLC 段为数据长度表示段，高位在前， DLC 段有效值为 0~8，但是接收方接收到 9~15 的时候并不认为是错误。</p><h5 id="_4-2-3-数据段" tabindex="-1">4.2.3 数据段 <a class="header-anchor" href="#_4-2-3-数据段" aria-label="Permalink to &quot;4.2.3 数据段&quot;">​</a></h5><p>数据段，该段可包含 0~8 个字节的数据。从最高位（ MSB）开始输出，标准帧和扩展帧在这个段的定义都是一样的。</p><img src="'+C+'" alt="image-20230502100648721" style="zoom:67%;"><h5 id="_4-2-4-crc-段" tabindex="-1">4.2.4 CRC 段 <a class="header-anchor" href="#_4-2-4-crc-段" aria-label="Permalink to &quot;4.2.4 CRC 段&quot;">​</a></h5><p>CRC 段，该段用于检查帧传输错误。 由 15 个位的 CRC 顺序和 1 个位的 CRC 界定符（用于分隔的位）组成，标准帧和扩展帧在这个段的格式也是相同的。</p><img src="'+_+'" alt="image-20230502100728154" style="zoom:67%;"><p>此段 CRC 的值计算范围包括： 帧起始、仲裁段、控制段、数据段。接收方以同样的算法计算 CRC 值并进行比较，不一致时会通报错误。</p><h5 id="_4-2-5-ack-段" tabindex="-1">4.2.5 ACK 段 <a class="header-anchor" href="#_4-2-5-ack-段" aria-label="Permalink to &quot;4.2.5 ACK 段&quot;">​</a></h5><p>ACK 段，此段用来确认是否正常接收。由 ACK 槽(ACK Slot)和 ACK 界定符 2 个位组成。标准帧和扩展帧在这个段的格式也是相同的。</p><img src="'+u+'" alt="image-20230502100818549" style="zoom:63%;"><p>发送单元的 ACK，发送 2 个位的隐性位，而接收到正确消息的单元在 ACK 槽（ACK Slot）发送显性位，通知发送单元正常接收结束，这个过程叫发送 ACK/返回 ACK。发送 ACK 的是在既不处于总线关闭态也不处于休眠态的所有接收单元中，接收到正常消息的单元（发送单元不发送 ACK）。所谓正常消息是指不含填充错误、格式错误、 CRC 错误的消息。</p><h5 id="_4-2-6-帧结束" tabindex="-1">4.2.6 帧结束 <a class="header-anchor" href="#_4-2-6-帧结束" aria-label="Permalink to &quot;4.2.6 帧结束&quot;">​</a></h5><p>帧结束，标准帧和扩展帧在这个段格式一样，由 7 个位的隐性位组成。至此，数据帧的 7 个段就介绍完了。</p><h2 id="四、can的位时序" tabindex="-1">四、CAN的位时序 <a class="header-anchor" href="#四、can的位时序" aria-label="Permalink to &quot;四、CAN的位时序&quot;">​</a></h2><p>位速率：由发送单元在非同步的情况下发送的每秒钟的位数称为位速率。</p><h3 id="_1-一个位的组成" tabindex="-1">1. 一个位的组成 <a class="header-anchor" href="#_1-一个位的组成" aria-label="Permalink to &quot;1. 一个位的组成&quot;">​</a></h3><p>一个位可分为 4 段：同步段（SS）、传播时间段（PTS）、相位缓冲段 1（PBS1）和相位缓冲段 2（PBS2） 。这些段又由可称为 Time Quantum（以下称为 Tq）的最小时间单位构成。1 位分为 4 个段，每个段又由若干个 Tq 构成，这称为位时序。</p><p>1 位由多少个 Tq 构成、每个段又由多少个 Tq 构成等，可以任意设定位时序。通过设定位时序，多个单元可同时采样，也可任意设定采样点。各段的作用和 Tq 数如下表（一个位各段及其作用 ）：</p><img src="'+A+'" alt="image-20230502101242527" style="zoom:50%;"><p>一个位的构成如下图所示：</p><img src="'+b+'" alt="image-20230502101408532" style="zoom:67%;"><p>上图的采样点，是指读取总线电平，并将读到的电平作为位值的点。位置在 PBS1 结束处。根据这个位时序，我们就可以计算 CAN 通信的波特率了。图中采样时间加大或减少量的最大值就是SJW（再同步补偿宽度）。</p><h3 id="_2-can协议仲裁的实现" tabindex="-1">2. CAN协议仲裁的实现 <a class="header-anchor" href="#_2-can协议仲裁的实现" aria-label="Permalink to &quot;2. CAN协议仲裁的实现&quot;">​</a></h3><p>在总线空闲态，最先开始发送消息的单元获得发送权，一但发送，其他单元无法抢占。当多个单元同时开始发送时，各发送单元从仲裁段的第一位开始进行仲裁，连续输出显性电平最多的单元可继续发送，具有较高优先级。实现过程如下图：</p><img src="'+g+'" alt="image-20230502101543523" style="zoom:67%;"><p>上图中，单元 1 和单元 2 同时开始向总线发送数据，开始部分他们的数据格式是一样的，故无法区分优先级，直到 T 时刻，单元 1 输出隐性电平，而单元 2 输出显性电平，此时单元 1仲裁失利，立刻转入接收状态工作，不再与单元 2 竞争，而单元 2 则顺利获得总线使用权，继续发送自己的数据。这就实现了仲裁，让连续发送显性电平多的单元获得总线使用权。</p>',88)])])}const k=e(N,[["render",f]]);export{P as __pageData,k as default};
