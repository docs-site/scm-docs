import{_ as e,c as t,o as p,b0 as s}from"./chunks/framework.C5ev1SXp.js";const r="/scm-docs/assets/image-20240114085044691.BY7uPx_C.png",o="/scm-docs/assets/image-20240114085219342.Bbc6Woa4.png",i="/scm-docs/assets/image-20240114090049775.DM1PBix_.png",l="/scm-docs/assets/image-20240114091029566.CP09cSHj.png",T="/scm-docs/assets/image-20240114091138052.p-bWQYX5.png",c="/scm-docs/assets/image-20240114091211234.BLdnVDcX.png",n="/scm-docs/assets/image-20240114091357679.DQcqk6KT.png",C="/scm-docs/assets/image-20240114091813132.BRGGK7fh.png",_="/scm-docs/assets/image-20240114092147664.DxFIyZYm.png",I="/scm-docs/assets/image-20240114092634878.BAd8kJ20.png",m="/scm-docs/assets/image-20240114093204210.EXflZMez.png",d="/scm-docs/assets/image-20240114093400335.kHfUAD9-.png",b=JSON.parse('{"title":"LV030-通用定时器简介","description":null,"frontmatter":{"title":"LV030-通用定时器简介","date":"2025-09-21T18:38:12.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/peripheral/timer/126b08f6aa441b536809798e","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-21T18:38:12.437Z","fulluuid":"36809798e68046309b813b9706a23f8a","useduuid":"36809798e"}},"headers":[],"relativePath":"sdoc/peripheral/timer/126b08f6aa441b536809798e.md","filePath":"sdoc/20-基本外设篇/15-定时器/LV030-通用定时器简介.md","lastUpdated":1758153691000}'),h={name:"sdoc/peripheral/timer/126b08f6aa441b536809798e.md"};function M(g,a,x,P,u,R){return p(),t("div",null,[...a[0]||(a[0]=[s('<h1 id="lv030-通用定时器简介" tabindex="-1">LV030-通用定时器简介 <a class="header-anchor" href="#lv030-通用定时器简介" aria-label="Permalink to &quot;LV030-通用定时器简介&quot;">​</a></h1><h2 id="一、stm32的通用定时器" tabindex="-1">一、STM32的通用定时器 <a class="header-anchor" href="#一、stm32的通用定时器" aria-label="Permalink to &quot;一、STM32的通用定时器&quot;">​</a></h2><p>STM32F103 的通用定时器有 4 个，如下所示：</p><img src="'+r+'" alt="image-20240114085044691"><p>该表可以参考<a href="https://www.st.com/resource/en/datasheet/stm32f103ze.pdf" target="_blank" rel="noreferrer">《STM32数据手册》</a>的2.3.17 Timers and watchdogs小节。由上表知道： 该 STM32 芯片的计数器都是 16 位的。 通用定时器和高级定时器其实也就是在基本定时器的基础上，添加了一些其他功能，如： 输入捕获、 输出比较、输出 PWM 和单脉冲模式等。 而通用定时器数量较多，其特性也有一些的差异，但是基本原理都一样。</p><h2 id="二、通用定时器框图" tabindex="-1">二、通用定时器框图 <a class="header-anchor" href="#二、通用定时器框图" aria-label="Permalink to &quot;二、通用定时器框图&quot;">​</a></h2><p>基本框图如下：</p><img src="'+o+'" alt="image-20240114085219342" style="zoom:50%;"><p align="center"> 图二-1 通用定时器框图 </p><h3 id="_1-1-时钟源" tabindex="-1">1. ① 时钟源 <a class="header-anchor" href="#_1-1-时钟源" aria-label="Permalink to &quot;1. ① 时钟源&quot;">​</a></h3><h4 id="_1-1-有哪些选择" tabindex="-1">1.1 有哪些选择？ <a class="header-anchor" href="#_1-1-有哪些选择" aria-label="Permalink to &quot;1.1 有哪些选择？&quot;">​</a></h4><p>通用定时器时钟可以选择下面四类时钟源之一：</p><p>（1）内部时钟(CK_INT)。</p><p>（2）外部时钟模式 1：外部输入引脚(TIx)， x=1， 2（即只能来自于通道 1 或者通道 2）。</p><p>（3）外部时钟模式 2：外部触发输入(ETR)。</p><p>（4）内部触发输入(ITRx)：使用一个定时器作为另一定时器的预分频器。</p><p>通用定时器时钟源的设置方法如下表所示：</p><table tabindex="0"><thead><tr><th>定时器时钟类型</th><th>设置方法</th></tr></thead><tbody><tr><td>内部时钟(CK_INT)</td><td>设置 TIMx_SMCR 的 SMS=0000</td></tr><tr><td>外部时钟模式 1：外部输入引脚(TIx)</td><td>设置 TIMx_SMCR 的 SMS=1111</td></tr><tr><td>外部时钟模式 2：外部触发输入(ETR)</td><td>设置 TIMx_SMCR 的 ECE=1</td></tr><tr><td>内部触发输入(ITRx)</td><td>设置可参考<a href="https://www.stmcu.com.cn/Designresource/detail/localization_document%20/710001" target="_blank" rel="noreferrer">《STM32中文参考手册》</a>的14.3.15 小节</td></tr></tbody></table><h4 id="_1-2-内部时钟-ck-int" tabindex="-1">1.2 内部时钟（CK_INT） <a class="header-anchor" href="#_1-2-内部时钟-ck-int" aria-label="Permalink to &quot;1.2 内部时钟（CK_INT）&quot;">​</a></h4><p>STM32F1 系列的定时器 TIM2/TIM3/TIM4/TIM5/ TIM6/TIM7 都是挂载在 APB1 总线上， 这些定时器的内部时钟(CK_INT)实际上来自于 APB1 总线提供的时钟。但是这些定时器时钟不是由 APB1 总线直接提供，而是要先经过一个倍频器。 在 HAL 库版本例程源码的 sys.c 文件中，系统时钟初始化函数 sys_stm32_clock_init 已经设置 APB1 总线时钟频率为 36MHz， APB1 预分频器的预分频系数为 2，所以这些定时器时钟源频率为72MHz 。因为当 APB1 预分频器的预分频系数≥2 分频时， 挂载在 APB1 总线上的定时器时钟频率是该总线时钟频率的两倍。这个和基本定时器一样。</p><p>另外， 高级定时器 TIM1 和 TIM8 是挂载在 APB2 总线上的， 也随便给大家说一下它们的情况。 由STM32F1 时钟系统图（可以看数据手册）可以知道，如果 APB2 预分频系数为 1，挂载在该总线的定时器时钟频率不变，否则频率是该总线时钟频率的 2 倍。 我们在系统时钟初始化函数sys_stm32_clock_init 已经设置 APB2 总线时钟频率为 72MHz， APB2 预分频器的预分频系数为1，所以 TIM1 和 TIM8 时钟源频率为 72MHz。</p><h4 id="_1-3-外部时钟模式-1-ti1、-ti2" tabindex="-1">1.3 外部时钟模式 1（TI1、 TI2） <a class="header-anchor" href="#_1-3-外部时钟模式-1-ti1、-ti2" aria-label="Permalink to &quot;1.3 外部时钟模式 1（TI1、 TI2）&quot;">​</a></h4><p>外部时钟模式 1 这类时钟源，顾名思义时钟信号来自芯片外部。时钟源进入定时器的流程如下：外部时钟源信号→IO→TIMx_CH1（或者TIMx_CH2），这里需要注意的是：外部时钟模式 1 下，时钟源信号只能从 CH1 或者 CH2 输入到定时器， CH3 和 CH4 都是不可以的。从 IO到 TIMx_CH1（或者 TIMx_CH2），就需要我们配置 IO 的复用功能，才能使 IO 和定时器通道相连通。</p><p>时钟源信号来到定时器 CH1 或 CH2 后，需要经过什么“关卡”才能到达计数器作为计数的时钟频率的？我们来看一下：</p><img src="'+i+'" alt="image-20240114090049775" style="zoom:50%;"><p align="center"> 图二-2 外部时钟模式 1 框图 </p><p>图中是以 CH2（通道 2）为例的，时钟源信号到达 CH2 后，那么这里我们把这个时钟源信号用 TI2 表示，因为它只是个信号，来到定时器内部，那我们就按定时器内部的信号来命名。</p><p>TI2 首先经过一个滤波器，由 ICF[3:0]位来设置滤波方式，也可以设置不使用滤波器。</p><p>接着经过边沿检测器，由 CC2P 位来设置检测的边沿，可以上升沿或者下降沿检测。</p><p>然后经过触发输入选择器，由 TS[4:0]位来选择 TRGI（触发输入信号）的来源。可以看到图中框出了 TI1F_ED、 TI1FP1 和 TI2FP2 三个触发输入信号（TRGI）。 TI1F_ED 表示来自于 CH1，并且没有经过边沿检测器过滤的信号，所以它是 CH1 的双边沿信号，即上升沿或者下降沿都是有效的。 TI1FP1 表示来自 CH1 并经过边沿检测器后的信号，可以是上升沿或者下降沿。 TI2FP2 表示来自 CH2 并经过边沿检测器后的信号，可以是上升沿或者下降沿。这里以CH2 为例，那只能选择 TI2FP2。如果是 CH1 为例，那就可以选择 TI1F_ED 或者 TI1FP1。</p><p>最后经过从模式选择器，由 ECE 位和 SMS[2:0]位来选择定时器的时钟源。这里我们介绍的是外部时钟模式 1，所以 ECE 位置 0， SMS[2:0] = 111即可。 CK_PSC 需要经过定时器的预分频器分频后，最终就能到达计数器进行计数了。</p><h4 id="_1-3-外部时钟模式-2-etr" tabindex="-1">1.3 外部时钟模式 2（ETR） <a class="header-anchor" href="#_1-3-外部时钟模式-2-etr" aria-label="Permalink to &quot;1.3 外部时钟模式 2（ETR）&quot;">​</a></h4><p>外部时钟模式 2，顾名思义时钟信号来自芯片外部。时钟源进入定时器的流程如下：外部时钟源信号→IO→TIMx_ETR。从 IO 到 TIMx_ETR，就需要我们配置 IO 的复用功能，才能使IO 和定时器相连通。</p><p>时钟源信号来到定时器 TIMx_ETR 后，需要经过什么“关卡”才能到达计数器作为计数的时钟频率？我们来看一下：</p><img src="'+l+'" alt="image-20240114091029566" style="zoom:50%;"><p align="center"> 图二-3 外部时钟模式 2 框图 </p><p>可以看到在外部时钟模式 2 下，定时器时钟信号首先从 ETR 引脚进来。</p><p>接着经过外部触发极性选择器，由 ETP 位来设置上升沿有效还是下降沿有效，选择下降沿有效的话，信号会经过反相器。</p><p>然后经过外部触发预分频器，由 ETPS[1:0]位来设置预分频系数，系数范围： 1、 2、 4、 8。</p><p>紧接着经过滤波器器，由 ETF[3:0]位来设置滤波方式，也可以设置不使用滤波器。 fDTS 由TIMx_CR1 寄存器的 CKD 位设置。</p><p>最后经过从模式选择器，由 ECE 位和 SMS[2:0]位来选择定时器的时钟源。这里我们介绍的是外部时钟模式 2，直接把 ECE 位置 1 即可。 CK_PSC 需要经过定时器的预分频器分频后，最终就能到达计数器进行计数了。</p><h4 id="_1-4-内部触发输入-itrx" tabindex="-1">1.4 内部触发输入（ITRx） <a class="header-anchor" href="#_1-4-内部触发输入-itrx" aria-label="Permalink to &quot;1.4 内部触发输入（ITRx）&quot;">​</a></h4><p>内部触发输入是使用一个定时器作为另一个定时器的预分频器，即实现定时器的级联。下面以 TIM1 作为 TIM2 的预分频器为例，我们来看一看。</p><img src="'+T+'" alt="image-20240114091138052" style="zoom:50%;"><p align="center"> 图二-4 TIM1 作为 TIM2 的预分频器框图 </p><p>上图中， TIM1 作为 TIM2 的预分频器，需要完成的配置步骤如下：</p><p>（1）TIM1_CR2 寄存器的 MMS[2:0]位设置为 010，即 TIM1 的主模式选择为更新（选择更新事件作为触发输出 （TRGO））。</p><p>（2）TIM2_SMCR 寄存器的 TS[2:0]位设置为 000，即使用 ITR1 作为内部触发。 TS[2:0]位用于配置触发选择，除了 ITR1，还有其他的选择，详细描述如下图所示：</p><img src="'+c+'" alt="image-20240114091211234" style="zoom:50%;"><p align="center"> 图二-5 触发选择 </p><p>上图中的触发选择中，我们在学习外部时钟模式 1 的时候说过 TI1F_ED、TI1FP1 和 TI2FP2，以及外部时钟模式 2 的 ETRF， 它们都是属于外部的，其余的都是内部触发了。那么这内部触发都代表什么意思呢？我们可以找到<a href="https://www.stmcu.com.cn/Designresource/detail/localization_document%20/710001" target="_blank" rel="noreferrer">《STM32中文参考手册》</a>的 表78 TIMx内部触发连接：</p><img src="'+n+'" alt="image-20240114091357679" style="zoom:33%;"><p>在步骤（2）中， TS[2:0]位设置为 000，使用 ITR1 作为内部触发，这个 ITR1 什么意思？由上表可以知道，当从模式定时器为 TIM2 时， ITR1 表示主模式定时器就是 TIM1。 这里只是TIM2~5 的内部触发连接情况，其他定时器可以查看参考手册的相应章节。</p><p>（3）TIM2_SMCR 寄存器的 SMS[2:0]位设置为 111，即从模式控制器选择外部时钟模式 1。</p><p>（4）TIM1 和 TIM2 的 CEN 位都要置 1，即启动计数器。</p><p>定时器的时钟源这部分内容是非常重要的，因为这计数器工作的基础。虽然定时器有四类时钟源之多，但是我们最常用的还是内部时钟。</p><h3 id="_2-2-控制器" tabindex="-1">2. ② 控制器 <a class="header-anchor" href="#_2-2-控制器" aria-label="Permalink to &quot;2. ② 控制器&quot;">​</a></h3><p>控制器包括：从模式控制器、编码器接口和触发控制器（TRGO）。从模式控制器可以控制计数器复位、启动、递增/递减、计数。编码器接口针对编码器计数。触发控制器用来提供触发信号给别的外设，比如为其它定时器提供时钟或者为 DAC/ADC 的触发转换提供信号。</p><h3 id="_3-3-时基单元" tabindex="-1">3. ③ 时基单元 <a class="header-anchor" href="#_3-3-时基单元" aria-label="Permalink to &quot;3. ③ 时基单元&quot;">​</a></h3><p>时基单元包括：计数器寄存器(TIMx_CNT)、预分频器寄存器(TIMx_PSC)、自动重载寄存器(TIMx_ARR)。这部分内容和基本定时器基本一样的。</p><p>不同点是：通用定时器的计数模式有三种： 递增计数模式、 递减计数模式和中心对齐模式；TIM2 和 TIM5 的计数器是 32 位的。递增计数模式在学习基本定时器的时候已经学习过了，那么对应到递减计数模式就很好理解了。就是来了一个计数脉冲，计数器就减 1，直到计数器寄存器的值减到 0，减到 0 时定时器溢出，由于是递减计数，故而称为定时器下溢，定时器溢出就会伴随着更新事件的发生。然后计数器又从自动重载寄存器影子寄存器的值开始继续递减计数，如此循环。最后是中心对齐模式， 字面上不太好理解。该模式下，计数器先从 0 开始递增计数，直到计数器的值等于自动重载寄存器影子寄存器的值减 1 时，定时器上溢，同时生成更新事件，然后从自动重载寄存器影子寄存器的值开始递减计算，直到计数值等于 1 时，定时器下溢，同时生成更新事件，然后又从 0 开始递增计数，依此循环。每次定时器上溢或下溢都会生成更新事件。计数器的计数模式的设置请参考 TIMx_CR1 寄存器的位 CMS 和位 DIR。</p><p>我们来看一下定时器工作在不同计数模式下，更新事件发生的情况 ：</p><img src="'+C+'" alt="image-20240114091813132" style="zoom:33%;"><p align="center"> 图二-6 更新事件发生条件 </p><p>上图中，纵轴表示计数器的计数值，横轴表示时间， ARR 表示自动重载寄存器的值，小红点就是更新事件发生的时间点。举个例子，递增计数模式下，当计数值等于 ARR 时，计数器的值被复位为 0，定时器溢出，并伴随着更新事件的发生，后面继续递增计数。递减计数模式和中心对齐模式可以参考前面的描述。</p><p>上面的描述属于硬件更新事件发生条件，我们还可以通过 UG 位产生软件更新事件。关于影子寄存器和定时器溢出时间计算公式等内容可以参考基本定时器的相关笔记。</p><h3 id="_4-4-输入捕获" tabindex="-1">4. ④ 输入捕获 <a class="header-anchor" href="#_4-4-输入捕获" aria-label="Permalink to &quot;4. ④ 输入捕获&quot;">​</a></h3><p>第④部分是输入捕获，一般应用是要和第⑤部分一起完成测量功能。TIMx_CH1~ TIMx_CH4 表示定时器的 4 个通道，这 4 个通道都是可以独立工作的。 IO 端口通过复用功能与这些通道相连。配置好 IO 端口的复用功能后，将需要测量的信号输入到相应的IO 端口，输入捕获部分可以对输入的信号的上升沿，下降沿或者双边沿进行捕获，常见的测量有：测量输入信号的脉冲宽度、测量 PWM 输入信号的频率和占空比等。</p><p>下面简单了解一下测量高电平脉冲宽度的工作原理，方便理解：一般先要设置输入捕获的边沿检测极性，如：我们设置上升沿检测，那么当检测到上升沿时，定时器会把计数器 CNT的值锁存到相应的捕获/比较寄存器 TIMx_CCRy 里， y=1~4。然后我们再设置边沿检测为下降沿检测，当检测到下降沿时，定时器会把计数器 CNT 的值再次锁存到相应的捕获/比较寄存器TIMx_CCRy 里。最后，我们将前后两次锁存的 CNT 的值相减，就可以算出高电平脉冲期间内计数器的计数个数，再根据定时器的计数频率就可以计算出这个高电平脉冲的时间。如果要测量的高电平脉宽时间长度超过定时器的溢出时间周期，就会发生溢出，这时候我们还需要做定时器溢出的额外处理。低电平脉冲捕获同理。</p><p>上面的描述是第④部分输入捕获整体上的一个应用情况，下面我们来看第④部分的细节。当需要测量的信号进入通道后，需要经过哪些“关卡”？我们一起来看一下：</p><img src="'+_+'" alt="image-20240114092147664" style="zoom:50%;"><p align="center"> 图二-7 通道 1 输入阶段 </p><p>上图是图二-1 通用定时器框图第④部分通道 1 的“放大版”，这里是以通道 1 输入捕获为例进行介绍，其他通道同理。</p><p>待测量信号到达 TIMx_CH1 后，那么这里我们把这个待测量信号用 TI1 表示。</p><p>TI1 首先经过一个滤波器，由 ICF[3:0]位来设置滤波方式，也可以设置不使用滤波器。 fDTS由 TIMx_CR1 寄存器的 CKD 位设置。</p><p>接着经过边沿检测器，由 CC1P 位来设置检测的边沿，可以上升沿或者下降沿检测。 CC1NP是配置互补通道的边沿检测的，在高级定时器才有，通用定时器没有。</p><p>然后经过输入捕获映射选择器，由 CC1S[1:0]位来选择把 IC1 映射到 TI1、 TI2 还是 TRC。这里我们的待测量信号从通道 1 进来，所以选择 IC1 映射到 TI1 上即可。</p><p>紧接着经过输入捕获 1 预分频器，由 ICPS[1:0]位来设置预分频系数，范围： 1、 2、 4、 8。</p><p>最后需要把 CC1E 位置 1，使能输入捕获， IC1PS 就是分频后的捕获信号。这个信号将会到达 图二-1 通用定时器框图 的第⑤部分。</p><p>下面我们接着看 图二-1 通用定时器框图 的第⑤部分的“放大版”，如下图所示：</p><img src="'+I+'" alt="image-20240114092634878" style="zoom:50%;"><p align="center"> 图二-8 捕获/比较通道 1 主电路（输入捕获功能部分） </p><p>图中，灰色阴影部分是输出比较功能部分，学习到第⑥部分输出比较的时候再说。左边没有阴影部分就是输入捕获功能部分了。</p><p>首先看到捕获/比较预装载寄存器，我们以通道 1 为例，那么它就是 CCR1 寄存器，通道 2、通道 3、通道 4 就分别对应 CCR2、 CCR3、 CCR4。在 图二-1 通用定时器框图 中就可以看到 CCR1~4 是有影子寄存器的，所以这里就可以看到图二-8中有捕获/比较影子寄存器，该寄存器不可直接访问。</p><p>图二-8 左下角的 CC1G 位可以产生软件捕获事件，那么硬件捕获事件如何产生的？这里我们还是以通道 1 输入为例， CC1S[1:0] = 01，即 IC1 映射到 TI1 上； CC1E 位置 1，使能输入捕获；比如不滤波、不分频， ICF[3:0] = 00， ICPS[1:0] = 00；比如检测上升沿， CC1P 位置 0；接着就是等待测量信号的上升沿到来。当上升沿到来时， IC1PS 信号就会触发输入捕获事件发生，计数器的值就会被锁存到捕获/比较影子寄存器里。当 CCR1 寄存器没有被进行读操作的时候，捕获/比较影子寄存器里的值就会锁存到 CCR1 寄存器中，那么程序员就可以读取 CCR1 寄存器，得到计数器的计数值。检测下降沿同理。</p><h3 id="_5-5-输入捕获和输出比较公用部分" tabindex="-1">5. ⑤ 输入捕获和输出比较公用部分 <a class="header-anchor" href="#_5-5-输入捕获和输出比较公用部分" aria-label="Permalink to &quot;5. ⑤ 输入捕获和输出比较公用部分&quot;">​</a></h3><p>该部分需要结合第④部分或者第⑥部分共同完成相应功能。</p><h3 id="_6-6-输出比较" tabindex="-1">6. ⑥ 输出比较 <a class="header-anchor" href="#_6-6-输出比较" aria-label="Permalink to &quot;6. ⑥ 输出比较&quot;">​</a></h3><p>第⑥部分是输出比较，一般应用是要和第⑤部分一起完成定时器输出功能。TIMx_CH1~ TIMx_CH4 表示定时器的 4 个通道，这 4 个通道都是可以独立工作的。 IO 端口通过复用功能与这些通道相连。</p><p>下面我们按照输出信号产生过程顺序来看看定时器如何实现输出功能的，首先看第⑤部分的“放大版”图，如下图所示</p><img src="'+m+'" alt="image-20240114093204210" style="zoom:40%;"><p align="center"> 图二-9 捕获/比较通道 1 主电路（输出比较功能部分） </p><p>图二-9 中，灰色阴影部分是输入捕获功能部分。这里我们看到右边没有阴影部分就是输出比较功能部分了。下面以通道 1 输出比较功能为例来学习定时器如何实现输出功能的。</p><p>首先程序员写 CCR1 寄存器，即写入比较值。这个比较值需要转移到对应的捕获/比较影子寄存器后才会真正生效。什么条件下才能转移？图二-9 中可以看到 compare_transfer 旁边的与门，需要满足三个条件： CCR1 不在写入操作期间、 CC1S[1:0] = 0 配置为输出、 OC1PE 位置0（或者 OC1PE 位置 1，并且需要发生更新事件，这个更新事件可以软件产生或者硬件产生）。</p><p>当 CCR1 寄存器的值转移到其影子寄存器后，新的值就会和计数器的值进行比较，它们的比较结果将会通过第⑥部分影响定时器的输出。</p><p>下面来看看第⑥部分通道 1 ，如下图所示</p><img src="'+d+'" alt="image-20240114093400335" style="zoom:50%;"><p align="center"> 图二-10 通道 1 输出阶段 </p><p>上图中，可以看到输出模式控制器，由 OC1M[2:0]位配置输出比较模式，该位的描述可以参考《STM32F10xxx 参考手册_V10（中文版） .pdf》 相关定时器章节的 TIMx_CCMR1 寄存器。F1 系列有 8 种输出比较模式之多，后面用到再学习。</p><p>oc1ref 是输出参考信号，高电平有效，为高电平时称之为有效电平，为低电平时称之为无效电平。它的高低电平受到三个方面的影响：OC1M[3:0]位配置的输出比较模式、第⑤部分比较器的比较结果、还有就是 OC1CE 位配置的 ETRF 信号。 ETRF 信号可以将 Oc1ref 电平强制清零，该信号来自 IO 外部。</p><p>一般来说，当计数器的值和捕获/比较寄存器的值相等时，输出参考信号 oc1ref 的极性就会根据我们选择的输出比较模式而改变。如果开启了比较中断，还会发生比较中断。</p><p>CC1P 位用于选择通道输出极性。</p><p>CC1E 位置 1 使能通道输出。</p><p>OC1 信号就会从 TIMx_CH1 输出到 IO 端口，再到 IO 外部。</p>',104)])])}const f=e(h,[["render",M]]);export{b as __pageData,f as default};
