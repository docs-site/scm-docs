import{_ as e,c as t,o as r,b0 as l}from"./chunks/framework.C5ev1SXp.js";const o="/scm-docs/assets/image-20240114124949607.CjZbbuUG.png",h=JSON.parse('{"title":"LV070-高级定时器简介","description":null,"frontmatter":{"title":"LV070-高级定时器简介","date":"2025-09-21T18:42:48.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/peripheral/timer/126b08f6abf821065c6674f2","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-21T18:42:48.528Z","fulluuid":"65c6674f24194a5c905c5931e3b1bb25","useduuid":"65c6674f2"}},"headers":[],"relativePath":"sdoc/peripheral/timer/126b08f6abf821065c6674f2.md","filePath":"sdoc/20-基本外设篇/15-定时器/LV070-高级定时器简介.md","lastUpdated":1758153691000}'),i={name:"sdoc/peripheral/timer/126b08f6abf821065c6674f2.md"};function p(n,a,s,c,_,d){return r(),t("div",null,[...a[0]||(a[0]=[l('<h1 id="lv070-高级定时器简介" tabindex="-1">LV070-高级定时器简介 <a class="header-anchor" href="#lv070-高级定时器简介" aria-label="Permalink to &quot;LV070-高级定时器简介&quot;">​</a></h1><p>从这一节开始主要来学习高级定时器， STM32F103 有 2 个高级定时器（TIM1 和 TIM8）。将会通过四个实验来学习高级定时器的各个功能，分别是高级定时器输出指定个数 PWM 实验、高级定时器输出比较模式实验、高级定时器互补输出带死区控制实验和高级定时器 PWM 输入模式实验。</p><h2 id="一、高级定时器框图" tabindex="-1">一、高级定时器框图 <a class="header-anchor" href="#一、高级定时器框图" aria-label="Permalink to &quot;一、高级定时器框图&quot;">​</a></h2><p>高级定时器的框图和通用定时器框图很类似，只是添加了其它的一些功能，如：重复计数器、带死区控制的互补输出通道、断路输入等。这些功能在高级定时器框图的位置如下：</p><img src="'+o+'" alt="image-20240114124949607" style="zoom:50%;"><p>上图中，框出来三个部分，这是和通用定时器不同的地方，下面来分别学习它们。</p><h2 id="二、各部分说明" tabindex="-1">二、各部分说明 <a class="header-anchor" href="#二、各部分说明" aria-label="Permalink to &quot;二、各部分说明&quot;">​</a></h2><h3 id="_1-1-重复计数器" tabindex="-1">1. ① 重复计数器 <a class="header-anchor" href="#_1-1-重复计数器" aria-label="Permalink to &quot;1. ① 重复计数器&quot;">​</a></h3><p>在 F1 系列中，高级定时器 TIM1 和 TIM8 都有重复计数器。下面来介绍一下重复计数器有什么作用？在学习基本定时器和通用定时器的时候，我们知道定时器发生上溢或者下溢时，会直接生成更新事件。但是有重复计数器的定时器并不完全是这样的，定时器每次发生上溢或下溢时，重复计数器的值会减一，当重复计数器的值为 0 时，再发生一次上溢或者下溢才会生成定时器更新事件。如果我们设置重复计数器寄存器 RCR 的值为 N，那么更新事件将在定时器发生 N+1 次上溢或下溢时发生。</p><p>这里需要注意的是重复计数器寄存器是具有影子寄存器的，所以 RCR 寄存器只是起缓冲的作用。 RCR 寄存器的值会在更新事件发生时，被转移至其影子寄存器中，从而真正生效。重复计数器的特性，在控制生成 PWM 信号时很有用。</p><h3 id="_2-2-输出比较" tabindex="-1">2. ② 输出比较 <a class="header-anchor" href="#_2-2-输出比较" aria-label="Permalink to &quot;2. ② 输出比较&quot;">​</a></h3><p>高级定时器输出比较部分和通用定时器相比， 多了带死区控制的互补输出功能。 第②部分的 TIMx_CH1N、 TIMx_CH2N 和 TIMx_CH3N 分别是定时器通道 1、通道 2 和通道 3的互补输出通道，通道 4 是没有互补输出通道的。 DTG 是死区发生器，死区时间由 DTG[7:0]位来配置。 如果不使用互补通道和死区时间控制，那么高级定时器 TIM1 和 TIM8 和通用定时器的输出比较部分使用方法基本一样，只是要注意 MOE 位得置 1 定时器才能输出。</p><p>如果使用互补通道，那么就有一定的区别了，具体我们在高级定时器互补输出带死区控制实验再学习。</p><h3 id="_3-3-断路功能" tabindex="-1">3. ③ 断路功能 <a class="header-anchor" href="#_3-3-断路功能" aria-label="Permalink to &quot;3. ③ 断路功能&quot;">​</a></h3><p>断路功能也称刹车功能，一般用于电机控制的刹车。 F1 系列有一个断路通道，断路源可以是刹车输入引脚（TIMx_BKIN），也可以是一个时钟失败事件。时钟失败事件由复位时钟控制器中的时钟安全系统产生。 系统复位后， 断路功能默认被禁止， MOE 位为低。</p><p>使能断路功能的方法：将 TIMx_BDTR 的位 BKE 置 1。断路输入引脚 TIMx_BKIN 的输入有效电平可通过 TIMx_BDTR 寄存器的位 BKP 设置。</p><p>使能刹车功能后：由 TIMx_BDTR 的 MOE、 OSSI、 OSSR 位， TIMx_CR2 的 OISx、 OISxN位， TIMx_CCER 的 CCxE、 CCxNE 位控制 OCx 和 OCxN 输出状态。无论何时， OCx 和 OCxN输出都不能同时处在有效电平。</p><p>当发生断路输入后，会怎么样？</p><p>（1）MOE 位被异步地清零， OCx 和 OCxN 为无效、空闲或复位状态(由 OSSI 位选择)。</p><p>（2）OCx 和 OCxN 的状态：由相关控制位状态决定，当使用互补输出时：根据情况自动控制输出电平，参考《STM32F10xxx 参考手册_V10（中文版）.pdf》手册第 245 页的表 75 带刹车功能的互补通道 Ocx 和 OcxN 的控制位。</p><p>（3）BIF 位置 1，如果使能了 BIE 位，还会产生刹车中断；如果使能了 TDE 位，会产生 DMA请求。</p><p>（4）如果 AOE 位置 1，在下一个 更新事件 UEV 时， MOE 位被自动置 1。</p>',22)])])}const u=e(i,[["render",p]]);export{h as __pageData,u as default};
