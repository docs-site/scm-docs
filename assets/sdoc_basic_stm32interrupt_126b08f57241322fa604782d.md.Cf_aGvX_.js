import{_ as a,c as n,o as t,b0 as i}from"./chunks/framework.C5ev1SXp.js";const e="/scm-docs/assets/image-20230416215354255.VTDgcF0G.png",l="/scm-docs/assets/image-20230501112420821.DPlWT0DR.png",p="/scm-docs/assets/image-20230501115923168.DDDRBfXO.png",r="/scm-docs/assets/image-20230501104734276.CNMqPOo_.png",m=JSON.parse('{"title":"LV001-STM32中断简介","description":null,"frontmatter":{"title":"LV001-STM32中断简介","date":"2025-09-21T10:39:37.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/basic/stm32interrupt/126b08f57241322fa604782d","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-21T10:39:37.802Z","fulluuid":"fa604782d9e94117829d0f1a00c0d99d","useduuid":"fa604782d"}},"headers":[],"relativePath":"sdoc/basic/stm32interrupt/126b08f57241322fa604782d.md","filePath":"sdoc/10-基础篇/30-STM32的中断/LV001-STM32中断简介.md","lastUpdated":1758153691000}'),d={name:"sdoc/basic/stm32interrupt/126b08f57241322fa604782d.md"};function h(k,s,c,o,b,u){return t(),n("div",null,[...s[0]||(s[0]=[i('<h1 id="lv001-stm32中断简介" tabindex="-1">LV001-STM32中断简介 <a class="header-anchor" href="#lv001-stm32中断简介" aria-label="Permalink to &quot;LV001-STM32中断简介&quot;">​</a></h1><h2 id="一、基本概念" tabindex="-1">一、基本概念 <a class="header-anchor" href="#一、基本概念" aria-label="Permalink to &quot;一、基本概念&quot;">​</a></h2><p>生活中，有这样一个场景，我现在正在看电视剧，然后这个时候突然有人敲门，我该怎么做？正常我们应该是暂停电视剧，然后去开门，处理有人敲门这件事，这件事处理完后，回到电视机前，继续看电视剧，这就是一个中断。</p><p>在处理器中，中断是一个过程，即CPU在正常执行程序的过程中，遇到外部/内部的紧急事件需要处理，暂时中止当前程序的执行，转而去为处理紧急的事件，待处理完毕后再返回被打断的程序处继续往下执行。中断在计算机多任务处理，尤其是即时系统中尤为重要。比如uCOS，FreeRTOS等。</p><p>中断存在的意义就在于中断能提高CPU的效率，同时能对突发事件做出实时处理。实现程序的并行化，实现嵌入式系统进程之间的切换</p><h2 id="二、中断的处理过程" tabindex="-1">二、中断的处理过程 <a class="header-anchor" href="#二、中断的处理过程" aria-label="Permalink to &quot;二、中断的处理过程&quot;">​</a></h2><img src="'+e+'" alt="image-20230416215354255" style="zoom:50%;"><ul><li>进入中断</li></ul><p>（1）处理器自动保存现场到堆栈里；</p><p>（2）<code>{PC, xPSR, R0-R3, R12, LR}</code>；</p><p>（3）一旦入栈结束，ISR便可开始执行；</p><p>（4）晚到的中断会重新取ISR地址，但无需再次保存现场；</p><ul><li>退出中断</li></ul><p>（1）中断前的现场被自动从堆栈中恢复；</p><p>（2）一旦出栈完成，继续执行被中断打断的指令；</p><p>（3） 出栈的过程也可被打断，使得随时可以响应新的中断，而不再进行现场保存。</p><h2 id="三、stm32f1中断体系结构" tabindex="-1">三、STM32F1中断体系结构 <a class="header-anchor" href="#三、stm32f1中断体系结构" aria-label="Permalink to &quot;三、STM32F1中断体系结构&quot;">​</a></h2><img src="'+l+'" alt="image-20230501112420821" style="zoom:50%;"><h2 id="四、中断和优先级" tabindex="-1">四、中断和优先级 <a class="header-anchor" href="#四、中断和优先级" aria-label="Permalink to &quot;四、中断和优先级&quot;">​</a></h2><h3 id="_1-支持的中断" tabindex="-1">1. 支持的中断 <a class="header-anchor" href="#_1-支持的中断" aria-label="Permalink to &quot;1. 支持的中断&quot;">​</a></h3><p>从<a href="/scm-docs/sdoc/basic/overview/126b08e5d7b911b28ed9ee4c.html">10-基础篇/01-概述/LV040-CortexM3异常.md</a>我们知道Cortex-M3设计有256种中断，但大多数MCU都用不到这么多中断，比如STM32F103系列就只有70种异常和中断，其中前10个是系统异常， 后面60个是外部中断（我们可以查看<a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf" target="_blank" rel="noreferrer">STM32英文参考手册</a>的10.1.2 Interrupt and exception vectors）：</p><table tabindex="0"><thead><tr><th>中断号</th><th>名称</th><th>优先级</th><th>优先级类 型</th><th>说明</th></tr></thead><tbody><tr><td>-</td><td>N/A</td><td>N/A</td><td>保留</td><td></td></tr><tr><td>-</td><td>Reset</td><td>-3(最高)</td><td>固定</td><td>复位</td></tr><tr><td>-</td><td>NMI</td><td>-2</td><td>固定</td><td>RCC时钟安全系统（ CSS）连接到NMI向量，不可屏蔽 中断</td></tr><tr><td>-13</td><td>HardFault</td><td>-1</td><td>固定</td><td>所有类型的失效</td></tr><tr><td>-12</td><td>MemManageFault</td><td>0</td><td>可编程</td><td>存储器管理</td></tr><tr><td>-11</td><td>BusFault</td><td>1</td><td>可编程</td><td>预取指失败、存储器访问失败</td></tr><tr><td>-10</td><td>UsageFault</td><td>2</td><td>可编程</td><td>未定义的指令和非法状态</td></tr><tr><td>-</td><td>Reserved</td><td>N/A</td><td>N/A</td><td>保留</td></tr><tr><td>-5</td><td>SVCall</td><td>3</td><td>可编程</td><td>执行系统服务调用指令（ SVC）引发的异常</td></tr><tr><td>-4</td><td>Debug Monitor</td><td>4</td><td>可编程</td><td>调试监视器（断点、数据观察点或外部调试请求）</td></tr><tr><td>-</td><td>Reserved</td><td>N/A</td><td>N/A</td><td>N/A</td></tr><tr><td>-2</td><td>PendSV</td><td>5</td><td>可编程</td><td>为系统设备而设置的“可挂起请求”</td></tr><tr><td>-1</td><td>SysTick</td><td>6</td><td>可编程</td><td>系统滴答定时器</td></tr><tr><td>0</td><td>WWDG</td><td>7</td><td>可编程</td><td>窗口看门狗中断</td></tr><tr><td>1</td><td>PVD</td><td>8</td><td>可编程</td><td>连接EXTI的电源电压检测（ PVD）中断</td></tr><tr><td>…</td><td>…</td><td>…</td><td>可编程</td><td>…</td></tr><tr><td>58</td><td>DMA2_Channel3</td><td>65</td><td>可编程</td><td>DMA2通道3全局中断</td></tr><tr><td>59</td><td>DMA2_Channel4_5</td><td>66</td><td>可编程</td><td>DMA2通道4、 5全局中断</td></tr></tbody></table><h4 id="_4-2-中断和异常向量表" tabindex="-1">4.2 中断和异常向量表 <a class="header-anchor" href="#_4-2-中断和异常向量表" aria-label="Permalink to &quot;4.2 中断和异常向量表&quot;">​</a></h4><p>Cortex-M0内核可以处理15个内部异常，和19个外部中断。STM32F103实际上只使用了6个内部异常和19个外部中断。对于互联型产品，可以有20个。当异常或中断发生时，处理器会把PC设置为一个特定地址，这一地址就称为异常向量。每一类异常源都对应一个特定的入口地址，这些地址按照优先级排列以后就组成一张异常向量表。</p><img src="'+p+`" alt="image-20230501115923168" style="zoom:80%;"><p>当异常或中断发生时，处理器会把PC设置为一个特定地址，这一地址就称为异常向量。每一类异常源都对应一个特定的入口地址，这些地址按照优先级排列以后就组成一张异常向量表。</p><p>在 HAL 库工程中的 startup_stm32f103xe.s 启动文件中，定义了中断向量表：</p><div class="language-assembly vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">assembly</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>__Vectors       DCD     __initial_sp               ; Top of Stack</span></span>
<span class="line"><span>                DCD     Reset_Handler              ; Reset Handler</span></span>
<span class="line"><span>                DCD     NMI_Handler                ; NMI Handler</span></span>
<span class="line"><span>                DCD     HardFault_Handler          ; Hard Fault Handler</span></span>
<span class="line"><span>                DCD     MemManage_Handler          ; MPU Fault Handler</span></span>
<span class="line"><span>                DCD     BusFault_Handler           ; Bus Fault Handler</span></span>
<span class="line"><span>                DCD     UsageFault_Handler         ; Usage Fault Handler</span></span>
<span class="line"><span>                DCD     0                          ; Reserved</span></span>
<span class="line"><span>                DCD     0                          ; Reserved</span></span>
<span class="line"><span>                DCD     0                          ; Reserved</span></span>
<span class="line"><span>                DCD     0                          ; Reserved</span></span>
<span class="line"><span>                DCD     SVC_Handler                ; SVCall Handler</span></span>
<span class="line"><span>                DCD     DebugMon_Handler           ; Debug Monitor Handler</span></span>
<span class="line"><span>                DCD     0                          ; Reserved</span></span>
<span class="line"><span>                DCD     PendSV_Handler             ; PendSV Handler</span></span>
<span class="line"><span>                DCD     SysTick_Handler            ; SysTick Handler</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                ; External Interrupts</span></span>
<span class="line"><span>                DCD     WWDG_IRQHandler            ; Window Watchdog</span></span>
<span class="line"><span>                DCD     PVD_IRQHandler             ; PVD through EXTI Line detect</span></span>
<span class="line"><span>                DCD     TAMPER_IRQHandler          ; Tamper</span></span>
<span class="line"><span>                DCD     RTC_IRQHandler             ; RTC</span></span>
<span class="line"><span>                ; 中间部分省略</span></span>
<span class="line"><span>                DCD     DMA2_Channel4_5_IRQHandler ; DMA2 Channel4 &amp; Channel5</span></span>
<span class="line"><span>__Vectors_End</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>可以看到第2~6行，为10个系统异常，剩下的全为外部中断。 同时这里还定义了所有的中断处理函数名字， 当外设产生中断时，则跳到中断向量表中对应中断处理函数位置，比如发生RTC中断事件，则跳到第22行执行“ RTC_IRQHandler()”函数内容。STM32F103的异常和中断，基于Cortex-M3修改而来，前面的系统异常部分几乎没有变化，外部中断则对应不同的外设。</p><blockquote><p>向量化处理中断的好处</p><p>处理方式需要软件去完成，采用向量表处理异常，M0处理器会从存储器的向量表中，自动定位异常的程序入口。从发生异常到异常的处理中间的时间被缩减。</p></blockquote><blockquote><p>中断和异常的区别：</p><p>​ 中断是微处理器外部发送的，通过中断通道送入处理器内部，一般是硬件引起的，比如串口接收中断，而异常通常是微处理器内部发生的，大多是软件引起的，比如除法出错异常，特权调用异常等待。不管是中断还是异常，微处理器通常都有相应的中断/异常服务程序。</p></blockquote><h4 id="_4-3-优先级分组与设置" tabindex="-1">4.3 优先级分组与设置 <a class="header-anchor" href="#_4-3-优先级分组与设置" aria-label="Permalink to &quot;4.3 优先级分组与设置&quot;">​</a></h4><p>同样， STM32F103 也继承了 Cortex-M3 的中断优先级规则，因为中断少了很多， 中断优先级也用不了那么多， 只使用了 PRI_n 的 Bits[7:0] 中的 Bits[7:4] 设置优先级， 因此优先级分组为下表所示。</p><table tabindex="0"><thead><tr><th style="text-align:center;">PRIGROUP</th><th style="text-align:center;">抢占优先级位</th><th style="text-align:center;">子优先级位</th><th style="text-align:center;">抢占优先级级数</th><th style="text-align:center;">子优先级级数</th></tr></thead><tbody><tr><td style="text-align:center;">3</td><td style="text-align:center;">[7:4]</td><td style="text-align:center;">None</td><td style="text-align:center;">16</td><td style="text-align:center;">None</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">[7:5]</td><td style="text-align:center;">[4]</td><td style="text-align:center;">8</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">[7:6]</td><td style="text-align:center;">[5:4]</td><td style="text-align:center;">4</td><td style="text-align:center;">4</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">[7]</td><td style="text-align:center;">[6:4]</td><td style="text-align:center;">2</td><td style="text-align:center;">8</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">None</td><td style="text-align:center;">[7:4]</td><td style="text-align:center;">None</td><td style="text-align:center;">16</td></tr></tbody></table><p>可见STM32F103系列最多有16级可编程优先级， STM32F103不使用PRIGROUP来命名分组， 而采用 NVIC_PRIORITYGROUP_x 的方式命名，即NVIC_PRIORITYGROUP_0 对 应 PRIGROUP 为 7 ， 在“ stm32f1xx_hal_cortex.h ”有相关定义 ：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@defgroup</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> CORTEX_Exported_Constants CORTEX Exported Constants</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * @{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@defgroup</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> CORTEX_Preemption_Priority_Group CORTEX Preemption Priority Group</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * @{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NVIC_PRIORITYGROUP_0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000007</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">U</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*!&lt; 0 bits for pre-emption priority</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                                      4 bits for subpriority */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NVIC_PRIORITYGROUP_1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000006</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">U</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*!&lt; 1 bits for pre-emption priority</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                                      3 bits for subpriority */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NVIC_PRIORITYGROUP_2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000005</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">U</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*!&lt; 2 bits for pre-emption priority</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                                      2 bits for subpriority */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NVIC_PRIORITYGROUP_3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000004</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">U</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*!&lt; 3 bits for pre-emption priority</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                                      1 bits for subpriority */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NVIC_PRIORITYGROUP_4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000003</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">U</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*!&lt; 4 bits for pre-emption priority</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>通常中断优先级分组只会设置一次， 它针对的是系统中所有的中断。 后续设置某个中断的中断优先级时， 只需要在这个组规定的抢占优先级数和子优先级级数范围内分配优先级级数。 后续代码中，不应该再修改中断优先级分组，否则导致中断顺序不按预期触发。STM32CubeMX生成的工程，默认将设置中断优先级分组放在了“ HAL_Init()”里， 如下所示，调用“HAL_NVIC_SetPriorityGrouping()”函数设置中断优先级分组。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HAL_StatusTypeDef </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAL_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 中间部分省略</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* Set Interrupt Group Priority */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  HAL_NVIC_SetPriorityGrouping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NVIC_PRIORITYGROUP_4);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 中间部分省略</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAL_OK;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这里默认设置的优先级分组为 NVIC_PRIORITYGROUP_4 ， 则后续使用“ HAL_NVIC_SetPriority() ”函数设置优先级时，抢占优先级的范围是 0~15 ， 子优先级的值只能选择 0 。</p><p>“ HAL_NVIC_SetPriority() ”函数需要传入三个参数， 参数IRQn是中断号。后两个是抢占优先级级数和子优先级级数，注意结合中断分组设置范围。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HAL_NVIC_SetPriority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IRQn_Type </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">IRQn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> PreemptPriority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> SubPriority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prioritygroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">U</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* Check the parameters */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assert_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IS_NVIC_SUB_PRIORITY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SubPriority));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assert_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IS_NVIC_PREEMPTION_PRIORITY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PreemptPriority));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  prioritygroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NVIC_GetPriorityGrouping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  NVIC_SetPriority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IRQn, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NVIC_EncodePriority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prioritygroup, PreemptPriority, SubPriority));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>中断号我们可以查看[STM32英文参考手册](<a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf" target="_blank" rel="noreferrer">STM32F101xx, STM32F102xx, STM32F103xx, STM32F105xx and STM32F107xx advanced Arm®-based 32-bit MCUs - Reference manual</a>)的10.1.2 Interrupt and exception vectors一节中Table 61 - Table 63中的中断号：</p><img src="`+r+'" alt="image-20230501104734276" style="zoom:50%;"><h4 id="_4-4-优先级执行情况" tabindex="-1">4.4 优先级执行情况 <a class="header-anchor" href="#_4-4-优先级执行情况" aria-label="Permalink to &quot;4.4 优先级执行情况&quot;">​</a></h4><p>在设置好优先级之后，不同优先级的中断同时到来的时候，STM32是怎么执行的？</p><p>（1）假设中断A的抢占优先级比中断B的抢占优先级高，两个中断同时发生，那么中断A优先执行。</p><p>（2）假设中断A的抢占优先级和中断B的抢占优先级一样，两个中断同时发生，那么子优先级高的中断优先执行。</p><p>（3）假设中断A的抢占优先级比中断B的抢占优先级高，中断B先发生，随后A也发生，那么将暂停中断B，先执行中断A， A执行完后，再回来执行中断B，最后执行主程序，这种效果即中断嵌套。</p><p>（4）假设中断A的抢占优先级和中断B的抢占优先级一样，中断A的子优先级比中断B的子优先级高，中断B先发生，随后A也发生，那么中断A将等待中断B执行完后，才会执行中断A，即<strong>子优先级不能中断嵌套</strong>。</p><p>（5）假设中断A的抢占优先级和中断B的抢占优先级一样，且子优先级也一样，两个中断同时发生，那么根据<a href="https://www.st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf" target="_blank" rel="noreferrer">STM32英文参考手册</a>的10.1.2 Interrupt and exception vectors一节中Table 61 - Table 63中中断排布的顺序，排在前面的先执行。</p><p>总结中断是否会优先执行依据：<strong>首先是抢占先式优先级等级，其次是子优先级等级，只有抢占优先级才可能出现中断嵌套</strong>。</p>',51)])])}const y=a(d,[["render",h]]);export{m as __pageData,y as default};
