import{_ as a,c as t,o as s,b0 as o}from"./chunks/framework.C5ev1SXp.js";const i="/scm-docs/assets/image-20230419230755825.DXIXETol.png",l="/scm-docs/assets/image-20240113124546529.DENxukXe.png",r="/scm-docs/assets/image-20240113124802764._vXN6Iwx.png",m="/scm-docs/assets/image-20240113125006061.DcZKTWIm.png",n="/scm-docs/assets/image-20230419231334830.DIEuD5PN.png",c="/scm-docs/assets/image-20250916222112113.BnlOvQtt.png",u="/scm-docs/assets/image-20230419231808046.CrWVkvjP.png",b="/scm-docs/assets/image-20230419231948987.Drg8JRlP.png",d="/scm-docs/assets/image-20230419232108324.wM2FuW1f.png",p="/scm-docs/assets/image-20230521074440279.DG_xbeRJ.png",h="/scm-docs/assets/image-20230521074456274.zXoCkpu3.png",v=JSON.parse('{"title":"LV001-STM32CubeMX简介","description":null,"frontmatter":{"title":"LV001-STM32CubeMX简介","date":"2025-09-16T18:22:04.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/dev-tool/stm32cube/126b08aa58bc0838d250f7bd","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-16T18:22:04.131Z","fulluuid":"8d250f7bdb9d4b4fb822b135635cdf20","useduuid":"8d250f7bd"}},"headers":[],"relativePath":"sdoc/dev-tool/stm32cube/126b08aa58bc0838d250f7bd.md","filePath":"sdoc/01-开发工具/02-STM32Cube/LV001-STM32CubeMX简介.md","lastUpdated":1758108248000}'),M={name:"sdoc/dev-tool/stm32cube/126b08aa58bc0838d250f7bd.md"};function g(T,e,_,C,S,f){return s(),t("div",null,[...e[0]||(e[0]=[o('<h1 id="lv001-stm32cubemx简介" tabindex="-1">LV001-STM32CubeMX简介 <a class="header-anchor" href="#lv001-stm32cubemx简介" aria-label="Permalink to &quot;LV001-STM32CubeMX简介&quot;">​</a></h1><h2 id="一、stm32cubemx" tabindex="-1">一、STM32CubeMX <a class="header-anchor" href="#一、stm32cubemx" aria-label="Permalink to &quot;一、STM32CubeMX&quot;">​</a></h2><h3 id="_1-简介" tabindex="-1">1. 简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1. 简介&quot;">​</a></h3><img src="'+i+'" alt="image-20230419230755825" style="zoom:50%;"><p><a href="https://www.st.com.cn/zh/development-tools/stm32cubemx.html" target="_blank" rel="noreferrer">STM32CubeMX</a>是ST公司出品的一款C代码生成器软件，它是一种图形工具，通过分步过程可以非常轻松地配置STM32微控制器和微处理器，以及为Arm® Cortex®-M内核或面向Arm® Cortex®-A内核的特定Linux®设备树生成相应的初始化C代码。具有以下功能：</p><ul><li>直观的STM32微控制器和微处理器选择</li><li>丰富易用的图形用户界面，允许配置： <ul><li>支持自动冲突解决的引脚分配</li><li>支持面向Arm® Cortex®-M内核带参数约束动态验证的外设和中间件功能模式</li><li>支持动态验证时钟树配置</li><li>带功耗结果估算的功耗序列</li></ul></li><li>生成与面向Arm® Cortex®-M内核的IAR Embedded Workbench®、MDK-ARM和STM32CubeIDE（GCC编译器）兼容的初始化C代码</li><li>生成面向Arm® Cortex®-A内核（STM32微处理器）的部分Linux®设备树</li><li>借助STM32PackCreator开发增强型STM32Cube扩展包</li><li>将STM32Cube扩展包集成到项目中</li><li>作为可在Windows®、Linux®和macOS®（macOS®是苹果公司在美国和其他国家与地区的商标）操作系统和64位Java运行环境上运行的独立软件提供 and other countries.) operating systems and 64-bit Java Runtime environment</li></ul><p>相较于Keil创建工程模板， STM32CubeMX步骤少、上手快，但生成的工程模板比较臃肿。</p><h3 id="_2-stm32cubemx-和-stm32cube" tabindex="-1">2. STM32CubeMX 和 STM32Cube <a class="header-anchor" href="#_2-stm32cubemx-和-stm32cube" aria-label="Permalink to &quot;2.  STM32CubeMX 和 STM32Cube&quot;">​</a></h3><p>对于 STM32CubeMX 和 STM32Cube 的关系这里我们还需要特别说明一下， STM32Cube 包含 STM32CubeMX 图形工具和 STM32Cube 库两个部分，使用 STM32CubeMX 配置生成的代码，是基于 STM32Cube 库的。也就是说，我们使用 STM32CubeMX 配置出来的初始化代码，和STM32Cube 库兼容，例如硬件抽象层代码就是使用的 STM32 的 HAL 库。不同的 STM32 系列芯片，会有不同的 STM32Cube 库支持，而 STM32CubeMX 图形工具只有一种。所以我们配置不同的 STM32 系列芯片，选择不同的 STM32Cube 库即可。两者的关系如下图：</p><img src="'+l+'" alt="image-20240113124546529" style="zoom:50%;"><h3 id="_3-hal库" tabindex="-1">3. HAL库 <a class="header-anchor" href="#_3-hal库" aria-label="Permalink to &quot;3. HAL库&quot;">​</a></h3><p>STM32CubeMX生成的代码使用的并不是32单片机的标准库，而是使用的HAL库。HAL，是英文Hardware Abstraction Layer的缩写，翻译是硬件抽象层。</p><p>它是内核与芯片内硬件设备的关联层，我们可以容易地在硬件抽象层中编程来操作内核，硬件抽象层的易于移植性也让在不同内核下的编程不再复杂。其实在很多嵌入式平台开发中都诞生了自己的HAL，比如，安卓和微软的内核都有它们自己的HAL，意法半导体也不能落后，它拥有如此多种类的芯片，也有很多的市场份额，为了提高自己在市场中的话语权，牢牢抓住使用ST芯片的老用户，它也开发出了属于自己的HAL库。</p><p>首先是多点开发的花样，让开发更容易上手，更加专业，吸引更多新用户；其次也是为了提高库的可移植性，代替标准库。比起标准库，CubeMX使用的HAL库集成度会更加高，很多原本在标准库中要自己手动配置，组合的代码，在HAL库中可能就直接是封装好的函数，非常方便。但同时这样也带来了一些弊端，首先因为要考虑移植性和代码稳定性，HAL库中封装的函数不避免的有很多判断，这样的确影响了代码的效率，但是这仅局限于高速场合，一般情况下，使用HAL库和使用标准库的代码速度差别可以忽略不计。</p><h2 id="二、安装stm32cubemx" tabindex="-1">二、安装STM32CubeMX <a class="header-anchor" href="#二、安装stm32cubemx" aria-label="Permalink to &quot;二、安装STM32CubeMX&quot;">​</a></h2><p>下边两个软件安装的话一直下一步就是了，没什么难度，需要注意的是安装目录最好不要有中文路径。</p><h3 id="_1-java运行环境" tabindex="-1">1. Java运行环境 <a class="header-anchor" href="#_1-java运行环境" aria-label="Permalink to &quot;1. Java运行环境&quot;">​</a></h3><p>STM32CubeMX 这个软件本身就是用 Java 语言编写的，而 JRE 是运行所有 Java 程序的“发动机”和“基础环境”。所以要想运行还需要安装Java运行环境。下载地址：<a href="https://www.java.com/zh-CN/download/" target="_blank" rel="noreferrer">Download Java for Windows</a>（尽量安装最新版 64 位的Java）</p><img src="'+r+'" alt="image-20240113124802764" style="zoom:67%;"><p>安装完 Java 运行环境之后，为了检测是否正常安装，我们可以打开 Windows 的命令输入框，输入：<code> java -version</code> 命令，如果显示 Java 版本信息，则安装成功。提示信息如下图：</p><img src="'+m+'" alt="image-20240113125006061" style="zoom:90%;"><blockquote><p>Tips：但是我没安装，好像也能直接安装和运行STM32CubeMX，后面要是有什么问题的话可以注意下这里，安装上试一下。</p></blockquote><h3 id="_2-stm32cubemx" tabindex="-1">2. STM32CubeMX <a class="header-anchor" href="#_2-stm32cubemx" aria-label="Permalink to &quot;2. STM32CubeMX&quot;">​</a></h3><p>文档地址：<a href="https://www.st.com/en/development-tools/stm32cubemx.html" target="_blank" rel="noreferrer">STM32CubeMX - STM32Cube initialization code generator - STMicroelectronics</a></p><p>下载地址：<a href="https://www.st.com/en/development-tools/stm32cubemx.html#get-software" target="_blank" rel="noreferrer">STM32CubeMX - STM32Cube initialization code generator - STMicroelectronics</a></p><img src="'+n+'" alt="image-20230419231334830" style="zoom:45%;"><p>解压后直接双击安装即可，我是默认路径安装：</p><img src="'+c+'" alt="image-20250916222112113" style="zoom:67%;"><h2 id="三、基本使用" tabindex="-1">三、基本使用 <a class="header-anchor" href="#三、基本使用" aria-label="Permalink to &quot;三、基本使用&quot;">​</a></h2><h3 id="_1-加载软件包" tabindex="-1">1. 加载软件包 <a class="header-anchor" href="#_1-加载软件包" aria-label="Permalink to &quot;1. 加载软件包&quot;">​</a></h3><p>【Help】→【Manage embedded software packages】</p><img src="'+u+'" alt="image-20230419231808046" style="zoom:33%;"><p>然后我们便会打开如下弹窗，然后我们按照图中提示安装相关的包即可：</p><img src="'+b+'" alt="image-20230419231948987" style="zoom:45%;"><p>若是安装完毕，并且安装成功，前边会变成如下的小绿色方框：</p><img src="'+d+'" alt="image-20230419232108324" style="zoom:45%;"><p>其实也可以离线下载支持包，然后离线加载，这里暂时还未尝试，后边需要的话再补充。</p><h3 id="_2-库安装在哪" tabindex="-1">2. 库安装在哪？ <a class="header-anchor" href="#_2-库安装在哪" aria-label="Permalink to &quot;2. 库安装在哪？&quot;">​</a></h3><p>STM32CubeMX使用的是HAL库，都安装在哪里？一般是在如下路径</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\Users\\用户名\\STM32Cube\\Repository</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><img src="'+p+'" alt="image-20230521074440279" style="zoom:67%;"><p>压缩包也存在于这里：</p><img src="'+h+'" alt="image-20230521074456274" style="zoom:60%;">',43)])])}const k=a(M,[["render",g]]);export{v as __pageData,k as default};
