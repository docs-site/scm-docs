import{_ as a,c as i,o as n,b0 as l}from"./chunks/framework.C5ev1SXp.js";const e="/scm-docs/assets/image-20230513193914903.Iq90zEds.png",p="/scm-docs/assets/image-20230513194753810.C50FX1hQ.png",h="/scm-docs/assets/image-20230513195945132.Cz533SLv.png",t="/scm-docs/assets/image-20230513205800870.CZ5hA3O5.png",k="/scm-docs/assets/image-20230513200632344.Dprc7yji.png",u=JSON.parse('{"title":"LV010-看门狗使用实例","description":null,"frontmatter":{"title":"LV010-看门狗使用实例","date":"2025-09-22T07:31:29.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/peripheral/watchdog/126b09043c29000296442c6e","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-22T07:31:29.000Z","fulluuid":"296442c6e9ba4600b39cd12075ea87af","useduuid":"296442c6e"}},"headers":[],"relativePath":"sdoc/peripheral/watchdog/126b09043c29000296442c6e.md","filePath":"sdoc/20-基本外设篇/20-看门狗/LV010-看门狗使用实例.md","lastUpdated":1758153691000}'),r={name:"sdoc/peripheral/watchdog/126b09043c29000296442c6e.md"};function E(d,s,c,g,b,o){return n(),i("div",null,[...s[0]||(s[0]=[l('<h1 id="lv010-看门狗使用实例" tabindex="-1">LV010-看门狗使用实例 <a class="header-anchor" href="#lv010-看门狗使用实例" aria-label="Permalink to &quot;LV010-看门狗使用实例&quot;">​</a></h1><h2 id="一、独立看门狗" tabindex="-1">一、独立看门狗 <a class="header-anchor" href="#一、独立看门狗" aria-label="Permalink to &quot;一、独立看门狗&quot;">​</a></h2><h3 id="_1-硬件设计" tabindex="-1">1. 硬件设计 <a class="header-anchor" href="#_1-硬件设计" aria-label="Permalink to &quot;1. 硬件设计&quot;">​</a></h3><p>独立看门狗属于 STM32F1 的内部资源，只需要软件设置好即可正常工作。我们通过LED灯来指示 STM32F1 的复位情况来看指示独立看门狗的喂狗情况。</p><h3 id="_2-stm32cubemx配置" tabindex="-1">2. STM32CubeMX配置 <a class="header-anchor" href="#_2-stm32cubemx配置" aria-label="Permalink to &quot;2. STM32CubeMX配置&quot;">​</a></h3><h4 id="_2-1-iwdg配置" tabindex="-1">2.1 IWDG配置 <a class="header-anchor" href="#_2-1-iwdg配置" aria-label="Permalink to &quot;2.1 IWDG配置&quot;">​</a></h4><img src="'+e+'" alt="image-20230513193914903" style="zoom:80%;"><p>独立看门狗的配置时间比较简单：</p><p>①、选择IWDG；</p><p>②、勾选Activated，表示启用独立看门狗；</p><p>③、看门狗的时钟分频，时钟源为40KHz，这里选择64分频；</p><p>④、重载寄存器初始值，这里设置为500。</p><p>根据前边计算溢出时间的公式，可以知道这样配置的话，溢出时间为Tout = prv/40 * rlr (s)， prv 可以是 [4，8，16，32，64，128，256]。如果我们需要设置 1s 的超时溢出， prv 可以取 IWDG_ PRESCALER _64， rlr 取 625，这时 Tout=64/40*625=1s。</p><h4 id="_2-2-时钟树" tabindex="-1">2.2 时钟树 <a class="header-anchor" href="#_2-2-时钟树" aria-label="Permalink to &quot;2.2 时钟树&quot;">​</a></h4><img src="'+p+`" alt="image-20230513194753810" style="zoom:50%;"><h3 id="_3-看门狗实现" tabindex="-1">3. 看门狗实现 <a class="header-anchor" href="#_3-看门狗实现" aria-label="Permalink to &quot;3. 看门狗实现&quot;">​</a></h3><h4 id="_3-1-初始化看门狗" tabindex="-1">3.1 初始化看门狗 <a class="header-anchor" href="#_3-1-初始化看门狗" aria-label="Permalink to &quot;3.1 初始化看门狗&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MX_IWDG_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hiwdg.Instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IWDG;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hiwdg.Init.Prescaler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IWDG_PRESCALER_64;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hiwdg.Init.Reload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 625</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAL_IWDG_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hiwdg) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAL_OK)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Error_Handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_3-2-喂狗" tabindex="-1">3.2 喂狗 <a class="header-anchor" href="#_3-2-喂狗" aria-label="Permalink to &quot;3.2 喂狗&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HAL_StatusTypeDef </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAL_IWDG_Refresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IWDG_HandleTypeDef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hiwdg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* Reload IWDG counter with value defined in the reload register */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  __HAL_IWDG_RELOAD_COUNTER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hiwdg);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* Return function status */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAL_OK;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_3-3-测试函数" tabindex="-1">3.3 测试函数 <a class="header-anchor" href="#_3-3-测试函数" aria-label="Permalink to &quot;3.3 测试函数&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IWDG_Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	LED1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // LED亮</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HAL_Delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 延时 100ms 再初始化看门狗,LED1 的变化&quot;可见&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MX_IWDG_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 初始化看门狗</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LED1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 关闭LED1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KEY_Scan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WKUP_PRES)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //如果 WK_UP 按下，喂狗</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        	HAL_IWDG_Refresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hiwdg);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //喂狗</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        delay_ms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_3-4-测试现象" tabindex="-1">3.4 测试现象 <a class="header-anchor" href="#_3-4-测试现象" aria-label="Permalink to &quot;3.4 测试现象&quot;">​</a></h4><p>在编译成功之后，下载代码， 可以看到 LED1 不停的闪烁，证明程序在不停的复位，否则只会 LED1 常亮。这时我们不停的按 KEY_UP 按键，可以看到 LED1 就常亮了，不会再闪烁。</p><h2 id="二、窗口看门狗" tabindex="-1">二、窗口看门狗 <a class="header-anchor" href="#二、窗口看门狗" aria-label="Permalink to &quot;二、窗口看门狗&quot;">​</a></h2><h3 id="_1-硬件设计-1" tabindex="-1">1. 硬件设计 <a class="header-anchor" href="#_1-硬件设计-1" aria-label="Permalink to &quot;1. 硬件设计&quot;">​</a></h3><p>窗口看门狗属于 STM32F1 的内部资源，只需要软件设置好即可正常工作。我们通过LED灯来指示 STM32F1 的复位情况和窗口看门狗的喂狗情况。</p><h3 id="_2-stm32cubemx配置-1" tabindex="-1">2. STM32CubeMX配置 <a class="header-anchor" href="#_2-stm32cubemx配置-1" aria-label="Permalink to &quot;2. STM32CubeMX配置&quot;">​</a></h3><h4 id="_2-1-wwdg配置" tabindex="-1">2.1 WWDG配置 <a class="header-anchor" href="#_2-1-wwdg配置" aria-label="Permalink to &quot;2.1 WWDG配置&quot;">​</a></h4><img src="`+h+'" alt="image-20230513195945132" style="zoom:50%;"><p>①、选择WWDG配置；</p><p>②、选择Activated，表示启用窗口看门狗；</p><p>③、窗口看门狗的分频数，这里选择为8；</p><p>④、设置窗口上边界值，范围:0x40~0x7F，换算成十进制就是44~127；</p><p>⑤、设置计数器的值，范围:0x40~0x7F，换算成十进制就是44~127，计数器会从这个值网下递减；</p><p>⑥、使能唤醒中断。</p><h4 id="_2-2-nvic中断配置" tabindex="-1">2.2 NVIC中断配置 <a class="header-anchor" href="#_2-2-nvic中断配置" aria-label="Permalink to &quot;2.2 NVIC中断配置&quot;">​</a></h4><img src="'+t+'" alt="image-20230513205800870" style="zoom:50%;"><p>注意，这里不要把看门狗的中断优先级设置的太高，不然系统无法运行。</p><h4 id="_2-3-时钟树" tabindex="-1">2.3 时钟树 <a class="header-anchor" href="#_2-3-时钟树" aria-label="Permalink to &quot;2.3 时钟树&quot;">​</a></h4><img src="'+k+`" alt="image-20230513200632344" style="zoom:50%;"><h3 id="_3-看门狗实现-1" tabindex="-1">3. 看门狗实现 <a class="header-anchor" href="#_3-看门狗实现-1" aria-label="Permalink to &quot;3. 看门狗实现&quot;">​</a></h3><h4 id="_3-1-初始化看门狗-1" tabindex="-1">3.1 初始化看门狗 <a class="header-anchor" href="#_3-1-初始化看门狗-1" aria-label="Permalink to &quot;3.1 初始化看门狗&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MX_WWDG_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hwwdg.Instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WWDG;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hwwdg.Init.Prescaler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WWDG_PRESCALER_8;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hwwdg.Init.Window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hwwdg.Init.Counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hwwdg.Init.EWIMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WWDG_EWI_ENABLE;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAL_WWDG_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hwwdg) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAL_OK)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Error_Handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_3-2-配置底层及中断" tabindex="-1">3.2 配置底层及中断 <a class="header-anchor" href="#_3-2-配置底层及中断" aria-label="Permalink to &quot;3.2 配置底层及中断&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HAL_WWDG_MspInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WWDG_HandleTypeDef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> wwdgHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wwdgHandle-&gt;Instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WWDG)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __HAL_RCC_WWDG_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HAL_NVIC_SetPriority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WWDG_IRQn, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HAL_NVIC_EnableIRQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WWDG_IRQn);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_3-3-中断服务函数" tabindex="-1">3.3 中断服务函数 <a class="header-anchor" href="#_3-3-中断服务函数" aria-label="Permalink to &quot;3.3 中断服务函数&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WWDG_IRQHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  HAL_WWDG_IRQHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hwwdg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_3-4-回调函数" tabindex="-1">3.4 回调函数 <a class="header-anchor" href="#_3-4-回调函数" aria-label="Permalink to &quot;3.4 回调函数&quot;">​</a></h4><p>这个是需要重写的，此函数会被 HAL_WWDG_IRQHandler()调用</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HAL_WWDG_EarlyWakeupCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WWDG_HandleTypeDef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> hwwdg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HAL_WWDG_Refresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hwwdg);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//更新窗口看门狗值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LED1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LED1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_3-5-测试函数" tabindex="-1">3.5 测试函数 <a class="header-anchor" href="#_3-5-测试函数" aria-label="Permalink to &quot;3.5 测试函数&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其他的部分省略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	LED1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //点亮 LED</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	HAL_Delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 延时 300ms 再初始化看门狗,LED 的变化&quot;可见&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	MX_WWDG_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        LED1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_3-6-测试现象" tabindex="-1">3.6 测试现象 <a class="header-anchor" href="#_3-6-测试现象" aria-label="Permalink to &quot;3.6 测试现象&quot;">​</a></h4><p>当产生窗口看门狗中断的时候，会反转LED的电平，我们在while(1)中将LED持续性关闭，所以当进入看门狗中断的时候，LED被点亮，这样我们就会看到LED不断地闪烁，设就说明我们进入了看门狗的中断。</p>`,55)])])}const m=a(r,[["render",E]]);export{u as __pageData,m as default};
