import{_ as a,c as i,o as t,b0 as e}from"./chunks/framework.C5ev1SXp.js";const n="/scm-docs/assets/image-20230507162113905.CrE51Frt.png",l="/scm-docs/assets/image-20230507163950643.Bs5pgyE6.png",p="/scm-docs/assets/image-20230507163558609.DAUmmQdW.png",h="/scm-docs/assets/image-20230507211722423.Bq6hO8jx.png",r="/scm-docs/assets/image-20230507164540173.dr9-Ik4a.png",k="/scm-docs/assets/image-20230507164525551.Nbgvi3QT.png",d="/scm-docs/assets/image-20230507164511621.DuQijSJ9.png",c="/scm-docs/assets/image-20230507164438277.K3pjMove.png",o="/scm-docs/assets/image-20230507164417711.DgY7ewL8.png",S="/scm-docs/assets/image-20230507164353928.-A3S7Pfe.png",b=JSON.parse('{"title":"LV001-STM32的SPI","description":null,"frontmatter":{"title":"LV001-STM32的SPI","date":"2025-09-27T10:11:02.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/peripheral/spi/126b0950f4ae14889c830ae3","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-27T10:11:02.328Z","fulluuid":"89c830ae3a594952be17b5abc6bbb737","useduuid":"89c830ae3"}},"headers":[],"relativePath":"sdoc/peripheral/spi/126b0950f4ae14889c830ae3.md","filePath":"sdoc/20-基本外设篇/35-SPI/LV001-STM32的SPI.md","lastUpdated":1758811394000}'),g={name:"sdoc/peripheral/spi/126b0950f4ae14889c830ae3.md"};function P(E,s,_,I,m,y){return t(),i("div",null,[...s[0]||(s[0]=[e('<h1 id="lv001-stm32的spi" tabindex="-1">LV001-STM32的SPI <a class="header-anchor" href="#lv001-stm32的spi" aria-label="Permalink to &quot;LV001-STM32的SPI&quot;">​</a></h1><h2 id="一、spi简介" tabindex="-1">一、SPI简介 <a class="header-anchor" href="#一、spi简介" aria-label="Permalink to &quot;一、SPI简介&quot;">​</a></h2><p>这一部分可以查看笔记《<a href="/scm-docs/sdoc/communication/spi/126b0950dceb1d850b1e36d8.html">60-通信专题/30-SPI/LV001-SPI简介.md</a>》。</p><h2 id="二、stm32的spi外设" tabindex="-1">二、STM32的SPI外设 <a class="header-anchor" href="#二、stm32的spi外设" aria-label="Permalink to &quot;二、STM32的SPI外设&quot;">​</a></h2><h3 id="_1-简介" tabindex="-1">1. 简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1. 简介&quot;">​</a></h3><p>STM32 的 SPI 外设可用作通讯的主机及从机，支持最高的 SCK 时钟频率为 fpclk/2 (STM32F103 型号的芯片默认 f:sub:pclk1 为 36MHz， fpclk2 为72MHz)，完全支持 SPI 协议的 4 种模式，数据帧长度可设置为 8 位或 16 位，<strong>可设置数据 MSB 先行或 LSB 先行</strong>。它还支持双线全双工、双线单向以及单线模式。其中双线单向模式可以同时使用 MOSI 及 MISO 数据线向一个方向传输数据，可以加快一倍的传输速度。而单线模式则可以减少硬件接线，当然这样速率会受到影响。我们这里只学习双线全双工模式。</p><h3 id="_2-框图" tabindex="-1">2. 框图 <a class="header-anchor" href="#_2-框图" aria-label="Permalink to &quot;2. 框图&quot;">​</a></h3><p>关于STM32的SPI外设的框图，我们可以看 <a href="https://www.stmcu.com.cn/Designresource/detail/localization_document%20/710001" target="_blank" rel="noreferrer">STM32中文参考手册</a>的23.3 SPI功能描述一节：</p><img src="'+n+'" alt="image-20230507162113905" style="zoom:50%;"><h4 id="_2-1-1通讯引脚" tabindex="-1">2.1 ①通讯引脚 <a class="header-anchor" href="#_2-1-1通讯引脚" aria-label="Permalink to &quot;2.1 ①通讯引脚&quot;">​</a></h4><p>SPI 的所有硬件架构都从图 24‑5 中左侧 MOSI、 MISO、 SCK 及 NSS 线展开的。 STM32 芯片有多个 SPI 外设，它们的 SPI 通讯信号引出到不同的 GPIO 引脚上，使用时必须配置到这些指定的引脚，见下表。关于 GPIO 引脚的复用功能，还是要查看STM32参考手册。</p><table tabindex="0"><thead><tr><th>引脚</th><th>SPI1</th><th>SPI2</th><th>SPI3</th></tr></thead><tbody><tr><td>NSS</td><td>PA4</td><td>PB12</td><td>PA15 下载口的 TDI</td></tr><tr><td>CLK</td><td>PA5</td><td>PB13</td><td>PB3 下载口的 TDO</td></tr><tr><td>MISO</td><td>PA6</td><td>PB14</td><td>PB4 下载口的 NTRST</td></tr><tr><td>MOSI</td><td>PA7</td><td>PB15</td><td>PB5</td></tr></tbody></table><p>其中 SPI1 是 APB2 上的设备，最高通信速率达 36Mbtis/s， SPI2、 SPI3 是 APB1 上的设备，最高通信速率为 18Mbits/s。除了通讯速率，在其它功能上没有差异。其中 SPI3 用到了下载接口的引脚，这几个引脚默认功能是下载，第二功能才是 IO 口，如果想使用 SPI3 接口，则程序上必须先禁用掉这几个 IO 口的下载功能。一般在资源不是十分紧张的情况下，这几个 IO 口是专门用于下载和调试程序，不会复用为 SPI3。 当用到SPI3的时候，需要注意我们下载的时候要按着reset复位按键，然后再下载，当芯片处于复位状态时，才能正常下载。</p><p>实际应用中，我们一般不使用 STM32 SPI 外设的标准 NSS 信号线，而是更简单地使用普通的GPIO，软件控制它的电平输出，从而产生通讯起始和停止信号。NSS引脚通过配置寄存器，配置成通过软件来控制的形式，这样只要在需要启动SPI的时候将NSS拉低就可以了，不一定非要接在PA4。</p><p>对于GPIO的复用模式，我们可以看<a href="https://www.stmcu.com.cn/Designresource/detail/localization_document%20/710001" target="_blank" rel="noreferrer">STM32中文参考手册</a>8.11小节：</p><img src="'+l+'" alt="image-20230507163950643" style="zoom:50%;"><h4 id="_2-2-2时钟控制逻辑" tabindex="-1">2.2 ②时钟控制逻辑 <a class="header-anchor" href="#_2-2-2时钟控制逻辑" aria-label="Permalink to &quot;2.2 ②时钟控制逻辑&quot;">​</a></h4><p>SCK 线的时钟信号，由波特率发生器根据“控制寄存器 CR1”中的 BR[0:2] 位控制，该位是对 fpclk时钟的分频因子，对 fpclk 的分频结果就是 SCK 引脚的输出时钟频率，计算方法见下表。</p><table tabindex="0"><thead><tr><th style="text-align:center;">BR[0:2]</th><th style="text-align:center;">分频结果 (SCK 频率)</th><th style="text-align:center;">BR[0:2]</th><th style="text-align:center;">分频结果 (SCK 频率)</th></tr></thead><tbody><tr><td style="text-align:center;">000</td><td style="text-align:center;">fpclk/2</td><td style="text-align:center;">100</td><td style="text-align:center;">fpclk/32</td></tr><tr><td style="text-align:center;">001</td><td style="text-align:center;">fpclk/4</td><td style="text-align:center;">101</td><td style="text-align:center;">fpclk/64</td></tr><tr><td style="text-align:center;">010</td><td style="text-align:center;">fpclk/8</td><td style="text-align:center;">110</td><td style="text-align:center;">fpclk/128</td></tr><tr><td style="text-align:center;">011</td><td style="text-align:center;">fpclk/16</td><td style="text-align:center;">111</td><td style="text-align:center;">fpclk/256</td></tr></tbody></table><p>其中的 fpclk 频率是指 SPI 所在的 APB 总线频率， APB1 为 fpclk1， APB2 为 fpckl2。通过配置“控制寄存器 CR”的“CPOL 位”及“CPHA”位可以把 SPI 设置成 4 种 SPI模式中的一种。</p><h4 id="_2-3-3数据控制逻辑" tabindex="-1">2.3 ③数据控制逻辑 <a class="header-anchor" href="#_2-3-3数据控制逻辑" aria-label="Permalink to &quot;2.3 ③数据控制逻辑&quot;">​</a></h4><p>SPI 的 MOSI 及 MISO 都连接到数据移位寄存器上，数据移位寄存器的数据来源及目标接收、发送缓冲区以及 MISO、 MOSI 线。当向外发送数据的时候，数据移位寄存器以“发送缓冲区”为数据源，把数据一位一位地通过数据线发送出去；当从外部接收数据的时候，数据移位寄存器把数据线采样到的数据一位一位地存储到“接收缓冲区”中。通过写 SPI 的“数据寄存器 DR”把数据填充到发送缓冲区中，通讯读“数据寄存器 DR”，可以获取接收缓冲区中的内容。其中数据帧长度可以通过“控制寄存器 CR1”的“DFF 位”配置成 8 位及 16 位模式；配置“LSBFIRST 位”可选择 MSB 先行还是 LSB 先行。</p><h4 id="_2-4-4整体控制逻辑" tabindex="-1">2.4 ④整体控制逻辑 <a class="header-anchor" href="#_2-4-4整体控制逻辑" aria-label="Permalink to &quot;2.4 ④整体控制逻辑&quot;">​</a></h4><p>整体控制逻辑负责协调整个 SPI 外设，控制逻辑的工作模式根据我们配置的“控制寄存器(CR1/CR2)”的参数而改变，基本的控制参数包括前面提到的 SPI 模式、波特率、 LSB 先行、主从模式、单双向模式等等。在外设工作时，控制逻辑会根据外设的工作状态修改“状态寄存器(SR)”，我们只要读取状态寄存器相关的寄存器位，就可以了解 SPI 的工作状态了。除此之外，控制逻辑还根据要求，负责控制产生 SPI 中断信号、 DMA 请求及控制 NSS 信号线。</p><h3 id="_3-通讯过程" tabindex="-1">3. 通讯过程 <a class="header-anchor" href="#_3-通讯过程" aria-label="Permalink to &quot;3. 通讯过程&quot;">​</a></h3><p>STM32 使用 SPI 外设通讯时，在通讯的不同阶段它会对“状态寄存器 SR”的不同数据位写入参数，我们通过读取这些寄存器标志来了解通讯状态。 我们可以查看 <a href="https://www.stmcu.com.cn/Designresource/detail/localization_document%20/710001" target="_blank" rel="noreferrer">STM32中文参考手册</a>的 23.3.5 数据发送与接收过程部分。</p><img src="'+p+'" alt="image-20230507163558609" style="zoom:50%;"><p>主模式收发流程及事件说明如下：</p><p>（1）控制 NSS 信号线，产生起始信号 (图中没有画出)；</p><p>（2）把要发送的数据写入到“数据寄存器 DR”中，该数据会被存储到发送缓冲区；</p><p>（3）通讯开始， SCK 时钟开始运行。 MOSI 把发送缓冲区中的数据一位一位地传输出去； MISO则把数据一位一位地存储进接收缓冲区中；</p><p>（4）当发送完一帧数据的时候，“状态寄存器 SR”中的“TXE 标志位”会被置 1，表示传输完一帧，发送缓冲区已空；类似地，当接收完一帧数据的时候，“RXNE 标志位”会被置 1，表示传输完一帧，接收缓冲区非空；</p><p>（5）等待到“TXE 标志位”为 1 时，若还要继续发送数据，则再次往“数据寄存器 DR”写入数据即可；等待到“RXNE 标志位”为 1 时，通过读取“数据寄存器 DR”可以获取接收缓冲区中的内容。</p><p>假如我们使能了 TXE 或 RXNE 中断， TXE 或 RXNE 置 1 时会产生 SPI 中断信号，进入同一个中断服务函数，到 SPI 中断服务程序后，可通过检查寄存器位来了解是哪一个事件，再分别进行处理。也可以使用 DMA 方式来收发“数据寄存器 DR”中的数据。</p><p><strong>【注意】</strong>：发送和接收是同时进行的，当我们只想接收数据的时候也还是需要向发送缓冲区写数据，这样才能触发SPI产生时钟驱动数据的传输，当然我们写入的数据可以是任意的，只要有数据写进去就可以。</p><h3 id="_4-spi在那个总线" tabindex="-1">4. SPI在那个总线？ <a class="header-anchor" href="#_4-spi在那个总线" aria-label="Permalink to &quot;4. SPI在那个总线？&quot;">​</a></h3><p>这个我们可以看一下系统框图：</p><img src="'+h+'" alt="image-20230507211722423" style="zoom:50%;"><p>会发现，这里SPI1挂载在APB1总线，最高时钟就是36MHz，剩下两个挂载在APB2总线，最高时钟源为72MHz，根据这些信息来控制SPI的时钟。</p><h2 id="三、相关寄存器" tabindex="-1">三、相关寄存器 <a class="header-anchor" href="#三、相关寄存器" aria-label="Permalink to &quot;三、相关寄存器&quot;">​</a></h2><p>这一部分我们可以查看 <a href="https://www.stmcu.com.cn/Designresource/detail/localization_document%20/710001" target="_blank" rel="noreferrer">STM32中文参考手册</a>的23.5 SPI和I2S寄存器描述。我们可以用半字(16位)或字(32位)的方式操作这些外设寄存器。</p><h3 id="_1-控制寄存器-1-spi-cr1" tabindex="-1">1. 控制寄存器 1(SPI_CR1) <a class="header-anchor" href="#_1-控制寄存器-1-spi-cr1" aria-label="Permalink to &quot;1. 控制寄存器 1(SPI_CR1)&quot;">​</a></h3><img src="'+r+'" alt="image-20230507164540173" style="zoom:50%;"><h3 id="_2-控制寄存器-2-spi-cr2" tabindex="-1">2. 控制寄存器 2(SPI_CR2) <a class="header-anchor" href="#_2-控制寄存器-2-spi-cr2" aria-label="Permalink to &quot;2. 控制寄存器 2(SPI_CR2)&quot;">​</a></h3><img src="'+k+'" alt="image-20230507164525551" style="zoom:50%;"><h3 id="_3-状态寄存器-spi-sr" tabindex="-1">3. 状态寄存器(SPI_SR) <a class="header-anchor" href="#_3-状态寄存器-spi-sr" aria-label="Permalink to &quot;3. 状态寄存器(SPI_SR)&quot;">​</a></h3><img src="'+d+'" alt="image-20230507164511621" style="zoom:50%;"><h3 id="_4-数据寄存器-spi-dr" tabindex="-1">4. 数据寄存器(SPI_DR) <a class="header-anchor" href="#_4-数据寄存器-spi-dr" aria-label="Permalink to &quot;4. 数据寄存器(SPI_DR)&quot;">​</a></h3><img src="'+c+'" alt="image-20230507164438277" style="zoom:50%;"><h3 id="_5-配置寄存器-spi-i2s-cfgr" tabindex="-1">5. 配置寄存器(SPI_I2S_CFGR) <a class="header-anchor" href="#_5-配置寄存器-spi-i2s-cfgr" aria-label="Permalink to &quot;5. 配置寄存器(SPI_I2S_CFGR)&quot;">​</a></h3><img src="'+o+'" alt="image-20230507164417711" style="zoom:50%;"><h3 id="_6-预分频寄存器-spi-i2spr" tabindex="-1">6. 预分频寄存器(SPI_I2SPR) <a class="header-anchor" href="#_6-预分频寄存器-spi-i2spr" aria-label="Permalink to &quot;6. 预分频寄存器(SPI_I2SPR)&quot;">​</a></h3><img src="'+S+`" alt="image-20230507164353928" style="zoom:50%;"><h2 id="四、hal库函数" tabindex="-1">四、HAL库函数 <a class="header-anchor" href="#四、hal库函数" aria-label="Permalink to &quot;四、HAL库函数&quot;">​</a></h2><h3 id="_1-spi-inittypedef" tabindex="-1">1. SPI_InitTypeDef <a class="header-anchor" href="#_1-spi-inittypedef" aria-label="Permalink to &quot;1. SPI_InitTypeDef&quot;">​</a></h3><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mode;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       /* 设置 SPI 的主/从机端模式 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Direction;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 设置 SPI 的单双向模式 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataSize;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* 设置 SPI 的数据帧长度，可选 8/16 位 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CLKPolarity;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 设置时钟极性 CPOL，可选高/低电平 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CLKPhase;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* 设置时钟相位，可选奇/偶数边沿采样 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSS;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 设置 NSS 引脚由 SPI 硬件控制还是软件控制 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaudRatePrescaler;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 设置时钟分频因子， fpclk/分频数 =fSCK */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FirstBit;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          /* 设置 MSB/LSB 先行 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TIMode;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            /* 指定是否启用 TI 模式 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CRCCalculation;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 指定是否启用 CRC 计算 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CRCPolynomial;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     /* 设置 CRC 校验的表达式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} SPI_InitTypeDef;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>（1）Mode： 本成员设置 SPI 工作在主机模式 (SPI_MODE_MASTER) 或从机模式 (SPI_MODE_SLAVE )，这两个模式的最大区别为 SPI 的 SCK 信号线的时序，SCK 的时序是由通讯中的主机产生的。若被配置为从机模式， STM32 的 SPI 外设将接受外来的 SCK 信号。</p><p>（2）Direction：本成员设置 SPI 的通讯方向，可设置为双线全双工 (SPI_DIRECTION_2LINES)，双线只接收 (SPI_DIRECTION_2LINES_RXONLY)，单线SPI_DIRECTION_1LINE。</p><p>（3）DataSize： 本成员可以选择 SPI 通讯的数据帧大小是为 8 位 (SPI_DATASIZE_8BIT) 还是 16位 (SPI_DATASIZE_16BIT)。</p><p>（4）CLKPolarity 和 CLKPhase：这两个成员配置 SPI 的时钟极性 CLKPolarity 和时钟相位CLKPhase ，这两个配置影响到 SPI 的通讯模式，关于 CLKPolarity 和 CLKPhase 可以看前边的笔记。时钟极性 CLKPolarity 成员，可设置为高电平 (SPI_POLARITY_HIGH)或低电平 (SPI_POLARITY_LOW)。时钟相位 CPHA 则可设置为 SPI_PHASE_1EDGE(在SCK 的奇数边沿采集数据) 或 SPI_P HASE_2EDGE(在 SCK 的偶数边沿采集数据) 。</p><p>（5）NSS： 本成员配置 NSS 引脚的使用模式，可以选择为硬件模式 (SPI_NSS_HARD ) 与软件模式 ( SPI_NSS_SOFT )，在硬件模式中的 SPI 片选信号由 SPI 硬件自动产生，而软件模式则需要我们亲自把相应的 GPIO 端口拉高或置低产生非片选和片选信号。实际中软件模式应用比较多。</p><p>（6）BaudRatePrescaler： 本成员设置波特率分频因子，分频后的时钟即为 SPI 的 SCK 信号线的时钟频率。这个成员参数可设置为 fpclk 的 2、 4、 6、 8、 16、 32、 64、 128、 256 分频。</p><p>（7）FirstBit： 所有串行的通讯协议都会有 MSB 先行 (高位数据在前) 还是 LSB 先行 (低位数据在前) 的问题，而 STM32 的 SPI 模块可以通过这个结构体成员，对这个特性编程控制。</p><p>（8）TIMode ：指定是否启用 TI 模式。可选择为使能 ( SPI_TIMO DE_ENABLE ) 与不是能( SPI_TIMODE_DISABLE )。</p><p>（9）CRCCalculation ：指定是否启用 CRC 计算。</p><p>（10）SPI_CRCPolynomial： 这是 SPI 的 CRC 校验中的多项式，若我们使用 CRC 校验时，就使用这个成员的参数 (多项式)，来计算 CRC 的值。</p><h3 id="_2-数据传输" tabindex="-1">2. 数据传输 <a class="header-anchor" href="#_2-数据传输" aria-label="Permalink to &quot;2. 数据传输&quot;">​</a></h3><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HAL_StatusTypeDef </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAL_SPI_Transmit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SPI_HandleTypeDef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hspi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> Timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HAL_StatusTypeDef </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAL_SPI_Receive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SPI_HandleTypeDef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hspi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> Timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HAL_StatusTypeDef </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAL_SPI_TransmitReceive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SPI_HandleTypeDef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hspi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pTxData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pRxData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> Timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,68)])])}const A=a(g,[["render",P]]);export{b as __pageData,A as default};
