import{_ as d,c as a,o as e,b0 as r}from"./chunks/framework.C5ev1SXp.js";const o="/scm-docs/assets/image-20230502074534375.CDpuiDhm.png",s="/scm-docs/assets/image-20230502075347142.BKxOB6c1.png",i="/scm-docs/assets/image-20230502075511743.DSQfFQGs.png",h=JSON.parse('{"title":"LV020-RS232简介","description":null,"frontmatter":{"title":"LV020-RS232简介","date":"2025-09-27T10:05:23.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/communication/serial-port/126b0950f26b1afbd6db3885","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-27T10:05:23.431Z","fulluuid":"bd6db38856214d8db0d0697d94245e7d","useduuid":"bd6db3885"}},"headers":[],"relativePath":"sdoc/communication/serial-port/126b0950f26b1afbd6db3885.md","filePath":"sdoc/60-通信专题/10-串口/LV020-RS232简介.md","lastUpdated":1758811394000}'),l={name:"sdoc/communication/serial-port/126b0950f26b1afbd6db3885.md"};function n(c,t,m,R,p,u){return e(),a("div",null,[...t[0]||(t[0]=[r('<h1 id="lv020-rs232简介" tabindex="-1">LV020-RS232简介 <a class="header-anchor" href="#lv020-rs232简介" aria-label="Permalink to &quot;LV020-RS232简介&quot;">​</a></h1><h2 id="一、rs232简介" tabindex="-1">一、RS232简介 <a class="header-anchor" href="#一、rs232简介" aria-label="Permalink to &quot;一、RS232简介&quot;">​</a></h2><p>RS232是美国电子工业协会（ Electronic Industries Association， EIA） 于1962年发布的串行通信接口标准，其中RS为英文“ Recomend Standard”的缩写， 中文翻译为“ 推荐标准”， 232为标识号。该标准对串行通信的物理接口及逻辑电平都做了规定， 其输出的电平称为RS232电平。早期常见于个人计算机上，是计算机通讯接口之一。现如今在个人计算机上已比较少见， 但在一些工控设备依旧比较多。</p><p>最简单的RS232通信由三条数据线组成，即TXD、 RXD和GND。 RS232采用负逻辑电平，即-15V ~ -3V代表逻辑“ 1”， +3V ~ +15V代表逻辑“ 0”。这里的电平，是TxD线（或者RxD线）相对于GND的电压。RS232最长传输距离为15米，通常采用DB9接口， 有公母之分， 该接口如下图：</p><img src="'+o+'" alt="image-20230502074534375" style="zoom:20%;"><p>它其实<strong>是串口的另外一种接口标准，本质上还是串口</strong>，所以我们在使用RS232的时候一般只需要实现串口就可以啦。 在习惯上，通常说的串口，是指MCU引脚引出来的的UART，也就是TTL电平。 UART<strong>可直连</strong>其它MCU或模块的UART，或者UART转USB连接电脑，又或者UART转RS232/RS485远距离传输。这里的转换是转换芯片自动实现的，无需用户程序干预。</p><h2 id="二、针脚定义" tabindex="-1">二、针脚定义 <a class="header-anchor" href="#二、针脚定义" aria-label="Permalink to &quot;二、针脚定义&quot;">​</a></h2><p>DB9有9个针脚， 通常RS232只需要TXD、 RXD和GND即可， 引脚定义如下：</p><table tabindex="0"><thead><tr><th>引脚号</th><th>定义</th><th>符号</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>载波检测</td><td>DCD（ Data Carrier Detect）</td><td>——</td></tr><tr><td>2</td><td>接收数据</td><td>RXD（ Received Data）</td><td>RS232接收</td></tr><tr><td>3</td><td>发送数据</td><td>TXD（ Transmit Data）</td><td>RS232发送</td></tr><tr><td>4</td><td>数据终端准备好</td><td>DTR（ Data Terminal Ready）</td><td>——</td></tr><tr><td>5</td><td>信号地</td><td>GND（ Signal Ground）</td><td>RS232接地</td></tr><tr><td>6</td><td>通讯设备准备好</td><td>DSR（ Data Set Ready）</td><td>——</td></tr><tr><td>7</td><td>请求发送</td><td>RTS（ Request To Send）</td><td>——</td></tr><tr><td>8</td><td>允许发送</td><td>CTS（ Clear To Send）</td><td>——</td></tr><tr><td>9</td><td>响铃提示器</td><td>RI（ Ring Indicator）</td><td>——</td></tr></tbody></table><h2 id="三、硬件参考电路" tabindex="-1">三、硬件参考电路 <a class="header-anchor" href="#三、硬件参考电路" aria-label="Permalink to &quot;三、硬件参考电路&quot;">​</a></h2><p>这里我截取了两个不同的平台的RS232的硬件设计电路，看他们的资料的话就有，其实都是一样的。</p><ul><li>平台一</li></ul><img src="'+s+'" alt="image-20230502075347142" style="zoom:50%;"><ul><li>平台二</li></ul><img src="'+i+'" alt="image-20230502075511743" style="zoom:50%;"><h2 id="四、软件设计" tabindex="-1">四、软件设计 <a class="header-anchor" href="#四、软件设计" aria-label="Permalink to &quot;四、软件设计&quot;">​</a></h2><p>一般来说，硬件设计好后，软件方面只需要实现串口UART就好了，一般参考步骤如下：</p><p>（1）初始化USART1、 2、 3：设置波特率，收发选择，有效数据位等；</p><p>（2）将所使用的串口引脚初始化： USART使能、 GPIO端口时钟使能、 GPIO引脚设置为USART复用；</p><p>（3） RS232采用中断方式发送， 编写中断回调函数；</p><p>（4）主函数编写控制逻辑。</p>',21)])])}const b=d(l,[["render",n]]);export{h as __pageData,b as default};
