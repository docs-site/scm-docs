import{_ as t,c as e,o as r,b0 as o}from"./chunks/framework.C5ev1SXp.js";const l="/scm-docs/assets/image-20230504212342232.C6fRgoJa.png",R="/scm-docs/assets/image-20230408180635157.BnCVbjfe.png",d="/scm-docs/assets/memory.CD2EEuc4.png",s="/scm-docs/assets/image-20230504181036772.BERg8Oim.png",M="/scm-docs/assets/image-20230504181227070.BkRwpNJP.png",A="/scm-docs/assets/image-20230504181858874.D_uPfaqW.png",i="/scm-docs/assets/image-20230504181415303.BK3092Qo.png",u=JSON.parse('{"title":"LV010-常见存储器","description":null,"frontmatter":{"title":"LV010-常见存储器","date":"2025-09-17T21:31:07.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/basic/overview/126b08ba13b3329986816cf4","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-17T21:31:07.809Z","fulluuid":"986816cf43ae496ea97f2ac2344cf4bc","useduuid":"986816cf4"}},"headers":[],"relativePath":"sdoc/basic/overview/126b08ba13b3329986816cf4.md","filePath":"sdoc/10-基础篇/01-概述/LV010-常见存储器.md","lastUpdated":1758153691000}'),h={name:"sdoc/basic/overview/126b08ba13b3329986816cf4.md"};function n(p,a,c,m,S,D){return r(),e("div",null,[...a[0]||(a[0]=[o('<h1 id="lv010-常见存储器" tabindex="-1">LV010-常见存储器 <a class="header-anchor" href="#lv010-常见存储器" aria-label="Permalink to &quot;LV010-常见存储器&quot;">​</a></h1><h2 id="一、单片机中的flash和sram" tabindex="-1">一、单片机中的FLASH和SRAM <a class="header-anchor" href="#一、单片机中的flash和sram" aria-label="Permalink to &quot;一、单片机中的FLASH和SRAM&quot;">​</a></h2><p>我们在进行STM32芯片选型的时候，会看到这样的参数，可以看<a href="https://www.st.com.cn/zh/microcontrollers-microprocessors/stm32f103.html" target="_blank" rel="noreferrer">STM32F103</a>选型页面：</p><img src="'+l+'" alt="image-20230504212342232" style="zoom:50%;"><p>比如这里，我们使用的STM32F103ZE系列芯片，有512KB的Flash和64KB的SRAM，这是什么意思呢？</p><p>在STM32中 SRAM 及 FLASH 是作为内存和程序存储空间的。我们平时使用电脑，会考虑内存大小，有4GB、8GB、16GB等，也会看到硬盘的大小，512GB、1TB等。在单片机中，SRAM就类似于内存条，整个程序中，所用到的需要被改写的量，都存储在RAM中，“被改变的量”包括全局变量、局部变量、堆栈段。Flash用来存储程序，存放指令代码和一些固定数值，程序运行后不可改动的那些东西。</p><p>接下来就来了解一下存储介质相关的内容。</p><blockquote><p>STM32单片机内部的FLASH为 NOR FLASH，内部的 RAM 为 SRAM。</p></blockquote><h2 id="二、存储介质" tabindex="-1">二、存储介质 <a class="header-anchor" href="#二、存储介质" aria-label="Permalink to &quot;二、存储介质&quot;">​</a></h2><h3 id="_1-基本概念" tabindex="-1">1.基本概念 <a class="header-anchor" href="#_1-基本概念" aria-label="Permalink to &quot;1.基本概念&quot;">​</a></h3><p>所谓的存储介质是指用于存储数据的载体，比如纸墨组合、软盘、CD光盘、DVD光盘、机械硬盘、闪存盘等。按照物理材料的不同，可以将存储介质分为四大类，分别为光学存储介质、半导体存储介质、磁性存储介质和其他存储介质。</p><img src="'+R+'" alt="image-20230408180635157" style="zoom:50%;"><h3 id="_2-光学存储介质" tabindex="-1">2. 光学存储介质 <a class="header-anchor" href="#_2-光学存储介质" aria-label="Permalink to &quot;2. 光学存储介质&quot;">​</a></h3><p>光学存储简称光存储，主要是由光盘表面的介质来实现或影响数据存储的，光盘上存在很多凹凸不平的微观小坑，激光照射到上面会产生不同的反射，通过技术处理再转化为0、1的数字信号形成了光存储。光盘不反射激光的点代表着那里是一个小坑，主机识别它为一个“1”；光盘反射激光回来的那个点，主机识别它为“0”。所谓的光盘是一个统称，包括CD和DVD等光盘介质，靠配套光驱等主机读取或写入数据。</p><p>从光盘是否可刻录的特性来分，一般又可以将光盘分为两类，即只读型光盘，另一类则是可刻录型光盘。刻录光盘的概念原理是这样的：光盘在刻录时，通过激光强度的变化在光盘介质上烧录出不同的凹凸点。</p><h3 id="_3-磁性存储介质" tabindex="-1">3. 磁性存储介质 <a class="header-anchor" href="#_3-磁性存储介质" aria-label="Permalink to &quot;3. 磁性存储介质&quot;">​</a></h3><p>磁性存储介质指存储器的存储材料采用磁性材料，该存储器系统一般由磁头、磁性存储介质、电路和伺服机械等部分组成。</p><p>机械硬盘HDD就是以磁性存储介质来存储数据的，其典型组成是“马达+磁头+磁盘”的机械结构，以“磁头+马达”的方式在磁盘上进行寻址读取或写入数据。</p><h3 id="_4-半导体存储介质" tabindex="-1">4. 半导体存储介质 <a class="header-anchor" href="#_4-半导体存储介质" aria-label="Permalink to &quot;4. 半导体存储介质&quot;">​</a></h3><p>半导体存储介质属于一种特殊的固态存储介质，主要包括易失性半导体介质（DRAM、SRAM）、非易失性半导体介质（FLASH、EEPROM、PROM、EPROM等）和新型介质（包括3D XPonit、MRAM、RRAM、FRAM、PCM等）。</p><p>目前，半导体存储介质的主要方向为FLASH、3D XPonit、MRAM、RRAM等，其中FLASH应用比较广泛。</p><p>当前闪存生产供应商主要有Samsung（三星）、Micron（美光）、东芝铠侠、WD&amp;Sandisk（西数&amp;闪迪）、长江存储、SK Hynix（现代海力士）等。</p><h2 id="二、常见的存储器" tabindex="-1">二、常见的存储器 <a class="header-anchor" href="#二、常见的存储器" aria-label="Permalink to &quot;二、常见的存储器&quot;">​</a></h2><h3 id="_1-分类" tabindex="-1">1. 分类 <a class="header-anchor" href="#_1-分类" aria-label="Permalink to &quot;1. 分类&quot;">​</a></h3><p>存储器是计算机结构的重要组成部分。存储器是用来存储程序代码和数据的部件，有了存储器计算机才具有记忆功能。基本的存储器种类见图基本存储器种类。</p><img src="'+d+'" style="zoom:50%;"><p>存储器按其存储介质特性主要分为“易失性存储器”和“非易失性存储器”两大类。其中的“易失/非易失”是指存储器断电后，它存储的数据内容是否会丢失的特性。由于一般易失性存储器存取速度快，而非易失性存储器可长期保存数据，它们都在计算机中占据着重要角色。在计算机中易失性存储器最典型的代表是内存，非易失性存储器的代表则是硬盘。</p><blockquote><p>SDRAM：Synchronous DRAM</p><p>DDR SDRAM：Double Data Rate SDRAM</p></blockquote><h3 id="_2-ram——易失性存储器" tabindex="-1">2. RAM——易失性存储器 <a class="header-anchor" href="#_2-ram——易失性存储器" aria-label="Permalink to &quot;2. RAM——易失性存储器&quot;">​</a></h3><p>RAM，即“Random Access Memory”，被译为随机存储器，表示既可以从中读取数据，也可以写入数据。当机器<strong>电源关闭时，存于其中的数据就会丢失</strong>。比如电脑的内存条。</p><p>所谓“随机存取”，指的是当存储器中的消息被读取或写入时，所需要的时间与这段信息所在的位置无关。这个词的由来是因为早期计算机曾使用磁鼓作为存储器，磁鼓是顺序读写设备，而 RAM 可随读取其内部任意地址的数据，时间都是相同的，因此得名。</p><p>它是一个与CPU直接交换数据的内部存储器，它可以随时读写，而且速度很快，通常作为操作系统或其他正在运行中的程序的临时数据存储媒介。实际上现在 RAM 已经专门用于指代作为计算机内存的易失性半导体存储器。</p><p>根据 RAM 的存储机制，又分为动态随机存储器 DRAM(Dynamic RAM) 以及静态随机存储器SRAM(Static RAM) 两种。</p><ul><li><p>SRAM（Static RAM/SRAM）常用来作为高速缓存存储器，SRAM速度非常快，是目前读写最快的存储设备了，但是它也非常昂贵，所以只在要求很苛刻的地方使用，譬如CPU的一级缓冲，二级缓冲。既可以在CPU芯片上，也可以在片下。<strong>STM32单片机内部的 RAM 就是 SRAM</strong>。</p></li><li><p>DRAM（Dynamic RAM/DRAM）则常用来作为图形系统的帧缓冲区。 DRAM保留数据的时间很短，速度也比SRAM慢，不过它还是比任何的ROM都要快，但从价格上来说DRAM相比SRAM要便宜很多，计算机内存就是DRAM的。DRAM分为很多种，常见的主要有FPRAM/FastPage、EDORAM、SDRAM、DDR RAM、RDRAM、SGRAM以及WRAM等。</p></li></ul><blockquote><p>为什么需要RAM？</p><p>为什么需要RAM，因为相对FlASH而言，RAM的速度快很多，所有数据在FLASH里面读取太慢了，为了加快速度，就把一些需要和CPU交换的数据读到RAM里来执行（注意这里不是全部数据，只是一部分需要的数据）。</p></blockquote><p>总的来说，RAM相对容量小，速度快，掉电数据丢失，其作用是用来存取各种动态的输入输出数据、中间计算结果以及与外部存储器交换的数据和暂存数据。</p><h4 id="_2-1-dram" tabindex="-1">2.1 DRAM <a class="header-anchor" href="#_2-1-dram" aria-label="Permalink to &quot;2.1 DRAM&quot;">​</a></h4><p>动态随机存储器 DRAM 的存储单元以电容的电荷来表示数据，有电荷代表 1，无电荷代表 0，见下图：</p><img src="'+s+'" alt="image-20230504181036772" style="zoom:80%;"><p>但时间一长，代表 1 的电容会放电，代表 0 的电容会吸收电荷，因此它需要定期刷新操作，这就是“动态 (Dynamic)”一词所形容的特性。刷新操作会对电容进行检查，若电量大于满电量的 1/2，则认为其代表 1，并把电容充满电；若电量小于 1/2，则认为其代表 0，并把电容放电，以此来保证数据的正确性 。</p><h5 id="_2-1-1-sdram" tabindex="-1">2.1.1 SDRAM <a class="header-anchor" href="#_2-1-1-sdram" aria-label="Permalink to &quot;2.1.1 SDRAM&quot;">​</a></h5><p>根据 DRAM 的通讯方式，又分为同步和异步两种，这两种方式根据通讯时是否需要使用时钟信号来区分。如下图，是一种利用时钟进行同步的通讯时序，它在时钟的上升沿表示有效数据。</p><img src="'+M+'" alt="image-20230504181227070" style="zoom:50%;"><p>由于使用时钟同步的通讯速度更快，所以同步 DRAM 使用更为广泛，常见的DRAM都采用同步方式 ， 被称为SDRAM(Synchronous DRAM)。</p><h5 id="_2-1-2-ddr-sdram" tabindex="-1">2.1.2 DDR SDRAM <a class="header-anchor" href="#_2-1-2-ddr-sdram" aria-label="Permalink to &quot;2.1.2 DDR SDRAM&quot;">​</a></h5><p>双倍数据速率同步 DRAM（Double Data-Rate Synchronous DRAM），中文名为“双倍数据流SDRAM”。为了进一步提高 SDRAM 的通讯速度，人们设计了 DDR SDRAM 存储器 (Double Data RateSDRAM)。它的存储特性与 SDRAM 没有区别，但 SDRAM 只在上升沿表示有效数据，在 1 个时钟周期内，只能表示 1 个有数据；而 DDRSDRAM 在时钟的上升沿及下降沿各表示一个数据，也就是说在 1 个时钟周期内可以表示 2 位数据，在时钟频率同样的情况下，提高了一倍的速度。</p><p>这样就意味着它可以在一个时钟读写两次数据，这样就使得数据传输速度加倍了。这是目前电脑中用得最多的内存，而且它有着成本优势，事实上击败了Intel的另外一种内存标准-Rambus DRAM。在很多高端的显卡上，也配备了高速DDR RAM来提高带宽，这可以大幅度提高3D加速卡的像素渲染能力。</p><p>至于 DDRII 和 DDRIII，它们的通讯方式并没有区别，主要是通讯同步时钟的频率提高了。当前个人计算机常用的内存条是 DDRIII SDRAM 存储器，在一个内存条上包含多个 DDRIII SDRAM 芯片。</p><h5 id="_2-1-3-不同种类sdram" tabindex="-1">2.1.3 不同种类SDRAM <a class="header-anchor" href="#_2-1-3-不同种类sdram" aria-label="Permalink to &quot;2.1.3 不同种类SDRAM&quot;">​</a></h5><table tabindex="0"><thead><tr><th>种类</th><th>特点</th></tr></thead><tbody><tr><td>普通SDRAM</td><td>在上升沿时同步数据</td></tr><tr><td>DDRII SDRAM</td><td>在上升沿及下降沿都同步数据， 时钟极限频率800MHz</td></tr><tr><td>DDRIII SDRAM</td><td>在上升沿及下降沿都同步数据， 时钟极限频率1600MHz</td></tr></tbody></table><h4 id="_2-2-sram" tabindex="-1">2.2 SRAM <a class="header-anchor" href="#_2-2-sram" aria-label="Permalink to &quot;2.2 SRAM&quot;">​</a></h4><p>静态随机存储器 SRAM 的存储单元以锁存器来存储数据，见下图：</p><img src="'+A+'" alt="image-20230504181858874" style="zoom:80%;"><p>这种电路结构不需要定时刷新充电，就能保持状态 (当然，如果断电了，数据还是会丢失的)，所以这种存储器被称为“静态 (Static)” RAM。 SRAM 是利用双稳态触发器来保存信息的，只要不掉电，信息是不会丢失的。因此存取速度快，但是体积大，功耗大，成本高，适用于CPU的L1cache 和 L2cache（一级缓存、二级缓存），寄存器等。即使有干扰来扰乱电压，当干扰消除时，电路就会恢复到稳定值。</p><p>同样地， SRAM 根据其通讯方式也分为同步 (SSRAM) 和异步 SRAM，相对来说，异步 SRAM 用得比较广泛。下图是一种异步的通讯时序，它不需要时钟，但是对于一些信号的保持时间却有一定的要求。</p><img src="'+i+'" alt="image-20230504181415303" style="zoom:33%;"><h4 id="_2-3-dram-与-sram-的应用场合" tabindex="-1">2.3 DRAM 与 SRAM 的应用场合 <a class="header-anchor" href="#_2-3-dram-与-sram-的应用场合" aria-label="Permalink to &quot;2.3 DRAM 与 SRAM 的应用场合&quot;">​</a></h4><p>对比 DRAM 与 SRAM 的结构，可知 DRAM 的结构简单得多，所以生产相同容量的存储器， DRAM的成本要更低，且集成度更高。而 DRAM 中的电容结构则决定了它的存取速度不如 SRAM ，它们的特性对比如下：</p><table tabindex="0"><thead><tr><th>特性</th><th>DRAM</th><th>SRAM</th></tr></thead><tbody><tr><td>存取速度</td><td>较慢</td><td>较快</td></tr><tr><td>集成度</td><td>较高</td><td>较低</td></tr><tr><td>生产成本</td><td>较低</td><td>较高</td></tr><tr><td>是否需要刷新</td><td>是</td><td>否</td></tr></tbody></table><p>所以在实际应用场合中， SRAM 一般只用于 CPU 内部的高速缓存 (Cache)，而外部扩展的内存一般使用 DRAM。在 STM32 系统的控制器中，只有STM32F429 型号或更高级的芯片才支持扩展SDRAM，其它型号如 STM32F1、 STM32F2 及 STM32F407 等型号只能扩展 SRAM。</p><h3 id="_3-非易失性存储器" tabindex="-1">3. 非易失性存储器 <a class="header-anchor" href="#_3-非易失性存储器" aria-label="Permalink to &quot;3. 非易失性存储器&quot;">​</a></h3><p>非易失性存储器种类非常多，半导体类的有 ROM 和 FLASH，而其它的则包括光盘、软盘及机械硬盘。</p><h4 id="_3-1-rom存储器" tabindex="-1">3.1 ROM存储器 <a class="header-anchor" href="#_3-1-rom存储器" aria-label="Permalink to &quot;3.1 ROM存储器&quot;">​</a></h4><p>ROM，即“Read Only Memory”的缩写，意为只能读的存储器。由于技术的发展，后来设计出了可以方便写入数据的 ROM，而这个“Read Only Memory”的名称被沿用下来了，现在一般用于指代非易失性半导体存储器，包括后面介绍的 FLASH 存储器，有些人也把它归到 ROM 类里边。 它一般是装入整机前事先写好的，整机工作过程中只能读出，而不像随机存储器那样能快速地、方便地加以改写。ROM所存数据稳定，断电后所存数据也不会改变。计算机中的ROM主要是用来存储一些系统信息，或者启动程序BIOS程序，这些都是非常重要的，只可以读一般不能修改，断电也不会消失。</p><p>ROM存储器又可以分为以下几类：</p><table tabindex="0"><thead><tr><th>种类</th><th>特性</th></tr></thead><tbody><tr><td>MASK ROM</td><td>出厂时固化， 不可修改</td></tr><tr><td>OTPROM</td><td>用户可写入一次， 之后不可修改</td></tr><tr><td>EPROM</td><td>可重复擦写， 需要使用专用紫外线照射设备擦除</td></tr><tr><td>EEPROM</td><td>可重复擦写， 电擦除， 使用方便</td></tr></tbody></table><h5 id="_3-1-1-mask-rom" tabindex="-1">3.1.1 MASK ROM <a class="header-anchor" href="#_3-1-1-mask-rom" aria-label="Permalink to &quot;3.1.1 MASK ROM&quot;">​</a></h5><p>MASK(掩膜) ROM 就是正宗的“Read Only Memory”，存储在它内部的数据是在出厂时使用特殊工艺固化的，生产后就不可修改，其主要优势是大批量生产时成本低。当前在生产量大，数据不需要修改的场合，还有应用。</p><h5 id="_3-1-2-otprom" tabindex="-1">3.1.2 OTPROM <a class="header-anchor" href="#_3-1-2-otprom" aria-label="Permalink to &quot;3.1.2 OTPROM&quot;">​</a></h5><p>OTPROM(One Time Programable ROM) 是一次可编程存储器。这种存储器出厂时内部并没有资料，用户可以使用专用的编程器将自己的资料写入，但只能写入一次，被写入过后，它的内容也不可再修改。在 NXP 公司生产的控制器芯片中常使用 OTPROM 来存储密钥；在 STM32F429 芯片中也具有一部分 OTPROM 空间。</p><h5 id="_3-1-3-eprom" tabindex="-1">3.1.3 EPROM <a class="header-anchor" href="#_3-1-3-eprom" aria-label="Permalink to &quot;3.1.3 EPROM&quot;">​</a></h5><p>EPROM(Erasable Programmable ROM) 是可重复擦写的存储器，它解决了 PROM 芯片只能写入一次的问题。这种存储器使用紫外线照射芯片内部擦除数据，擦除和写入都要专用的设备。现在这种存储器基本淘汰，被 EEPROM 取代。</p><h5 id="_3-1-4-eeprom" tabindex="-1">3.1.4 EEPROM <a class="header-anchor" href="#_3-1-4-eeprom" aria-label="Permalink to &quot;3.1.4 EEPROM&quot;">​</a></h5><p>EEPROM(Electrically Erasable Programmable ROM) 是电可擦除存储器。 EEPROM 可以重复擦写，它的擦除和写入都是直接使用电路控制，不需要再使用外部设备来擦写。而且可以按字节为单位修改数据，无需整个芯片擦除。现在主要使用的 ROM 芯片都是 EEPROM。</p><h4 id="_3-2-flash存储器" tabindex="-1">3.2 FLASH存储器 <a class="header-anchor" href="#_3-2-flash存储器" aria-label="Permalink to &quot;3.2 FLASH存储器&quot;">​</a></h4><p>FLASH 是非非易失性存储器，又称为闪存，它也是可重复擦写的储器，部分书籍会把 FLASH 存储器称为 FLASH ROM，但它的容量一般比 EEPROM 大得多，且在擦除时，一般以多个字节为单位。如有的 FLASH存储器以 4096 个字节为扇区，最小的擦除单位为一个扇区。</p><p>FLASH 不仅具备电子可擦除可编程(EEPROM)的性能，还不会断电丢失数据同时可以快速读取数据，U盘和MP3里用的就是这种存储器。在以前的嵌入式芯片中，存储设备一直使用ROM(EPROM)，随着技术的进步，现在嵌入式中基本都是FLASH，用作存储Bootloader以及操作系统或者程序代码或者直接当硬盘使用(U盘)。</p><p>根据存储单元电路的不同， FLASH存储器又分为 NOR FLASH 和 NAND FLASH.</p><h5 id="_3-2-1-nor-flash" tabindex="-1">3.2.1 NOR FLASH <a class="header-anchor" href="#_3-2-1-nor-flash" aria-label="Permalink to &quot;3.2.1 NOR FLASH&quot;">​</a></h5><p>NOR FLASH的读取和我们常见的SDRAM的读取是一样，用户可以直接运行装载在NOR FLASH里面的代码，这样可以减少SRAM的容量从而节约了成本。</p><p>NOR FLASH有自己的地址线和数据线，可以采用类似于memory的随机访问方式，在NOR Flash上可以直接运行程序，所以NOR FLASH可以直接用来做boot，采用NOR FLASH启动的时候会把地址映射到0x00上。写入数据时可以按字节写入。比如说<strong>STM32的内部FLASH就是NOR FLASH</strong>，还有我们后边会学习的W25Q128等。</p><h5 id="_3-2-2-nand-flash" tabindex="-1">3.2.2 NAND FLASH <a class="header-anchor" href="#_3-2-2-nand-flash" aria-label="Permalink to &quot;3.2.2 NAND FLASH&quot;">​</a></h5><p>NAND FLASH 没有采取内存的随机读取技术，它的读取是以一次读取一块的形式来进行的，通常是一次读取512个字节，采用这种技术的Flash比较廉价。</p><p>用户不能直接运行NAND Flash上的代码，因此好多使用NAND Flash的开发板除了使用NAND Flah以外，还作上了一块小的NOR FLASH来运行启动代码。<strong>写入数据时必须以块或者扇区为单位进行读写</strong>。</p><h5 id="_3-2-3-特性对比" tabindex="-1">3.2.3 特性对比 <a class="header-anchor" href="#_3-2-3-特性对比" aria-label="Permalink to &quot;3.2.3 特性对比&quot;">​</a></h5><p align="center"> NOR_FLASH 与 NAND_FLASH 特性对比 </p> | 特性 | NOR FLASH | NAND FLASH | | ---------------- | ---------------- | --------------------- | | 同容量存储器成本 | 较贵 | 较便宜 | | 集成度 | 较低 | 较高 | | 介质类型 | 随机存储 | 连续存储 | | 地址线和数据线 | 独立分开 | 共用 | | 擦除单元 | 以“扇区/块” 擦除 | 以“扇区/块” 擦除 | | 读写单元 | 可以基于字节读写 | 必须以“块” 为单位读写 | | 读取速度 | 较高 | 较低 | | 写入速度 | 较低 | 较高 | | 坏块 | 较少 | 较多 | | 是否支持XIP | 支持 | 不支持 | <p>NOR 与 NAND 的共性是在数据写入前都需要有擦除操作，而擦除操作一般是以“扇区/块”为单位的。而 NOR 与 NAND 特性的差别，主要是由于其内部“地址/数据线”是否分开导致的。</p><p>由于 NOR 的地址线和数据线分开，它可以按“字节”读写数据，符合 CPU 的指令译码执行要求，所以假如 NOR 上存储了代码指令， CPU 给 NOR 一个地址， NOR 就能向 CPU 返回一个数据让CPU 执行，中间不需要额外的处理操作。而由于 NAND 的数据和地址线共用，只能按“块”来读写数据，假如 NAND 上存储了代码指令，CPU 给 NAND 地址后，它无法直接返回该地址的数据，所以不符合指令译码要求。 表 NOR_FLASH 与 NAND_FLASH 特性对比 中的最后一项“是否支持 XIP”描述的就是这种立即执行的特性 (eXecute In Place)。</p><p>若代码存储在 NAND 上，可以把它先加载到 RAM 存储器上，再由 CPU 执行。所以在功能上可以认为 NOR 是一种断电后数据不丢失的 RAM，但它的擦除单位与 RAM 有区别，且读写速度比RAM 要慢得多。</p><p>另外， FLASH 的擦除次数都是有限的 (现在普遍是 10 万次左右)，当它的使用接近寿命的时候，可能会出现写操作失败。由于 NAND 通常是整块擦写，块内有一位失效整个块就会失效，这被称为坏块，而且由于擦写过程复杂，从整体来说 NOR 块块更少，寿命更长。由于可能存在坏块，所以 FLASH 存储器需要“探测/错误更正 (EDC/ECC)”算法来确保数据的正确性。</p><p>由于两种 FLASH 存储器特性的差异， NOR FLASH 一般应用在代码存储的场合，如嵌入式控制器内部的程序存储空间。而 NAND FLASH 一般应用在大数据量存储的场合，包括 SD 卡、 U 盘以及固态硬盘（SSD）等，都是 NAND FLASH 类型的。</p><h2 id="三、-emmc" tabindex="-1">三、 eMMC? <a class="header-anchor" href="#三、-emmc" aria-label="Permalink to &quot;三、 eMMC?&quot;">​</a></h2><p>常见的还有一种叫eMMC，全称为embeded MultiMedia Card，是一种嵌入式非易失性存储器系统，由Nand flash和Nand flash控制器组成，以BGA方式封装在一款chip上。简单说就是NAND闪存+闪存控制芯片+标准接口封装。</p><p>eMMC特点就是功耗低，容量小，随机读写性能差．体积超小、低复杂度、高度集成、低布线难度。eMMC基于闪存（NAND FLASH），其作用类似于硬盘。它广泛应用于平板电脑、手机的机身内存。</p><blockquote><p>参考资料</p><p><a href="https://bbs.huaweicloud.com/blogs/375342" target="_blank" rel="noreferrer">STM32的内存管理相关（内存架构，内存管理，map文件分析）-云社区-华为云</a></p></blockquote>',96)])])}const _=t(h,[["render",n]]);export{u as __pageData,_ as default};
