import{_ as i,c as a,o as n,b0 as l}from"./chunks/framework.C5ev1SXp.js";const p="/scm-docs/assets/image-20220923064422211.2dDVJRkD.png",t="/scm-docs/assets/image-20220923065836425.jZimOzau.png",h="/scm-docs/assets/image-20230502091928859.qR0bLROb.png",e="/scm-docs/assets/SPI003.nhn3K4D2.jpg",k="/scm-docs/assets/SPI004.DMFRBX8k.jpeg",r="/scm-docs/assets/SPI005.DwesHvHK.jpeg",P=JSON.parse('{"title":"LV001-SPI简介","description":null,"frontmatter":{"title":"LV001-SPI简介","date":"2025-09-27T09:50:19.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/communication/spi/126b0950dceb1d850b1e36d8","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-27T09:50:19.472Z","fulluuid":"50b1e36d86eb4c0e85c11fe350fcd877","useduuid":"50b1e36d8"}},"headers":[],"relativePath":"sdoc/communication/spi/126b0950dceb1d850b1e36d8.md","filePath":"sdoc/60-通信专题/30-SPI/LV001-SPI简介.md","lastUpdated":1758811394000}'),E={name:"sdoc/communication/spi/126b0950dceb1d850b1e36d8.md"};function d(g,s,y,c,b,S){return n(),a("div",null,[...s[0]||(s[0]=[l('<h1 id="lv001-spi简介" tabindex="-1">LV001-SPI简介 <a class="header-anchor" href="#lv001-spi简介" aria-label="Permalink to &quot;LV001-SPI简介&quot;">​</a></h1><h2 id="一、-spi协议简介" tabindex="-1">一、 SPI协议简介 <a class="header-anchor" href="#一、-spi协议简介" aria-label="Permalink to &quot;一、 SPI协议简介&quot;">​</a></h2><h3 id="_1-什么是spi" tabindex="-1">1. 什么是SPI？ <a class="header-anchor" href="#_1-什么是spi" aria-label="Permalink to &quot;1. 什么是SPI？&quot;">​</a></h3><p>SPI 协议，Serial Peripheral Interface ，即串行外围设备接口， 是由摩托罗拉公司提出的通讯协议（ Motorola） 在1980前后提出的一种全双工同步串行通信接口，它用于MCU与各种外围设备以串行方式进行通信以交换信息，通信速度最高可达25MHz以上。SPI接口主要应用在EEPROM、 FLASH、实时时钟、网络控制器、 OLED显示驱动器、 AD转换器，数字信号处理器、数字信号解码器等与MCU间要求通讯速率较高的场合 。</p><p>SPI，是一种<strong>高速</strong>的，<strong>全双工</strong>，<strong>同步</strong>的通信总线，并且在芯片的管脚上只占用四根线，节约了芯片的管脚，同时为PCB的布局上节省空间，提供方便，主要应用在 EEPROM，FLASH，实时时钟，AD转换器，还有数字信号处理器和数字信号解码器之间。</p><p>SPI 时钟频率相比 I2C 要高很多，最高可以工作在上百 MHz。 SPI 以主从方式工作，通常是有一个主设备和一个或多个从设备，一般 SPI 需要 4 根线，但是也可以使用三根线(单向传输) 。</p><h3 id="_2-与i2c的对比" tabindex="-1">2. 与I2C的对比 <a class="header-anchor" href="#_2-与i2c的对比" aria-label="Permalink to &quot;2. 与I2C的对比&quot;">​</a></h3><table tabindex="0"><thead><tr><th>功能说明</th><th>SPI总线</th><th>I2C总线</th></tr></thead><tbody><tr><td>通信方式</td><td>同步 串行 全双工</td><td>同步 串行 半双工</td></tr><tr><td>通信速度</td><td>一般50MHz以下</td><td>100KHz、 400KHz、 3.4MHz</td></tr><tr><td>从设备选择</td><td>引脚片选</td><td>设备地址片选</td></tr><tr><td>总线接口</td><td>MOSI、 MISO、 SCK、 CS</td><td>SDA、 SCL</td></tr></tbody></table><p>SPI通常由四条线组成，一条主设备输出与从设备输入（ Master Output Slave Input， MOSI） ， 一条主设备输入与从设备输出（ Master Input Slave Output， MISO） ， 一条时钟信号（ Serial Clock， SCLK） ，一条从设备使能选择（ Chip Select， CS） 。 与I2C类似，协议都比较简单，也可以使用GPIO模拟SPI时序。</p><p>SPI可以同时发出和接收数据，因此SPI的理论传输速度比I2C更快。 SPI通过片选引脚选择从机，一个片选一个从机，因此在多从机结构中，需要占用较多引脚，而I2C通过设备地址选择从机，只要设备地址不冲突，始终只需要两个引脚。</p><h2 id="二、基本原理简介" tabindex="-1">二、基本原理简介 <a class="header-anchor" href="#二、基本原理简介" aria-label="Permalink to &quot;二、基本原理简介&quot;">​</a></h2><img src="'+p+'" alt="image-20220923064422211" style="zoom:50%;"><ul><li>（1）SPI接口一般使用 4 条线通信：</li></ul><table tabindex="0"><thead><tr><th>接口名称</th><th>说明</th></tr></thead><tbody><tr><td>MISO</td><td>主设备数据输入，从设备数据输出</td></tr><tr><td>MOSI</td><td>主设备数据输出，从设备数据输入</td></tr><tr><td>SCLK</td><td>时钟信号，由主设备产生</td></tr><tr><td>CS</td><td>从设备片选信号，由主设备控制</td></tr></tbody></table><ul><li>（2）主机和从机都有一个串行移位寄存器，主机通过向它的SPI串行寄存器写入一个字节来发起一次传输。</li><li>（3）串行移位寄存器通过MOSI信号线将字节传送给从机，从机也将自己的串行移位寄存器中的内容通过MISO信号线返回给主机。这样，两个移位寄存器中的内容就被交换。</li><li>（4）外设的写操作和读操作是同步完成的。如果只进行写操作，主机只需忽略接收到的字节；反之，若主机要读取从机的一个字节，就必须发送一个空字节来引发从机的传输。</li></ul><h2 id="三、设备连接" tabindex="-1">三、设备连接 <a class="header-anchor" href="#三、设备连接" aria-label="Permalink to &quot;三、设备连接&quot;">​</a></h2><h3 id="_1-物理拓扑结构" tabindex="-1">1. 物理拓扑结构 <a class="header-anchor" href="#_1-物理拓扑结构" aria-label="Permalink to &quot;1. 物理拓扑结构&quot;">​</a></h3><p>SPI通信设备之间常见的连接方式如下图：</p><img src="'+t+'" alt="image-20220923065836425" style="zoom:50%;"><ul><li>CS( Slave Select)：从设备选择信号线，常称为片选信号线，也称为NSS、CS，以下用CS表示。</li></ul><p>当有多个SPI从设备与SPI主机相连时， 设备的其它信号线SCK、MOSI及MISO同时并联到相同的SPI总线上，即无论有多少个从设备，都共同只使用这3条总线； 而每个从设备都有独立的这一条CS信号线，本信号线独占主机的一个引脚，即有多少个从设备，就有多少条片选信号线。</p><p>I2C协议中通过设备地址来寻址、选中总线上的某个设备并与其进行通讯；而SPI协议中没有设备地址，它<strong>使用CS信号线来寻址</strong>， 当主机要选择从设备时，把该从设备的NSS信号线设置为低电平，该从设备即被选中，即片选有效， 接着主机开始与被选中的从设备进行SPI通讯。所以SPI通讯以CS线置低电平为开始信号，以CS线被拉高作为结束信号。</p><ul><li>SCK (Serial Clock)：时钟信号线，用于通讯数据同步</li></ul><p>它由通讯主机产生，决定了通讯的速率，不同的设备支持的最高时钟频率不一样， 如STM32的SPI时钟频率最大为 fpclk/2 ，两个设备之间通讯时，通讯速率受限于低速设备。</p><ul><li>MOSI (Master Output， Slave Input)：主设备输出/从设备输入引脚。</li></ul><p>主机的数据从这条信号线输出， 从机由这条信号线读入主机发送的数据，即这条线上数据的方向为主机到从机。</p><ul><li>MISO(Master Input,，Slave Output)：主设备输入/从设备输出引脚。</li></ul><p>主机从这条信号线读入数据， 从机的数据由这条信号线输出到主机，即在这条线上数据的方向为从机到主机。</p><h3 id="_2-数据交换" tabindex="-1">2. 数据交换 <a class="header-anchor" href="#_2-数据交换" aria-label="Permalink to &quot;2. 数据交换&quot;">​</a></h3><p>在SCK时钟周期的驱动下， MOSI和MISO同时进行，如下图所示，可以看作一个虚拟的环形拓扑结构。</p><img src="'+h+'" alt="image-20230502091928859" style="zoom:33%;"><p>主机和从机都有一个移位寄存器，主机移位寄存器数据经过MOSI将数据写入从机的移位寄存器，此时从机移位寄存器的数据也通过MISO传给了主机，实现了两个移位寄存器的数据交换。无论主机还是从机，发送和接收都是同时进行的，如同一个“环”。如果主机只对从机进行写操作，主机只需忽略接收的从机数据即可。如果主机要读取从机数据，需要主机发送一个空数据来引发从机发送数据。</p><h2 id="四、spi通信过程" tabindex="-1">四、SPI通信过程 <a class="header-anchor" href="#四、spi通信过程" aria-label="Permalink to &quot;四、SPI通信过程&quot;">​</a></h2><h3 id="_1-通信时序" tabindex="-1">1. 通信时序 <a class="header-anchor" href="#_1-通信时序" aria-label="Permalink to &quot;1. 通信时序&quot;">​</a></h3><p>这里的片选引脚用 NSS 表示了，它与CS是一个意思，前边有说明。</p><img src="'+e+'" alt="SPI通讯时序" style="zoom:50%;"><p>这是一个主机的通讯时序。NSS、SCK、MOSI信号都由主机控制产生，而MISO的信号由从机产生，主机通过该信号线读取从机的数据。 MOSI与MISO的信号只在NSS为低电平的时候才有效，在SCK的每个时钟周期MOSI和MISO传输一位数据。SPI通信<strong>发送是先发高字节再发低字节，接收是先收高字节再收低字节</strong>。</p><h3 id="_2-起始与停止信号" tabindex="-1">2. 起始与停止信号 <a class="header-anchor" href="#_2-起始与停止信号" aria-label="Permalink to &quot;2. 起始与停止信号&quot;">​</a></h3><p>SPI通信协议图中标号为 ① 和 ⑥ 的地方为起始和停止信号：</p><ul><li><p><strong>NSS信号线由高变低</strong>，是SPI通讯的起始信号。NSS是每个从机各自独占的信号线， 当从机在自己的NSS线检测到起始信号后，就知道自己被主机选中了，开始准备与主机通讯。</p></li><li><p><strong>NSS信号由低变高</strong>， 是SPI通讯的停止信号，表示本次通讯结束，从机的选中状态被取消。</p></li></ul><h3 id="_3-数据传输" tabindex="-1">3. 数据传输 <a class="header-anchor" href="#_3-数据传输" aria-label="Permalink to &quot;3. 数据传输&quot;">​</a></h3><p>SPI使用MOSI及MISO信号线来传输数据，使用SCK信号线进行数据同步。MOSI及MISO数据线在SCK的<strong>每个时钟周期传输一位数据</strong>， 且数据<strong>输入输出是同时进行</strong>的。数据传输时，MSB先行或LSB先行并没有作硬性规定，但要保证两个SPI通讯设备之间使用同样的协定， 一般都会采用图 SPI通讯时序中的MSB先行模式。<strong>SPI每次数据传输可以8位或16位为单位，每次传输的单位数不受限制</strong>。</p><p>图中的 ②、③、④、⑤标号处，MOSI及MISO的数据在SCK的上升沿期间变化输出，在SCK的下降沿时被采样。即在SCK的下降沿时刻， MOSI及MISO的数据有效，高电平时表示数据“1”，为低电平时表示数据“0”。在其它时刻，数据无效，MOSI和MISO为下一次传输数据做准备。</p><h3 id="_4-四种通信模式" tabindex="-1">4.四种通信模式 <a class="header-anchor" href="#_4-四种通信模式" aria-label="Permalink to &quot;4.四种通信模式&quot;">​</a></h3><h4 id="_4-1-cpol与cpha" tabindex="-1">4.1 CPOL与CPHA <a class="header-anchor" href="#_4-1-cpol与cpha" aria-label="Permalink to &quot;4.1 CPOL与CPHA&quot;">​</a></h4><p>SPI 有四种工作模式，通过串行时钟极性(CPOL)和相位(CPHA)的搭配来得到四种工作模式。</p><p>CPOL（ Clock Polarity，时钟极性） 表示SCK在空闲时（即SPI通讯开始前、 NSS线为高电平时SCK的状态）为高电平还是低电平。 当CPOL=0， SCK空闲时为低电平， 当CPOL=1， SCK空闲时为高电平。</p><p>CPHA（ Clock Phase，时钟相位） 表示SCK在第几个时钟边缘采样数据。 当CPHA=0， 在SCK第一个边沿采样数据，当CPHA=1， 在SCK第二个边沿采样数据。 也可以这样理解，时钟相位CPHA是指数据的采样的时刻，当CPHA=0时， MOSI或MISO数据线上的信号将会在SCK时钟线的“奇数边沿”被采样。当CPHA=1时，数据线在SCK的“偶数边沿”采样。 这样搭配下来就会有四种模式：</p><ul><li>CPOL=0，串行时钟空闲状态为低电平。</li><li>CPOL=1，串行时钟空闲状态为高电平，此时可以通过配置时钟相位(CPHA)来选择具体的传输协议。</li><li>CPHA=0，串行时钟的第一个跳变沿(上升沿或下降沿)采集数据。</li><li>CPHA=1，串行时钟的第二个跳变沿(上升沿或下降沿)采集数据。</li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">SPI模式</th><th style="text-align:center;">CPOL</th><th style="text-align:center;">CPHA</th><th style="text-align:center;">空闲时SCK时钟</th><th style="text-align:center;">采样时刻</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">低电平</td><td style="text-align:center;">奇数边沿</td><td>时钟空闲状态为低电平； 在时钟第一个边沿（上升沿） 采样数据</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">低电平</td><td style="text-align:center;">偶数边沿</td><td>时钟空闲状态为低电平； 在时钟第二个边沿（下降沿） 采样数据</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">高电平</td><td style="text-align:center;">奇数边沿</td><td>时钟空闲状态为高电平； 在时钟第一个边沿（下降沿） 采样数据</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">高电平</td><td style="text-align:center;">偶数边沿</td><td>时钟空闲状态为高电平； 在时钟第二个边沿（上升沿） 采样数据</td></tr></tbody></table><p>实际使用较多的是模式0和模式3。</p><h4 id="_4-2-cpha-0" tabindex="-1">4.2 CPHA = 0 <a class="header-anchor" href="#_4-2-cpha-0" aria-label="Permalink to &quot;4.2 CPHA = 0&quot;">​</a></h4><img src="'+k+'" alt="CPHA=0时的SPI通讯模式" style="zoom:50%;"><p>这是 CPHA=0 的时序图：</p><p>（1）首先，根据SCK在空闲状态时的电平，分为两种情况。 SCK信号线在空闲状态为低电平时，CPOL=0；空闲状态为高电平时，CPOL=1。</p><p>（2）无论CPOL=0还是1，由于我们配置的时钟相位CPHA=0，采样时刻都是在SCK的奇数边沿。 注意当CPOL=0的时候，时钟的奇数边沿是上升沿，而CPOL=1的时候，时钟的奇数边沿是下降沿，所以SPI的采样时刻不是由上升/下降沿决定的。 MOSI和MISO数据线的有效信号在SCK的奇数边沿保持不变，数据信号将在<strong>SCK奇数边沿时被采样</strong>，在非采样时刻，MOSI和MISO的有效信号才发生切换。</p><h4 id="_4-3-cpha-1" tabindex="-1">4.3 CPHA = 1 <a class="header-anchor" href="#_4-3-cpha-1" aria-label="Permalink to &quot;4.3 CPHA = 1&quot;">​</a></h4><img src="'+r+`" alt="CPHA=1时的SPI通讯模式" style="zoom:50%;"><p>（1）SCK信号线在空闲状态为低电平时， CPOL=0；空闲状态为高电平时， CPOL=1。</p><p>（2）与CPHA=0类似，当CPHA=1时，不受CPOL的影响，数据信号在<strong>SCK的偶数边沿被采样</strong>。MOSI和MISO数据线的有效信号在SCK的偶数边沿保持不变，数据信 号将在SC<strong>K偶数边沿时被采样</strong>，在非采样时刻， MOSI和MISO的有效信号才发生切换。</p><h2 id="五、模拟spi" tabindex="-1">五、模拟SPI <a class="header-anchor" href="#五、模拟spi" aria-label="Permalink to &quot;五、模拟SPI&quot;">​</a></h2><p>我们已经了解了SPI的通信协议，那么我们接下来来了解一下如何用软件模拟SPI协议，以加深对SPI协议的理解。这里通过STM32驱动W25QXX为例，做基础的初始化和定义（基于HAL库），不过这里只实现SPI并不做对W25QXX读写的说明。</p><h3 id="_1-gpio选择与引脚定义" tabindex="-1">1. GPIO选择与引脚定义 <a class="header-anchor" href="#_1-gpio选择与引脚定义" aria-label="Permalink to &quot;1. GPIO选择与引脚定义&quot;">​</a></h3><h4 id="_1-1-宏定义" tabindex="-1">1.1 宏定义 <a class="header-anchor" href="#_1-1-宏定义" aria-label="Permalink to &quot;1.1 宏定义&quot;">​</a></h4><p>首先定义SPI传输涉及的四个引脚PA4、 PA5、 PA6、 PA7， 其中MISO（ PA6）为输入引脚，其它全为输出引脚</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             SPI1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()                </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__HAL_RCC_SPI1_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx_SCK_GPIO_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()       </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__HAL_RCC_GPIOA_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx_MISO_GPIO_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()      </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__HAL_RCC_GPIOA_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx_MOSI_GPIO_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()      </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__HAL_RCC_GPIOA_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> W25_CS_GPIO_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()         </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__HAL_RCC_GPIOA_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx_FORCE_RESET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()               </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__HAL_RCC_SPI1_FORCE_RESET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx_RELEASE_RESET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()             </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__HAL_RCC_SPI1_RELEASE_RESET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx_SCK_PIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     GPIO_PIN_5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx_SCK_GPIO_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               GPIOA</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx_MISO_PIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    GPIO_PIN_6</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx_MISO_GPIO_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              GPIOA</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx_MOSI_PIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    GPIO_PIN_7</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPIx_MOSI_GPIO_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              GPIOA</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> W25_CS_PIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                       GPIO_PIN_4               </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> W25_CS_GPIO_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 GPIOA    </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPI_CLK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                   </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAL_GPIO_WritePin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SPIx_SCK_GPIO_PORT, SPIx_SCK_PIN, level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GPIO_PIN_SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GPIO_PIN_RESET)                                    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPI_MISO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()                       </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAL_GPIO_ReadPin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SPIx_MISO_GPIO_PORT, SPIx_MISO_PIN)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPI_MOSI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAL_GPIO_WritePin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_PIN, level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GPIO_PIN_SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GPIO_PIN_RESET)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> W25_CS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                    </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAL_GPIO_WritePin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(W25_CS_GPIO_PORT, W25_CS_PIN, level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GPIO_PIN_SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GPIO_PIN_RESET)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="_1-2-gpio初始化" tabindex="-1">1.2 GPIO初始化 <a class="header-anchor" href="#_1-2-gpio初始化" aria-label="Permalink to &quot;1.2 GPIO初始化&quot;">​</a></h4><p>随后将四个GPIO引脚初始化，使能引脚时钟，设置输入/输出模式。 SCK、 MOSI、 CS引脚，始终为输出模式， MISO引脚为数据输入引脚， 始终为输入模式</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPI_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GPIO_InitTypeDef  GPIO_InitStruct;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    SPIx_SCK_GPIO_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    SPIx_MISO_GPIO_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    SPIx_MOSI_GPIO_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    W25_CS_GPIO_CLK_ENABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GPIO_InitStruct.Pin       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SPIx_SCK_PIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> W25_CS_PIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SPIx_MOSI_PIN;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GPIO_InitStruct.Mode      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPIO_MODE_OUTPUT_PP;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GPIO_InitStruct.Pull      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPIO_PULLUP;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GPIO_InitStruct.Speed     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPIO_SPEED_FREQ_LOW;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HAL_GPIO_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SPIx_SCK_GPIO_PORT, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GPIO_InitStruct);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // SCK CS MOSI为输出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GPIO_InitStruct.Pin       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SPIx_MISO_PIN;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GPIO_InitStruct.Mode      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPIO_MODE_INPUT;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GPIO_InitStruct.Speed     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPIO_SPEED_FREQ_LOW;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HAL_GPIO_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SPIx_MISO_GPIO_PORT, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GPIO_InitStruct);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // MISO为输入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    W25_CS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // CS初始化高</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    SPI_CLK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // CLK初始化低</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="_2-延时函数定义" tabindex="-1">2. 延时函数定义 <a class="header-anchor" href="#_2-延时函数定义" aria-label="Permalink to &quot;2. 延时函数定义&quot;">​</a></h3><p>我们既然是模拟SPI，那么就需要手动产生时钟，所以这里当然就需要延时函数啦：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPI_Delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()     </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">us_timer_delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>定时器实现的延时函数，延时时间为 t us，为了缩短时间，这里这是演示，所以就不写具体实现了，具体的我们可以使用定时器来实现us级延时。</p><h3 id="_3-spi读写函数" tabindex="-1">3. SPI读写函数 <a class="header-anchor" href="#_3-spi读写函数" aria-label="Permalink to &quot;3. SPI读写函数&quot;">​</a></h3><p>这里假设SPI主机工作在模式0，参考前面的SPI时序。</p><h4 id="_3-1-写一个字节" tabindex="-1">3.1 写一个字节 <a class="header-anchor" href="#_3-1-写一个字节" aria-label="Permalink to &quot;3.1 写一个字节&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  函数名：void SPI_WriteByte(uint8_t data)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  输入参数：data -&gt; 要写的数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  输出参数：无</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  返回值：无</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  函数作用：模拟SPI写一个字节</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPI_WriteByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将data最高位保存到temp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // data左移一位，将次高位变为最高位，用于下次取最高位；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_CLK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 拉低时钟，即空闲时钟为低电平， CPOL=0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_MOSI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(temp);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 根据temp值，设置MOSI引脚的电平</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_Delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 简单延时，可以定时器或延时函数实现</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_CLK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 拉高时钟， W25Q64只支持SPI模式0或1，即会在时钟上升沿采样MOSI数据 CPHA=0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_Delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    SPI_CLK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // 最后SPI发送完后，拉低时钟，进入空闲状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>第 13 - 23 行：SPI写1 Byte，循环8次，每次发送1 Bit。</p><h4 id="_3-2-读一个字节" tabindex="-1">3.2 读一个字节 <a class="header-anchor" href="#_3-2-读一个字节" aria-label="Permalink to &quot;3.2 读一个字节&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  函数名：uint8_t SPI_ReadByte(void)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  输入参数：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  输出参数：无</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  返回值：读到的数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  函数作用：模拟SPI读一个字节</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPI_ReadByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> read_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        read_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> read_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // “腾空” read_data 最低位， 8次循环后， read_data将高位在前</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_CLK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 拉低时钟，即空闲时钟为低电平；</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_Delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_CLK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 拉高时钟，此时从设备会发送数据，主机稍微延时一会，再读取MISO电平，得知传入数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_Delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SPI_MISO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            read_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> read_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    SPI_CLK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 最后SPI读取完后，拉低时钟，进入空闲状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> read_data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>第 13 - 25 行：SPI读1 Byte，循环8次，每次接收1 Bit。</p><h4 id="_3-3-读写一个字节" tabindex="-1">3.3 读写一个字节 <a class="header-anchor" href="#_3-3-读写一个字节" aria-label="Permalink to &quot;3.3 读写一个字节&quot;">​</a></h4><p>SPI传输可以看作一个虚拟的环形拓扑结构，即输入和输出同时进行。在前面“ SPI_WriteByte()”函数里，发送了1 Byte，也应该接收1 Byte，只是代码中忽略了接收引脚MISO的状态； 在前面“ SPI_ReadByte()”函数里，接收了1 Byte，也应该发送1 Byte，只是代码中忽略了发送引脚MOSI的内容。有些场景， SPI需要同时读写，因此还需要编写SPI同时读写函数，</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  函数名：uint8_t SPI_WriteReadByte(uint8_t data)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  输入参数：pdata -&gt; 要写的一个字节数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  输出参数：无</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  返回值：读到的数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  函数作用：模拟SPI读写一个字节</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPI_WriteReadByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> read_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将data最高位保存到temp；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  // data左移一位，将次高位变为最高位，用于下次取最高位；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        read_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> read_data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // “腾空” read_data最低位， 8次循环后， read_data将高位在前</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_CLK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 拉低时钟，即空闲时钟为低电平；</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_MOSI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(temp);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 根据temp值，设置MOSI引脚的电平</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_Delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();       </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_CLK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 拉高时钟，此时从设备会读取MOSI的数据，并写数据到MISO；</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SPI_Delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SPI_MISO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 读取MISO上的数据，保存到当前read_data最低位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            read_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> read_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    SPI_CLK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 最后SPI读写完后，拉低时钟，进入空闲状态；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> read_data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>第14 - 31行： SPI读和写1 Byte，循环8次，每次发送和接收1 Bit 。</p>`,85)])])}const F=i(E,[["render",d]]);export{P as __pageData,F as default};
