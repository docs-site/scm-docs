import{_ as e,c as t,o as s,b0 as C}from"./chunks/framework.C5ev1SXp.js";const o="/scm-docs/assets/image-20240114135116438.oz9pGCYl.png",i="/scm-docs/assets/image-20240114135337175.DRIgu1pU.png",r="/scm-docs/assets/image-20240114135554229.FccHxuvZ.png",c="/scm-docs/assets/image-20240114135642122.DB686Cks.png",M="/scm-docs/assets/image-20240114135729474.ABWKhH4p.png",p="/scm-docs/assets/image-20240114135824475.CLnrrCqy.png",l="/scm-docs/assets/image-20240114135859501.Df2G9feI.png",h=JSON.parse('{"title":"LV090-高级定时器PWM输入","description":null,"frontmatter":{"title":"LV090-高级定时器PWM输入","date":"2025-09-21T18:48:05.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/peripheral/timer/126b08f6ae2512a51a9eec42","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-21T18:48:05.298Z","fulluuid":"51a9eec423e4412c99aa8247ccd2092d","useduuid":"51a9eec42"}},"headers":[],"relativePath":"sdoc/peripheral/timer/126b08f6ae2512a51a9eec42.md","filePath":"sdoc/20-基本外设篇/15-定时器/LV090-高级定时器PWM输入.md","lastUpdated":1758153691000}'),m={name:"sdoc/peripheral/timer/126b08f6ae2512a51a9eec42.md"};function _(n,a,d,I,P,x){return s(),t("div",null,[...a[0]||(a[0]=[C('<h1 id="lv090-高级定时器pwm输入" tabindex="-1">LV090-高级定时器PWM输入 <a class="header-anchor" href="#lv090-高级定时器pwm输入" aria-label="Permalink to &quot;LV090-高级定时器PWM输入&quot;">​</a></h1><p>本小节我们来学习使用高级定时器 PWM 输入模式， 此模式是输入捕获模式的一个特例。PWM 输入模式经常被应用于测量 PWM 脉宽和频率。 PWM 输入模式在《STM32F10xxx 参考手册_V10（中文版） .pdf》 手册 216 页有详细的文字描述。</p><h2 id="一、工作原理" tabindex="-1">一、工作原理 <a class="header-anchor" href="#一、工作原理" aria-label="Permalink to &quot;一、工作原理&quot;">​</a></h2><img src="'+o+'" alt="image-20240114135116438" style="zoom:50%;"><p>第一，确定定时器时钟源。本实验中我们使用内部时钟（CK_INT）， F1 系列高级定时器挂载在 APB2 总线上，按照 sys_stm32_clock_init 函数的配置， 定时器时钟频率等于 APB2 总线时钟频率，即 72MHz。计数器的计数频率确定了测量的精度。</p><p>第二，确定 PWM 输入的通道。 PWM 输入模式下测量 PWM， PWM 信号输入只能从通道1（CH1）或者通道 2（CH2）输入。</p><p>第三，确定 IC1 和 IC2 的捕获边沿。这里以通道 1（CH1）输入 PWM 为例，一般我们习惯设置 IC1 捕获边沿为上升沿捕获， IC2 捕获边沿为下降沿捕获。</p><p>第四，选择触发输入信号（TRGI）。这里也是以通道 1（CH1）输入 PWM 为例，那么我们就应该选择 TI1FP1 为触发输入信号。如果是通道 2（CH2）输入 PWM，那就选择 TI2FP2 为触发输入信号。可以看到这里并没有对应通道 3（CH3）或者通道 4（CH4）的触发输入信号，所 以我们只选择通道 1 或者通道 2 作为 PWM 输入的通道。</p><p>第五，从模式选择：复位模式。复位模式的作用是：在出现所选触发输入 (TRGI) 上升沿时，重新初始化计数器并生成一个寄存器更新事件。</p><p>第六，读取一个 PWM 周期内计数器的计数个数，以及高电平期间的计数个数，再结合计数器的计数周期（即计一个数的时间），最终通过计算得到输入的 PWM 周期和占空比等参数。以通道 1（CH1）输入 PWM，设置 IC1 捕获边沿为上升沿捕获， IC2 捕获边沿为下降沿捕获为例，那么CCR1 寄存器的值+1 就是 PWM 周期内计数器的计数个数， CCR2 寄存器的值+1 就是PWM 高电平期间计数器的计数个数。通过这两个值就可以计算出 PWM 的周期或者占空比等参数。</p><p>以通道 1（CH1）输入 PWM，设置 IC1 捕获边沿为下降沿捕获， IC2 捕获边沿为上升沿捕获为例，那么 CCR1 寄存器的值+1 依然是 PWM 周期内计数器的计数个数，但是CCR2 寄存器的值+1 就是 PWM 低电平期间计数器的计数个数。通过这两个得到的参数依然可以计算出 PWM 的其它参数。一般我们使用第六介绍的例子。</p><p>下面我们结合 PWM 输入模式时序来分析一下。 PWM输入模式时序图如图：</p><img src="'+i+'" alt="image-20240114135337175" style="zoom:33%;"><p>上图是以通道 1（CH1）输入 PWM，设置 IC1 捕获边沿为上升沿捕获， IC2 捕获边沿为下降沿捕获为例的 PWM 输入模式时序图。</p><p>从时序图可以看出，计数器的计数模式是递增计数模式。从左边开始看， 当 TI1 来了上升沿时，计数器的值被复位为 0（原因是从模式选择为复位模式）， IC1 和 IC2 都发生捕获事件。然后计数器的值计数到 2 的时候， IC2 发生了下降沿捕获，捕获事件会导致这时候的计数器的值被锁存到 CCR2 寄存器中，该值+1 就是高电平期间计数器的计数个数。最后计数器的值计数到 4 的时候， IC1 发生了上升沿捕获，捕获事件会导致这时候的计数器的值被锁存到 CCR1 寄存器中，该值+1 就是 PWM 周期内计数器的计数个数。</p><p>假设计数器的计数频率是 72MHz，那我们就可以计算出这个 PWM 的周期、频率和占空比等参数了。下面就以这个为例计算一下。由计数器的计数频率为 72MHz，可以得到计数器计一个数的时间是 13.8ns（即测量的精度是 13.8ns）。知道了测量精度，再来计算 PWM 的周期， PWM 周期 =(4+1)*(1/72000000) = 69.4ns，那么 PWM 的频率就是 14.4MHz。占空比 =(2+1)/(4+1) =3/5（即占空比为 60%）。</p><h2 id="二、相关寄存器" tabindex="-1">二、相关寄存器 <a class="header-anchor" href="#二、相关寄存器" aria-label="Permalink to &quot;二、相关寄存器&quot;">​</a></h2><p>高级定时器 PWM 输入模式实验除了用到定时器的时基单元：计数器寄存器(TIMx_CNT)、预分频器寄存器(TIMx_PSC)、自动重载寄存器(TIMx_ARR) 之外，还会用到一些寄存器，这里我们了解一下。</p><h3 id="_1-从模式控制寄存器-timx-smcr" tabindex="-1">1. 从模式控制寄存器（TIMx_SMCR） <a class="header-anchor" href="#_1-从模式控制寄存器-timx-smcr" aria-label="Permalink to &quot;1. 从模式控制寄存器（TIMx_SMCR）&quot;">​</a></h3><p>TIM1/TIM8 的从模式控制寄存器描述如图：</p><img src="'+r+'" alt="image-20240114135554229" style="zoom:50%;"><p>该寄存器的 SMS[2:0]位，用于从模式选择。比如在本实验中我们需要用到复位模式，所以设置 SMS[2:0]=100。 TS[2:0]位是触发选择，我们设置为滤波后的定时器输入 1 (TI1FP1)，即TS[2:0]为 101。</p><h3 id="_2-捕获-比较模式寄存器-1-2-timx-ccmr1-2" tabindex="-1">2. 捕获/比较模式寄存器 1/2（TIMx_CCMR1/2） <a class="header-anchor" href="#_2-捕获-比较模式寄存器-1-2-timx-ccmr1-2" aria-label="Permalink to &quot;2. 捕获/比较模式寄存器 1/2（TIMx_CCMR1/2）&quot;">​</a></h3><p>TIM1/TIM8 的捕获/比较模式寄存器（ TIMx_CCMR1/2），该寄存器一般有 2 个：TIMx_CCMR1 和 TIMx _CCMR2。TIMx_CCMR1 控制 CH1 和 CH2，而 TIMx_CCMR2 控制 CH3和 CH4。 TIMx_CCMR1 寄存器描述如图：</p><img src="'+c+'" alt="image-20240114135642122" style="zoom:50%;"><p>该寄存器的有些位在不同模式下，功能不一样，我们现在用到输入捕获模式。关于该寄存器的详细说明，可以参考《STM32F10xxx 参考手册_V10（中文版） .pdf》 第 240 页， 13.4.7 节。本实验我们通过定时器 1 通道 1 输入 PWM 信号，所以 IC1 和 IC2 都映射到 TI1 上。配置 CC1S[1:0]=01、 CC2S [1:0]=10， 其他位不用设置，默认为 0 即可。</p><h3 id="_3-捕获-比较使能寄存器-timx-ccer" tabindex="-1">3. 捕获/比较使能寄存器（TIMx_ CCER） <a class="header-anchor" href="#_3-捕获-比较使能寄存器-timx-ccer" aria-label="Permalink to &quot;3. 捕获/比较使能寄存器（TIMx_ CCER）&quot;">​</a></h3><p>TIM1/TIM8 的捕获/比较使能寄存器，该寄存器控制着各个输入输出通道的开关和极性。TIMx_CCER 寄存器描述如图：</p><img src="'+M+'" alt="image-20240114135729474" style="zoom:50%;"><p>IC1 捕获上升沿，所以 CC1P 位置 0，即捕获发生在 IC1 的上升沿。 IC2 捕获下降沿，所以CC2P 位置 1，即捕获发生在 IC1 的下降沿。设置好捕获边沿后，还需要使能这两个通道捕获，即 CC1E 和 CC2E 位置 1。</p><h3 id="_4-捕获-比较寄存器-1-2-3-4-timx-ccr1-2-3-4" tabindex="-1">4. 捕获/比较寄存器 1/2/3/4（TIMx_CCR1/2/3/4） <a class="header-anchor" href="#_4-捕获-比较寄存器-1-2-3-4-timx-ccr1-2-3-4" aria-label="Permalink to &quot;4. 捕获/比较寄存器 1/2/3/4（TIMx_CCR1/2/3/4）&quot;">​</a></h3><p>捕获/比较寄存器（TIMx_CCR1/2/3/4），该寄存器总共有 4 个，对应 4 个通道 CH1~CH4。我们使用的是通道 1，所以来看看 TIMx_CCR1 寄存器描述如图：</p><img src="'+p+'" alt="image-20240114135824475" style="zoom:50%;"><p>本实验中， CCR1 寄存器用于获取 PWM 周期内计数器的计数个数。 CCR2 寄存器用于获取PWM 高电平期间计数器的计数个数。</p><h3 id="_5-dma-中断使能寄存器-timx-dier" tabindex="-1">5. DMA/中断使能寄存器（TIMx_DIER） <a class="header-anchor" href="#_5-dma-中断使能寄存器-timx-dier" aria-label="Permalink to &quot;5. DMA/中断使能寄存器（TIMx_DIER）&quot;">​</a></h3><p>DMA/中断使能寄存器描述如图 ：</p><img src="'+l+'" alt="image-20240114135859501" style="zoom:50%;"><p>该寄存器位 0（UIE）用于使能或者禁止更新中断，因为本实验我们用到更新中断，所以该位需要置 1。位 1（CC1IE）用于使能或者禁止捕获/比较 1 中断，我们用到捕获中断，所以该位需要置 1。</p>',38)])])}const W=e(m,[["render",_]]);export{h as __pageData,W as default};
