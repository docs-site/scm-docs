import{_ as i,c as d,o as s,b0 as e}from"./chunks/framework.C5ev1SXp.js";const r="/scm-docs/assets/image-20230510194931239.DYNhphfb.png",l="/scm-docs/assets/image-20230512071810158.BdUCDWMH.png",h="/scm-docs/assets/image-20230510211833918.BhsRYf_u.png",p="/scm-docs/assets/image-20230510212155886.BXDwsFNS.png",n="/scm-docs/assets/image-20230510214259366.DWD47v9K.png",o="/scm-docs/assets/image-20230510214551994.BmhA0reu.png",c="/scm-docs/assets/image-20230510214702846.CPqLMx3r.png",_="/scm-docs/assets/image-20230510215003169.DBH1PyXu.png",D="/scm-docs/assets/image-20230510215042811.rmJWmOX5.png",S="/scm-docs/assets/image-20230510215143920.Bxmtxj7z.png",C="/scm-docs/assets/image-20230510220131450.sE47w1Fj.png",m="/scm-docs/assets/image-20230510220616487.hKk_em1p.png",k="/scm-docs/assets/image-20230510220940937.BVNaxUeQ.png",f="/scm-docs/assets/image-20230510221021370.CAfD8etN.png",g="/scm-docs/assets/image-20230510221102516.DHdfPA3I.png",b="/scm-docs/assets/image-20230510221722806.BiCroqOO.png",y="/scm-docs/assets/image-20230510222129117.BstaHYoz.png",u="/scm-docs/assets/image-20230510222239890.B0WOMgOw.png",M="/scm-docs/assets/image-20230510222255985.BnoEc_qo.png",a="/scm-docs/assets/image-20230510222326770.mNepjH9x.png",P="/scm-docs/assets/image-20230510222425522.CwQWfSxV.png",q="/scm-docs/assets/image-20230510222518271.3dh_kRYv.png",A="/scm-docs/assets/image-20230510222627687.zprZ9q-g.png",R="/scm-docs/assets/image-20230511070742199.BOoz7Bj2.png",E="/scm-docs/assets/image-20230511065559668.DBM53GJj.png",I=JSON.parse('{"title":"LV015-SD卡的操作","description":null,"frontmatter":{"title":"LV015-SD卡的操作","date":"2025-09-27T10:37:45.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/peripheral/sdio/126b0950ff013d660d235356","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-27T10:37:45.982Z","fulluuid":"60d235356a8a41c6b5be0b1b1d22ed03","useduuid":"60d235356"}},"headers":[],"relativePath":"sdoc/peripheral/sdio/126b0950ff013d660d235356.md","filePath":"sdoc/20-基本外设篇/50-SDIO/LV015-SD卡的操作.md","lastUpdated":1758811394000}'),F={name:"sdoc/peripheral/sdio/126b0950ff013d660d235356.md"};function x(L,t,w,B,V,N){return s(),d("div",null,[...t[0]||(t[0]=[e('<h1 id="lv015-sd卡的操作" tabindex="-1">LV015-SD卡的操作 <a class="header-anchor" href="#lv015-sd卡的操作" aria-label="Permalink to &quot;LV015-SD卡的操作&quot;">​</a></h1><h2 id="一、sd卡命令" tabindex="-1">一、SD卡命令 <a class="header-anchor" href="#一、sd卡命令" aria-label="Permalink to &quot;一、SD卡命令&quot;">​</a></h2><p>SD命令由主机发出，以广播命令和寻址命令为例，广播命令是针对与SD主机总线连接的所有从设备发送的，寻址命令是指定某个地址设备进行命令传输。这一章的内容我们可以参考文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的 4.7 Commands 章节。</p><h3 id="_1-命令格式" tabindex="-1">1. 命令格式 <a class="header-anchor" href="#_1-命令格式" aria-label="Permalink to &quot;1. 命令格式&quot;">​</a></h3><p>SD命令格式固定为48bit，都是通过CMD线连续传输的， 数据线不参与。</p><img src="'+r+'" alt="image-20230510194931239" style="zoom:50%;"><p>SD命令的组成如下：</p><p>（1）起始位和终止位：命令的主体包含在起始位与终止位之间，它们都只包含一个数据位，起始位为0，终止位为1。</p><p>（2）传输标志：用于区分传输方向，该位为1时表示命令，方向为主机传输到SD卡，该位为0时表示响应，方向为SD卡传输到主机。</p><p>（3）命令主体内容： 命令主体内容包括命令、地址信息/参数和CRC校验三个部分。</p><blockquote><p>命令主体内容的三个部分说明如下：</p><p>命令号：它固定占用6bit，所以总共有64个命令(代号：CMD0~CMD63)，每个命令都有特定的用途，部分命令不适用于SD卡操作，只是专门用于MMC卡或者SD I/O卡。</p><p>地址/参数：每个命令有32bit地址信息/参数用于命令附加内容，例如，广播命令没有地址信息，这32bit用于指定参数，而寻址命令这32bit用于指定目标SD卡的地址。</p><p>CRC7校验：长度为7bit的校验位用于验证命令传输内容正确性，如果发生外部干扰导致传输数据个别位状态改变将导致校准失败，也意味着命令传输失败， SD卡不执行命令。</p></blockquote><h3 id="_2-命令类型" tabindex="-1">2. 命令类型 <a class="header-anchor" href="#_2-命令类型" aria-label="Permalink to &quot;2. 命令类型&quot;">​</a></h3><p>SD命令有4种类型：</p><p>（1）无响应广播命令(bc)，发送到所有卡，不返回任务响应；</p><p>（2）带响应广播命令(bcr)，发送到所有卡，同时接收来自所有卡响应；</p><p>（3）寻址命令(ac)，发送到选定卡， DAT线无数据传输；</p><p>（4）寻址数据传输命令(adtc)，发送到选定卡， DAT线有数据传输。</p><p>另外， SD卡主机模块系统旨在为各种应用程序类型提供一个标准接口。在此环境中，需要有特定的客户/应用程序功能。为实现这些功能，在标准中定义了两种类型的通用命令： <strong>特定应用命令(ACMD)和常规命令(GEN_CMD)</strong>。 要使用SD卡制造商特定的ACMD命令如ACMD6，需要在发送该命令之前无发送CMD55命令，告知SD卡接下来的命令为特定应用命令。 CMD55命令只对紧接的第一个命令有效，SD卡如果检测到CMD55之后的第一条命令为ACMD则执行其特定应用功能，如果检测发现不是ACMD命令，则执行标准命令。</p><h3 id="_3-命令描述" tabindex="-1">3. 命令描述 <a class="header-anchor" href="#_3-命令描述" aria-label="Permalink to &quot;3. 命令描述&quot;">​</a></h3><p>接下来我们来学习一下SD卡部分命令信息，更多详细信息可以参考SD简易规格文件说明，表中填充位和保留位都必须被设置为0。这一部分详细可以参考文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的 4.7.4 Detailed command Description 一节。注意后边列举命令的时候是将保留的命令给去掉了。</p><h4 id="_3-1-基本命令-class-0" tabindex="-1">3.1 基本命令(Class 0) <a class="header-anchor" href="#_3-1-基本命令-class-0" aria-label="Permalink to &quot;3.1 基本命令(Class 0)&quot;">​</a></h4><table tabindex="0"><thead><tr><th>命令序号</th><th>类型</th><th>参数</th><th>响应</th><th>缩写</th><th>描述</th></tr></thead><tbody><tr><td>CMD0</td><td>bc</td><td>[31:0]填充位</td><td>-</td><td>GO_IDLE_STATE</td><td>复位所有的卡到idle状态。</td></tr><tr><td>CMD2</td><td>bcr</td><td>[31:0]填充位</td><td>R2</td><td>ALL_SEND_CID</td><td>通知所有卡通过CMD线返回CID值。</td></tr><tr><td>CMD3</td><td>bcr</td><td>[31:0]填充位</td><td>R6</td><td>SEND_RELATIVE_ADDR</td><td>通知所有卡发布新RCA。</td></tr><tr><td>CMD4</td><td>bc</td><td>[31:16]DSR[15:0]填充位</td><td>-</td><td>SET_DSR</td><td>编程所有卡的DSR。</td></tr><tr><td>CMD7</td><td>ac</td><td>[31:16]RCA[15:0]填充位</td><td>R1b</td><td>SELECT/DESELECT_CARD</td><td>选择/取消选择RCA地址卡。</td></tr><tr><td>CMD8</td><td>bcr</td><td>[31:12]保留位[11:8]VHS[7:0]检查模式</td><td>R7</td><td>SEND_IF_COND</td><td>发送SD卡接口条件， 包含主机支持的电压信息， 并询问卡是否支持。</td></tr><tr><td>CMD9</td><td>ac</td><td>[31:16]RCA[15:0]填充位</td><td>R2</td><td>SEND_CSD</td><td>选定卡通过CMD线发送CSD内容</td></tr><tr><td>CMD10</td><td>ac</td><td>[31:16]RCA[15:0]填充位</td><td>R2</td><td>SEND_CID</td><td>选定卡通过CMD线发送CID内容</td></tr><tr><td>CMD12</td><td>ac</td><td>[31:0]填充位</td><td>R1b</td><td>STOP_TRANSMISSION</td><td>强制卡停止传输</td></tr><tr><td>CMD13</td><td>ac</td><td>[31:16]RCA[15:0]填充位</td><td>R1</td><td>SEND_STATUS</td><td>选定卡通过CMD线发送它状态寄存器</td></tr><tr><td>CMD15</td><td>ac</td><td>[31:16]RCA[15:0]填充位</td><td>-</td><td>GO_INACTIVE_STATE</td><td>使选定卡进入“inactive” 状态</td></tr></tbody></table><h4 id="_3-2-面向块的读操作-class-2" tabindex="-1">3.2 面向块的读操作(Class 2) <a class="header-anchor" href="#_3-2-面向块的读操作-class-2" aria-label="Permalink to &quot;3.2 面向块的读操作(Class 2)&quot;">​</a></h4><table tabindex="0"><thead><tr><th>命令序号</th><th>类型</th><th>参数</th><th>响应</th><th>缩写</th><th>描述</th></tr></thead><tbody><tr><td>CMD16</td><td>ac</td><td>[31:0]块长度</td><td>R1</td><td>SET_BLOCK_LEN</td><td>对于标准SD卡， 设置块命令的长度， 对于SDHC卡块命令长度固定为512字节。</td></tr><tr><td>CMD17</td><td>adtc</td><td>[31:0]数据地址</td><td>R1</td><td>READ_SINGLE_BLOCK</td><td>对于标准卡， 读取SEL_BLOCK_LEN长度字节的块；对于SDHC卡， 读取512字 节的块。</td></tr><tr><td>CMD18</td><td>adtc</td><td>[31:0]数据地址</td><td>R1</td><td>READ_MULTIPLE_BLOCK</td><td>连续从SD卡读取数据块， 直到被CMD12中断。 块长度同CMD17。</td></tr></tbody></table><h4 id="_3-3-面向块的写操作-class-4" tabindex="-1">3.3 面向块的写操作(Class 4) <a class="header-anchor" href="#_3-3-面向块的写操作-class-4" aria-label="Permalink to &quot;3.3 面向块的写操作(Class 4)&quot;">​</a></h4><table tabindex="0"><thead><tr><th>命令序号</th><th>类型</th><th>参数</th><th>响应</th><th>缩写</th><th>描述</th></tr></thead><tbody><tr><td>CMD24</td><td>adtc</td><td>[31:0]数据地址</td><td>R1</td><td>WRITE_BLOCK</td><td>对于标准卡， 写入SEL_BLOCK_LEN长度字节的块；对于SDHC卡， 写入512字 节的块。</td></tr><tr><td>CMD25</td><td>adtc</td><td>[31:0]数据地址</td><td>R1</td><td>WRITE_MILTIPLE_BLOCK</td><td>连续向SD卡写入数据块， 直到被CMD12中断。 每块长度同CMD17。</td></tr><tr><td>CMD27</td><td>adtc</td><td>[31:0]填充位</td><td>R1</td><td>PROGRAM_CSD</td><td>对CSD的可编程位进行编程</td></tr></tbody></table><h4 id="_3-4-擦除命令-class-5" tabindex="-1">3.4 擦除命令(Class 5) <a class="header-anchor" href="#_3-4-擦除命令-class-5" aria-label="Permalink to &quot;3.4 擦除命令(Class 5)&quot;">​</a></h4><table tabindex="0"><thead><tr><th>命令序号</th><th>类型</th><th>参数</th><th>响应</th><th>缩写</th><th>描述</th></tr></thead><tbody><tr><td>CMD32</td><td>ac</td><td>[31:0]数据地址</td><td>R1</td><td>ERASE_WR_BLK_START</td><td>设置擦除的起始块地址</td></tr><tr><td>CMD33</td><td>ac</td><td>[31:0]数据地址</td><td>R1</td><td>ERASE_WR_BLK_END</td><td>设置擦除的结束块地址</td></tr><tr><td>CMD38</td><td>ac</td><td>[31:0]填充位</td><td>R1b</td><td>ERASE</td><td>擦除预先选定的块</td></tr></tbody></table><h4 id="_3-5-加锁命令-class-7" tabindex="-1">3.5 加锁命令(Class 7) <a class="header-anchor" href="#_3-5-加锁命令-class-7" aria-label="Permalink to &quot;3.5 加锁命令(Class 7)&quot;">​</a></h4><table tabindex="0"><thead><tr><th>命令序号</th><th>类型</th><th>参数</th><th>响应</th><th>缩写</th><th>描述</th></tr></thead><tbody><tr><td>CMD42</td><td>adtc</td><td>[31:0]保留</td><td>R1</td><td>LOCK_UNLOCK</td><td>加锁/解锁SD卡</td></tr></tbody></table><h4 id="_3-6-特定应用命令-class-8" tabindex="-1">3.6 特定应用命令(Class 8) <a class="header-anchor" href="#_3-6-特定应用命令-class-8" aria-label="Permalink to &quot;3.6 特定应用命令(Class 8)&quot;">​</a></h4><table tabindex="0"><thead><tr><th>命令序号</th><th>类型</th><th>参数</th><th>响应</th><th>缩写</th><th>描述</th></tr></thead><tbody><tr><td>CMD55</td><td>ac</td><td>[31:16]RCA[15:0]填充位</td><td>R1</td><td>APP_CMD</td><td>指定下个命令为特定应用命令， 不是标准命令</td></tr><tr><td>CMD56</td><td>adtc</td><td>[31:1]填充位[0]读/写</td><td>R1</td><td>GEN_CMD</td><td>通用命令， 或者特定应用命令中， 用于传输一个数据块， 最低位为1表示读数据 ， 为0表示写数据</td></tr></tbody></table><h4 id="_3-7-sd卡特定应用命令" tabindex="-1">3.7 SD卡特定应用命令 <a class="header-anchor" href="#_3-7-sd卡特定应用命令" aria-label="Permalink to &quot;3.7 SD卡特定应用命令&quot;">​</a></h4><table tabindex="0"><thead><tr><th>命令序号</th><th>类型</th><th>参数</th><th>响应</th><th>缩写</th><th>描述</th></tr></thead><tbody><tr><td>ACMD6</td><td>ac</td><td>[31:2]填充位[1:0]总线宽度</td><td>R1</td><td>SET_BUS_WIDTH</td><td>定义数据总线宽度(&#39;00&#39;=1bit,&#39;10&#39;=4bit)。</td></tr><tr><td>ACMD13</td><td>adtc</td><td>[31:0]填充位</td><td>R1</td><td>SD_STATUS</td><td>发送SD状态</td></tr><tr><td>ACMD41</td><td>bcr</td><td>[32]保留位[30]HCS(OCR[30]) [29:24]保留 位[23:0]VDD电压(OCR[23:0])</td><td>R3</td><td>SD_SEND_OP_COND</td><td>主机要求卡发送它的支持信息(HCS)和OCR寄存器内容。</td></tr><tr><td>ACMD51</td><td>adtc</td><td>[31:0]填充位</td><td>R1</td><td>SEND_SCR</td><td>读取配置寄存器SCR</td></tr></tbody></table><h2 id="二、sd卡响应" tabindex="-1">二、SD卡响应 <a class="header-anchor" href="#二、sd卡响应" aria-label="Permalink to &quot;二、SD卡响应&quot;">​</a></h2><p>关于响应这一部分，我们可以参考文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的 4.9 Responses一节。</p><h3 id="_1-响应简介" tabindex="-1">1. 响应简介 <a class="header-anchor" href="#_1-响应简介" aria-label="Permalink to &quot;1. 响应简介&quot;">​</a></h3><p>响应由SD卡向主机发出，部分命令要求SD卡作出响应，这些响应多用于反馈SD卡的状态。 基本特性如下：</p><p>（1）总共有7个响应类型(代号： R1~R7)，其中SD卡没有R4、 R5类型响应。特定的命令对应有特定的响应类型，比如当主机发送CMD3命令时，可以得到响应R6。</p><p>（2）与命令一样， SD卡的响应也是通过CMD线连续传输的。</p><p>（3）根据响应内容大小可以分为短响应和长响应。短响应是48bit长度，只有R2类型是长响应，其长度为136bit。</p><p>（4）除了 R3 类型之外，其他响应都使用 CRC7 校验来校验，对于 R2 类型是使用 CID 和 CSD 寄存器内部 CRC7。</p><h3 id="_2-r1-正常响应命令" tabindex="-1">2. R1(正常响应命令) <a class="header-anchor" href="#_2-r1-正常响应命令" aria-label="Permalink to &quot;2. R1(正常响应命令)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>描述</th><th>起始位</th><th>传输位</th><th>命令号</th><th>卡状态</th><th>CRC7</th><th>终止位</th></tr></thead><tbody><tr><td>Bit</td><td>47</td><td>46</td><td>[45:40]</td><td>[39:8]</td><td>[7:1]</td><td>0</td></tr><tr><td>位宽</td><td>1</td><td>1</td><td>6</td><td>32</td><td>7</td><td>1</td></tr><tr><td>值</td><td>&quot;0&quot;</td><td>&quot;0&quot;</td><td>x</td><td>x</td><td>x</td><td>&quot;1&quot;</td></tr></tbody></table><p>如果有传输到卡的数据，那么在数据线可能有busy信号。</p><h3 id="_3-r2-cid-csd寄存器" tabindex="-1">3. R2(CID,CSD寄存器) <a class="header-anchor" href="#_3-r2-cid-csd寄存器" aria-label="Permalink to &quot;3. R2(CID,CSD寄存器)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>描述</th><th>起始位</th><th>传输位</th><th>保留</th><th>[127:1]</th><th>终止位</th></tr></thead><tbody><tr><td>Bit</td><td>135</td><td>134</td><td>[133:128]</td><td>127</td><td>0</td></tr><tr><td>位宽</td><td>1</td><td>1</td><td>6</td><td>x</td><td>1</td></tr><tr><td>值</td><td>&quot;0&quot;</td><td>&quot;0&quot;</td><td>&quot;111111&quot;</td><td>CID或者CSD寄存器[127:1]位的值</td><td>&quot;1&quot;</td></tr></tbody></table><p>CID寄存器内容作为CMD2和CMD10响应， CSD寄存器内容作为CMD9响应。</p><h3 id="_4-r3-ocr寄存器" tabindex="-1">4. R3(OCR寄存器) <a class="header-anchor" href="#_4-r3-ocr寄存器" aria-label="Permalink to &quot;4. R3(OCR寄存器)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>描述</th><th>起始位</th><th>传输位</th><th>保留</th><th>OCR寄存器</th><th>保留</th><th>终止位</th></tr></thead><tbody><tr><td>Bit</td><td>47</td><td>46</td><td>[45:40]</td><td>[39:8]</td><td>[7:1]</td><td>0</td></tr><tr><td>位宽</td><td>1</td><td>1</td><td>6</td><td>32</td><td>7</td><td>1</td></tr><tr><td>值</td><td>&quot;0&quot;</td><td>&quot;0&quot;</td><td>&quot;111111&quot;</td><td>x</td><td>&quot;1111111&quot;</td><td>&quot;1&quot;</td></tr></tbody></table><p>OCR寄存器的值作为ACMD41的响应。</p><h3 id="_5-r6-发布的rca寄存器响应" tabindex="-1">5. R6(发布的RCA寄存器响应) <a class="header-anchor" href="#_5-r6-发布的rca寄存器响应" aria-label="Permalink to &quot;5. R6(发布的RCA寄存器响应)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>描述</th><th>起始位</th><th>传输位</th><th>CMD3</th><th>RCA寄存器</th><th>卡状态位</th><th>CRC7</th><th>终止位</th></tr></thead><tbody><tr><td>Bit</td><td>47</td><td>46</td><td>[45:40]</td><td>[39:8]</td><td>[7:1]</td><td>0</td><td></td></tr><tr><td>位宽</td><td>1</td><td>1</td><td>6</td><td>16</td><td>16</td><td>7</td><td>1</td></tr><tr><td>值</td><td>&quot;0&quot;</td><td>&quot;0&quot;</td><td>&quot;000011&quot;</td><td>x</td><td>x</td><td>x</td><td>&quot;1&quot;</td></tr></tbody></table><p>专用于命令CMD3的响应。</p><h3 id="_6-r7-发布的rca寄存器响应" tabindex="-1">6. R7(发布的RCA寄存器响应) <a class="header-anchor" href="#_6-r7-发布的rca寄存器响应" aria-label="Permalink to &quot;6. R7(发布的RCA寄存器响应)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>描述</th><th>起始位</th><th>传输位</th><th>CMD8</th><th>保留</th><th>接收电压</th><th>检测模式</th><th>CRC7</th><th>终止位</th></tr></thead><tbody><tr><td>Bit</td><td>47</td><td>46</td><td>[45:40]</td><td>[39:20]</td><td>[19:16]</td><td>[15:8]</td><td>[7:1]</td><td>0</td></tr><tr><td>位宽</td><td>1</td><td>1</td><td>6</td><td>20</td><td>4</td><td>8</td><td>7</td><td>1</td></tr><tr><td>值</td><td>&quot;0&quot;</td><td>&quot;0&quot;</td><td>&quot;001000&quot;</td><td>&quot;00000h&quot;</td><td>x</td><td>x</td><td>x</td><td>&quot;1&quot;</td></tr></tbody></table><p>专用于命令CMD8的响应,返回卡支持电压范围和检测模式。</p><h2 id="三、sd卡状态" tabindex="-1">三、SD卡状态 <a class="header-anchor" href="#三、sd卡状态" aria-label="Permalink to &quot;三、SD卡状态&quot;">​</a></h2><p>这一部分我们可以参考文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的 4.10 Three Status Information of SD Memory Card 这一小节，有关SD卡状态的那部分在4.10.2 SD Status。</p><h3 id="_1-状态简介" tabindex="-1">1. 状态简介 <a class="header-anchor" href="#_1-状态简介" aria-label="Permalink to &quot;1. 状态简介&quot;">​</a></h3><p>这里以文档<a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver2.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver2.00.pdf&amp;e=EN_P1200" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v2.0</a>来说明吧，因为在9.0版本中多了一个状态，但是似乎并不是目前关注的重点，而在2.0版本中是定义了种状态区域：</p><p>卡状态：执行命令的错误和状态信息，在响应中标示。</p><p>SD 状态：512 位的扩展状态信息，支持 SD 卡的特定功能以及将来的应用特定功能。</p><h3 id="_2-卡状态" tabindex="-1">2. 卡状态 <a class="header-anchor" href="#_2-卡状态" aria-label="Permalink to &quot;2. 卡状态&quot;">​</a></h3><p>响应 R1 包含一个 32bit 的“卡状态”区域。这个区域用来传输卡的状态信息(可以被存在本地状态寄存器中)给主机。如果没有特别说明，这个状态总是同前一个命令相关。这里就不写了，具体可以查看 文档<a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver2.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver2.00.pdf&amp;e=EN_P1200" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v2.0</a> 的 4.10.1 Card Status一节。</p><h3 id="_3-sd状态" tabindex="-1">3. SD状态 <a class="header-anchor" href="#_3-sd状态" aria-label="Permalink to &quot;3. SD状态&quot;">​</a></h3><p>SD 状态包含了与 SD 卡属性功能相关的状态位，可能会用于将来特定的应用命令。SD状态的大小是一个 512bit 的数据块。这个寄存器的内容与16位CRC会通过 DAT 总线传递给主机。SD 状态会通过 DAT 总线发送给主机，作为 ACMD13(前面是 CMD55)的响应。ACMD13 只能在“transfer”模式发送给已选定的卡。卡状态结构体在下表描述。“类型”和“清除条件”使用的缩写和卡状态一样。这一部分也不详细写，具体可以查看 文档<a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver2.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver2.00.pdf&amp;e=EN_P1200" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v2.0</a> 的 4.10.2 SD Status一节。</p><h2 id="四、sd卡时钟控制" tabindex="-1">四、SD卡时钟控制 <a class="header-anchor" href="#四、sd卡时钟控制" aria-label="Permalink to &quot;四、SD卡时钟控制&quot;">​</a></h2><p>这一部分我们可以参考文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的 4.4 Clock Control 一节。</p><p>主机可以使用 SD 卡时钟信号来将卡改变到节电模式，或者控制总线上的数据流(避免不足或者超出的情况)。主机可以减小时钟频率，或者关闭时钟。比如，当主机带有 512Byte的数据缓存，却想要向 1kByte 的卡上写块。因此，为了保持连续的数据传输，从卡这边来看，卡的时钟需要在第一个 512Byte 后关闭时钟。然后主机会将另外 512Byte 数据填写到缓存中。当主机的写块的后半部分 ready 后，将会重启时钟，并继续发送数据。这样，卡就不会意识到数据传输的中断。</p><p>这里有一些限制，主机需要注意：</p><p>总线时钟可在任何时候改变(要小于最大数据传输频率和本规范定义的标示频率)，但是有个例外，那就是ACMD41(SD_APP_OP_COND)命令。当 ACMD41 发送后，主机应该执行下面的（1）和（2）两个步骤，直到卡变为 ready 状态。</p><p>（1）发送连续的时钟，频率在 100KHz~400KHz；</p><p>（2）如果主机想要停止时钟，通过 ACMD41 循环设置 busy 位，小于 50ms 间隔。</p><img src="'+l+'" alt="image-20230512071810158" style="zoom:50%;"><h2 id="五、sd卡操作模式及切换" tabindex="-1">五、SD卡操作模式及切换 <a class="header-anchor" href="#五、sd卡操作模式及切换" aria-label="Permalink to &quot;五、SD卡操作模式及切换&quot;">​</a></h2><p>这一部分我们可以参考文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的 4.2 Card ldentification Mode 和 4.3 Data Transfer Mode 两个小节。</p><h3 id="_1-操作模式" tabindex="-1">1. 操作模式 <a class="header-anchor" href="#_1-操作模式" aria-label="Permalink to &quot;1. 操作模式&quot;">​</a></h3><p>SD卡有多个版本， STM32控制器目前最高支持《Physical Layer Simplified Specification V2.0》定义的SD卡， STM32控制器对SD卡进行数据读写之前需要识别卡的种类： V1.0标准卡、 V2.0标准卡、 V2.0高容量卡或者不被识别卡。</p><p>SD卡系统(包括主机和SD卡)定义了两种操作模式： <strong>卡识别模式</strong>和<strong>数据传输模式</strong>。 在系统复位后，主机处于卡识别模式，寻找总线上可用的SDIO设备；同 时， SD卡也处于卡识别模式，直到被主机识别到，即当SD卡接收到SEND_RCA(CMD3)命令后， SD卡就会进入数据传输模式，而主机在总线上所有卡被识别后也进入数据传输模式。</p><h3 id="_2-不同模式下sd卡状态" tabindex="-1">2. 不同模式下SD卡状态 <a class="header-anchor" href="#_2-不同模式下sd卡状态" aria-label="Permalink to &quot;2. 不同模式下SD卡状态&quot;">​</a></h3><p>在每个操作模式下，SD卡都有几种状态， 通过命令控制实现卡状态的切换 ：</p><table><tbody><tr><td align="center" width="300px">操作模式</td><td align="center">SD卡状态</td></tr><tr><td align="left">无效模式(Inactive)</td><td align="left">无效状态(Inactive State)</td></tr><tr><td align="left" rowspan="3">卡识别模式(Card identification mode)</td><td align="left">空闲状态(Idle State)</td></tr><tr><td align="left">准备状态(Ready State)</td></tr><tr><td align="left">识别状态(Identification State)</td></tr><tr><td align="left" rowspan="6">数据传输模式(Data transfer mode)</td><td align="left">待机状态(Stand-by State)</td></tr><tr><td align="left">传输状态(Transfer State)</td></tr><tr><td align="left">发送数据状态(Sending-data State)</td></tr><tr><td align="left">接收数据状态(Receive-data State)</td></tr><tr><td align="left">编程状态(Programming State)</td></tr><tr><td align="left">断开连接状态(Disconnect State)</td></tr></tbody></table><h3 id="_3-卡识别模式" tabindex="-1">3. 卡识别模式 <a class="header-anchor" href="#_3-卡识别模式" aria-label="Permalink to &quot;3. 卡识别模式&quot;">​</a></h3><p>在卡识别模式下，主机会复位所有处于“卡识别模式”的SD卡，确认其工作电压范围，识别SD卡类型，并且获取SD卡的相对地址(卡相对地址较短，便于寻址)。在卡识别过程中，要求SD卡工作在识别时钟频率FOD的状态下。</p><img src="'+h+'" alt="image-20230510211833918" style="zoom:50%;"><p>（1）上电后，所有卡处于空闲状态，包括当前处于无效状态的卡，主机也可以发送GO_IDLE_STATE(CMD0)让所有卡软复位从而进入空闲状态，但当前处于无效状态的卡并不会复位。</p><p>（2）主机在开始与卡通信前，需要先确定双方在互相支持的电压范围内。 SD 卡有一个电压支持范围，主机当前电压必须在该范围可能才能与卡正常通信。 SEND_IF_COND(CMD8) 命令就是用于验证卡接口操作条件的 (主要是电压支持)。卡会根据命令的参数来检测操作条件匹配性，如果卡支持主机电压就产生响应，否则不响应。而主机则根据响应内容确定卡的电压匹配性。 CMD8 是 SD卡标准 V2.0 版本才有的新命令，所以如果主机有接收到响应，可以判断卡为 V2.0 或更高版本SD 卡(非MMC卡)。</p><p>（3）使用SD_SEND_OP_COND(ACMD41)命令识别或拒绝不匹配它的电压范围的卡。 并通过HCS位及其响应判断是SDSC还是SDHC卡。ACMD41 命令的VDD 电压参数用于设置主机支持电压范围，卡响应会返回卡支持的电压范围。对于对 CMD8有响应的卡，把 ACMD41 命令的 HCS 位设置为 1，可以测试卡的容量类型，如果卡响应的 CCS 位为 1 说明为高容量 SD 卡，否则为标准卡。卡在响应 ACMD41 之后进入准备状态，不响应 ACMD41的卡为不可用卡，进入无效状态。 ACMD41 是应用特定命令，发送该命令之前必须先发 CMD55。</p><p>（4）使用ALL_SEND_CID(CMD2) 来控制所有卡返回它们的卡识别号(CID)，处于准备状态的卡在发送CID之后就进入识别状态。</p><p>（5）主机 发送SEND_RELATIVE_ADDR(CMD3)命令，让卡自己推荐一个相对地址(RCA)并响应命令。这个RCA是16bit地址，而CID是128bit地址，使用RCA简化通信。</p><p>（6）卡在接收到CMD3并发出响应后就进入数据传输模式，并处于待机状态，主机在获取所有卡RCA之后也进入数据传输模式。</p><h3 id="_4-数据传输模式" tabindex="-1">4. 数据传输模式 <a class="header-anchor" href="#_4-数据传输模式" aria-label="Permalink to &quot;4. 数据传输模式&quot;">​</a></h3><p>只有SD卡系统处于数据传输模式下才可以进行数据读写操作。数据传输模式下可以将主机SD时钟频率设置为FPP，默认最高为25MHz，频率切换可以通过CMD4命令来实现。</p><img src="'+p+'" alt="image-20230510212155886" style="zoom:47%;"><p>（1）CMD7用来选定和取消指定的卡，卡在待机状态下还不能进行数据通信，因为总线上可能有多个卡都是出于待机状态，必须选择一个RCA地址目标卡使 其进入传输状态才可以进行数据通信。同时通过CMD7命令也可以让已经被选择的目标卡返回到待机状态。</p><p>（2）数据传输模式下的数据通信都是主机和目标卡之间通过寻址命令点对点进行的。卡处于传输状态下可以使用块的读写以及擦除命令对卡进行数据读写、擦除。</p><p>（3）CMD12可以中断正在进行的数据通信，让卡返回到传输状态。 CMD0和CMD15会中止任何数据编程操作，返回卡识别模式，这可能导致卡数据被损坏。</p><h2 id="六、读写sd卡" tabindex="-1">六、读写SD卡 <a class="header-anchor" href="#六、读写sd卡" aria-label="Permalink to &quot;六、读写SD卡&quot;">​</a></h2><h3 id="_1-初始化" tabindex="-1">1. 初始化 <a class="header-anchor" href="#_1-初始化" aria-label="Permalink to &quot;1. 初始化&quot;">​</a></h3><p>要实现SDIO驱动SD卡，最重要的步骤就是SD卡的初始化，只要SD卡初始化完成了，那么剩下的（读写操作）就简单了，所以我们这里重点介绍SD卡的初始化。这一部分可以参考文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的4.2.3 Card lnitialization and ldentification Process一节。</p><img src="'+n+'" alt="image-20230510214259366" style="zoom:80%;"><p>（1）从SD卡初始化流程可知，不管什么卡（这里我们将卡分为4类：SD2.0高容量卡（SDHC，最大32G），SD2.0标准容量卡（SDSC，最大2G），SD1.x卡和MMC卡），首先我们要执行的是卡上电（设置SDIO_POWER[1:0]=11），上电后发送CMD0，对卡进行软复位.</p><p>（2）之后发送CMD8命令，用于区分SD卡2.0，只有2.0及以后的卡才支持CMD8命令，MMC卡和V1.x的卡，是不支持该命令的。 CMD8命令格式如下表（见 文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的4.9.6 R7(Card interface condition)）：</p><img src="'+o+'" alt="image-20230510214551994" style="zoom:50%;"><p>在发送CMD8的时候，通过其带的参数我们可以设置VHS位（在v9.0上叫Voltage accepted），以告诉SD卡，主机的供电情况，让SD卡知道主机的供电范围。VHS位（在v9.0上叫Voltage accepted）定义如下表所示：</p><img src="'+c+'" alt="image-20230510214702846" style="zoom:50%;"><p>这里我们使用参数0X1AA，即告诉SD卡，主机供电为2.7~3.6V之间，如果SD卡支持CMD8，且支持该电压范围，则会通过CMD8的响应（R7）将参数部分原本返回给主机，如果不支持CMD8，或者不支持这个电压范围，则不响应。</p><p>（3）在发送CMD8后，发送ACMD41（注意：发送ACMD41之前，要先发送CMD55），来进一步确认卡的操作电压范围，并通过HCS位来告诉SD卡，主机是不是支持高容量卡（SDHC）。ACMD41命令格式如下表所示：</p><img src="'+_+'" alt="image-20230510215003169" style="zoom:50%;"><p>ACMD41指令响应(R3)，包含了SD卡OCR寄存器内容，其定义如下表所示：</p><img src="'+D+'" alt="image-20230510215042811" style="zoom:50%;"><p>对于支持CMD8的卡，主机设置ACMD41的参数HCS=1，告诉SD卡，主机支持SDHC卡。对2.0的卡，OCR的CCS位用于表示SDHC还是SDSC；对1.x的卡，则忽略该位；对MMC卡，则不支持ACMD41，MMC卡只需要发送：CMD0和CMD1即可完成初始化。</p><p>（4）CMD2用于获取CID寄存器数据，CID寄存器各位定义如下表：</p><img src="'+S+'" alt="image-20230510215143920" style="zoom:50%;"><p>SD卡在收到CMD2后，将返回R2长响应（136位），其中包含128位有效数据（CID寄存器内容），存放在SDIO_RESP1~4等4个寄存器里面。通过读取这四个寄存器，就可以获得SD卡的CID信息。</p><p>（4）CMD3，用于设置卡相对地址（RCA，必须为非0），对于SD卡（非MMC卡），在收到CMD3后，将返回一个新的RCA给主机，方便主机寻址。RCA的存在允许一个SDIO接口挂多个SD卡，通过RCA来区分主机要操作的是哪个卡。对于MMC卡，则不是由SD卡自动返回RCA，而是主机主动设置MMC卡的RCA，即通过CMD3带参数（高16位用于RCA设置），实现RCA设置。同样MMC卡也支持一个SDIO接口挂多个MMC卡，不同于SD卡的是所有的RCA都是由主机主动设置的，而SD卡的RCA则是SD卡发给主机的。在获得卡RCA之后，我们便可以发送CMD9（带RCA参数），获得SD卡的CSD寄存器内容，从CSD寄存器，我们可以得到SD卡的容量和扇区大小等十分重要的信息。CSD寄存器我们可以参考文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的5.3.1 CSD STRUCTURE一节。</p><p>（5）至此，我们的SD卡初始化基本就结束了，最后通过CMD7命令，选中我们要操作的SD卡，即可开始对SD卡的读写操作了。</p><h3 id="_2-数据块读取" tabindex="-1">2. 数据块读取 <a class="header-anchor" href="#_2-数据块读取" aria-label="Permalink to &quot;2. 数据块读取&quot;">​</a></h3><p>关于读取我们可以参文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的 4.3.3 Data Read 一节。</p><h4 id="_2-1-单块数据块读取流程" tabindex="-1">2.1 单块数据块读取流程 <a class="header-anchor" href="#_2-1-单块数据块读取流程" aria-label="Permalink to &quot;2.1 单块数据块读取流程&quot;">​</a></h4><p>单块数据块读取大概得流程如下：</p><img src="'+C+'" alt="image-20230510220131450" style="zoom:50%;"><h4 id="_2-2-多块数据块读取流程" tabindex="-1">2.2 多块数据块读取流程 <a class="header-anchor" href="#_2-2-多块数据块读取流程" aria-label="Permalink to &quot;2.2 多块数据块读取流程&quot;">​</a></h4><img src="'+m+'" alt="image-20230510220616487" style="zoom:50%;"><h4 id="_2-3-相关命令说明" tabindex="-1">2.3 相关命令说明 <a class="header-anchor" href="#_2-3-相关命令说明" aria-label="Permalink to &quot;2.3 相关命令说明&quot;">​</a></h4><h5 id="_2-3-1-cmd17命令" tabindex="-1">2.3.1 CMD17命令 <a class="header-anchor" href="#_2-3-1-cmd17命令" aria-label="Permalink to &quot;2.3.1 CMD17命令&quot;">​</a></h5><img src="'+k+'" alt="image-20230510220940937" style="zoom:33%;"><h5 id="_2-3-2-cmd18命令" tabindex="-1">2.3.2 CMD18命令 <a class="header-anchor" href="#_2-3-2-cmd18命令" aria-label="Permalink to &quot;2.3.2 CMD18命令&quot;">​</a></h5><img src="'+f+'" alt="image-20230510221021370" style="zoom:33%;"><h5 id="_2-3-3-cmd12命令" tabindex="-1">2.3.3 CMD12命令 <a class="header-anchor" href="#_2-3-3-cmd12命令" aria-label="Permalink to &quot;2.3.3 CMD12命令&quot;">​</a></h5><img src="'+g+'" alt="image-20230510221102516" style="zoom:33%;"><h3 id="_3-数据块写入" tabindex="-1">3. 数据块写入 <a class="header-anchor" href="#_3-数据块写入" aria-label="Permalink to &quot;3. 数据块写入&quot;">​</a></h3><p>关于写入我们可以参考文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的 4.3.4 Data Write 一节。</p><h4 id="_3-1-单块数据块写入流程" tabindex="-1">3.1 单块数据块写入流程 <a class="header-anchor" href="#_3-1-单块数据块写入流程" aria-label="Permalink to &quot;3.1 单块数据块写入流程&quot;">​</a></h4><img src="'+b+'" alt="image-20230510221722806" style="zoom:50%;"><h4 id="_3-2-多块数据写入流程" tabindex="-1">3.2 多块数据写入流程 <a class="header-anchor" href="#_3-2-多块数据写入流程" aria-label="Permalink to &quot;3.2 多块数据写入流程&quot;">​</a></h4><img src="'+y+'" alt="image-20230510222129117" style="zoom:50%;"><h4 id="_3-3-相关命令说明" tabindex="-1">3.3 相关命令说明 <a class="header-anchor" href="#_3-3-相关命令说明" aria-label="Permalink to &quot;3.3 相关命令说明&quot;">​</a></h4><h5 id="_3-3-1-cmd13命令" tabindex="-1">3.3.1 CMD13命令 <a class="header-anchor" href="#_3-3-1-cmd13命令" aria-label="Permalink to &quot;3.3.1 CMD13命令&quot;">​</a></h5><img src="'+u+'" alt="image-20230510222239890" style="zoom:33%;"><p>R1响应如下：</p><img src="'+M+'" alt="image-20230510222255985" style="zoom:43%;"><h5 id="_3-3-2-cmd24命令" tabindex="-1">3.3.2 CMD24命令 <a class="header-anchor" href="#_3-3-2-cmd24命令" aria-label="Permalink to &quot;3.3.2 CMD24命令&quot;">​</a></h5><img src="'+a+'" alt="image-20230510222326770" style="zoom:33%;"><h5 id="_3-3-3-acmd23命令" tabindex="-1">3.3.3 ACMD23命令 <a class="header-anchor" href="#_3-3-3-acmd23命令" aria-label="Permalink to &quot;3.3.3 ACMD23命令&quot;">​</a></h5><img src="'+P+'" alt="image-20230510222425522" style="zoom:33%;"><p>注意：发送ACMD之前，必须先发送CMD55，通知SD卡，接下来要发送的是应用命令（APP CMD），而非标准命令。</p><h5 id="_3-3-4-cmd55命令" tabindex="-1">3.3.4 CMD55命令 <a class="header-anchor" href="#_3-3-4-cmd55命令" aria-label="Permalink to &quot;3.3.4 CMD55命令&quot;">​</a></h5><img src="'+q+'" alt="image-20230510222518271" style="zoom:33%;"><h5 id="_3-3-5-cmd25命令" tabindex="-1">3.3.5 CMD25命令 <a class="header-anchor" href="#_3-3-5-cmd25命令" aria-label="Permalink to &quot;3.3.5 CMD25命令&quot;">​</a></h5><img src="'+A+'" alt="image-20230510222627687" style="zoom:33%;"><h3 id="_4-读写地址" tabindex="-1">4. 读写地址 <a class="header-anchor" href="#_4-读写地址" aria-label="Permalink to &quot;4. 读写地址&quot;">​</a></h3><h4 id="_4-1-写命令cmd24" tabindex="-1">4.1 写命令CMD24 <a class="header-anchor" href="#_4-1-写命令cmd24" aria-label="Permalink to &quot;4.1 写命令CMD24&quot;">​</a></h4><img src="'+a+'" alt="image-20230510222326770" style="zoom:33%;"><p>我们可以参考文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的4.7.4 Detailed Command Description一节，上边会有CMD24的说名，如上图所示，我们发送CMD24命令的时候携带的参数就是写入的地址信息，他是一个32位的长度，一共就是可以表示这么多个“地址”：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>那么这是怎么对应SD卡的地址的呢？要是每个字节都对应一个地址，那这完全不够32GB的用啊，2GB的还。其实我们看手册的话，手册这里有一个脚注：</p><img src="'+R+`" alt="image-20230511070742199" style="zoom:50%;"><p>这句话就在文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的Table 4-24 : Block-Oriented Read Commands (class 2)这一个命令组的下边，这句话的意思就是，对于SDSC卡来说，单位就是字节，对于SDHC或者SDXC卡来说，使用块为单位，也就是512个字节，这什么意思呢，意思就是：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">对于SDSC卡：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SD卡0h地址 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SD卡1h地址 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000001</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SD卡2h地址 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000010</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ... ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">对于SDHC或者SDXC卡：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SD卡0地址   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SD卡511地址 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000001</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SD卡1023地址</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000010</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ... ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这样计算下来的话，32位的地址，以512字节为单位，就可以表示:</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 512</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2048</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> 2TB</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样的话32位不就够最大2TB的卡使用了嘛，这也就是为什么我们初始化SD卡的时候要获取卡的类型，读写的时候要先确定块的长度的原因啦。我们还可以查看 文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的 4.3 Data Transfer Mode中 4.3.3 Data Read 和 4.3.4 Data Write两个部分，里边也有对应的说明。</p><h4 id="_4-2-卡的类型" tabindex="-1">4.2 卡的类型 <a class="header-anchor" href="#_4-2-卡的类型" aria-label="Permalink to &quot;4.2 卡的类型&quot;">​</a></h4><p>我们在看SD卡初始化流程的时候会发现，我们发送了ACMD41命令，这个命令上边有说明，我们再看一下手册（我们可以参考文档 <a href="https://www.sdcard.org/downloads/pls/pdf/?p=Part1_Physical_Layer_Simplified_Specification_Ver9.00.jpg&amp;f=Part1_Physical_Layer_Simplified_Specification_Ver9.00.pdf&amp;e=EN_SS1_9" target="_blank" rel="noreferrer">Physical Layer Simplified Specification v9.0</a> 的 4.2.3.1 Initialization Command (ACMD41)），详细了解一下：</p><img src="`+E+'" alt="image-20230511065559668" style="zoom:50%;"><p>可以看到，我们这里收到响应的时候，有一个CCS位，当CCS=1 表示卡是高容量 SD 卡（SDHC或者SDXC）；CCS=0 表示卡是普通 SD 卡（SDSC）。</p>',168)])])}const O=i(F,[["render",x]]);export{I as __pageData,O as default};
