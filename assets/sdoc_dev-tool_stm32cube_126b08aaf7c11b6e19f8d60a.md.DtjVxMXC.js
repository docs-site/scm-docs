import{_ as a,c as i,o as n,b0 as e}from"./chunks/framework.C5ev1SXp.js";const l="/scm-docs/assets/image-20230419232250397.CihHdxRS.png",p="/scm-docs/assets/image-20230419232522160.2sfnaGMd.png",t="/scm-docs/assets/image-20250916224013042.DfaDMvgF.png",r="/scm-docs/assets/image-20250916225349889.DdvVjcDj.png",h="/scm-docs/assets/image-20230419232829564.9hUSWNRg.png",k="/scm-docs/assets/image-20230419233134342.DOBdY4ZI.png",c="/scm-docs/assets/image-20230419233340030.Cc3mLL-M.png",d="/scm-docs/assets/image-20250916230012584.DNHNRX_M.png",o="/scm-docs/assets/image-20250916230058299.CKDzlWRZ.png",E=JSON.parse('{"title":"LV002-STM32CubeMX工程创建","description":null,"frontmatter":{"title":"LV002-STM32CubeMX工程创建","date":"2025-09-16T22:29:13.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/dev-tool/stm32cube/126b08aaf7c11b6e19f8d60a","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-16T22:29:13.438Z","fulluuid":"e19f8d60a0f64d51a22bc5a8a04bf26f","useduuid":"e19f8d60a"}},"headers":[],"relativePath":"sdoc/dev-tool/stm32cube/126b08aaf7c11b6e19f8d60a.md","filePath":"sdoc/01-开发工具/02-STM32Cube/LV002-STM32CubeMX工程创建.md","lastUpdated":1758108248000}'),F={name:"sdoc/dev-tool/stm32cube/126b08aaf7c11b6e19f8d60a.md"};function m(g,s,u,b,C,y){return n(),i("div",null,[...s[0]||(s[0]=[e('<h1 id="lv002-stm32cubemx工程创建" tabindex="-1">LV002-STM32CubeMX工程创建 <a class="header-anchor" href="#lv002-stm32cubemx工程创建" aria-label="Permalink to &quot;LV002-STM32CubeMX工程创建&quot;">​</a></h1><h2 id="一、工程创建" tabindex="-1">一、工程创建 <a class="header-anchor" href="#一、工程创建" aria-label="Permalink to &quot;一、工程创建&quot;">​</a></h2><h3 id="_1-芯片型号选择" tabindex="-1">1. 芯片型号选择 <a class="header-anchor" href="#_1-芯片型号选择" aria-label="Permalink to &quot;1. 芯片型号选择&quot;">​</a></h3><p>这个创建工程就比较简单了：</p><ul><li>【File】→【New Project】</li></ul><img src="'+l+'" alt="image-20230419232250397"><ul><li>【选择芯片型号】→【Start Project】</li></ul><img src="'+p+'" alt="image-20230419232522160"><p>双击要使用的芯片型号，就会开始生成工程，然后打开这样一个界面：</p><p><img src="'+t+'" alt="image-20250916224013042"></p><p>这里就是对芯片的引脚，外设做配置的地方。</p><h3 id="_2-配置引脚" tabindex="-1">2. 配置引脚 <a class="header-anchor" href="#_2-配置引脚" aria-label="Permalink to &quot;2. 配置引脚&quot;">​</a></h3><p>我用的是正点原子的战舰V3开发板，两个LED是接在PB5和PE5上，所以这里配置一下PB5：</p><p><img src="'+r+'" alt="image-20250916225349889"></p><h3 id="_3-工程配置" tabindex="-1">3. 工程配置 <a class="header-anchor" href="#_3-工程配置" aria-label="Permalink to &quot;3. 工程配置&quot;">​</a></h3><ul><li>【Project Manager】→【Project】</li></ul><img src="'+h+'" alt="image-20230419232829564"><ul><li>【Project Manager】→【Code Generator】</li></ul><img src="'+k+'" alt="image-20230419233134342"><ul><li>点击右上角的全大写的【GENERATE CODE】然后等待生成工程即可</li></ul><img src="'+c+`" alt="image-20230419233340030"><h3 id="_4-生成的工程" tabindex="-1">4. 生成的工程 <a class="header-anchor" href="#_4-生成的工程" aria-label="Permalink to &quot;4. 生成的工程&quot;">​</a></h3><p>生成的工程大概结构如下：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E:\\MyLinux\\VMware\\sharedir\\STM32\\test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tdoc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .mxproject</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Core</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Inc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Drivers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMSIS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STM32F1xx_HAL_Driver</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MDK-ARM</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> startup_stm32f103xe.s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.uvoptx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.uvprojx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.ioc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> directories,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>MDK-ARM中就是生成的Keil工程。</p><h2 id="二、keil打开工程" tabindex="-1">二、Keil打开工程 <a class="header-anchor" href="#二、keil打开工程" aria-label="Permalink to &quot;二、Keil打开工程&quot;">​</a></h2><p>我们直接进入MDK-ARM目录，然后双击打开，打开的时候好像提示缺少一个支持包，直接安装即可： <img src="`+d+'" alt="image-20250916230012584"></p><p>然后就可以看到生成的Keil工程啦：</p><p><img src="'+o+`" alt="image-20250916230058299"></p><p>需要知道的是，生成的工程中有大量的这种注释：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* USER CODE BEGIN SysInit */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* USER CODE END SysInit */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* Initialize all configured peripherals */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  MX_GPIO_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* USER CODE BEGIN 2 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* USER CODE END 2 */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>我们可以通过STM32CubeMX随时修改GPIO或者其他外设的配置，这个时候就会重新生成工程，但是我们肯定要实现自己的逻辑的，这个时候我们要是吧自己的逻辑写在BEGIN和END中间，那么中间这部分代码就不会受到影响了。</p>`,32)])])}const B=a(F,[["render",m]]);export{E as __pageData,B as default};
