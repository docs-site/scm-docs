import{_ as r,c as e,o as i,b0 as s,j as t,a as n}from"./chunks/framework.C5ev1SXp.js";const d="/scm-docs/assets/image-20230514155945480.-6NgRvr6.png",l="/scm-docs/assets/image-20230514160336545.B_GTaYZ2.png",h="/scm-docs/assets/image-20230514160607461.C-eiuc9a.png",p="/scm-docs/assets/image-20230514162342000.Ca7V5Dqm.png",o="/scm-docs/assets/image-20230514163912339.CuLCrsk8.png",T="/scm-docs/assets/image-20230514163937864.D9jqsaeZ.png",Q="/scm-docs/assets/image-20230514164004262.Dzyz4bv5.png",m="/scm-docs/assets/image-20230514164018470.CXmyh9hn.png",g="/scm-docs/assets/image-20230503175021794.CqX7YXiZ.png",S=JSON.parse('{"title":"LV005-IS62WV51216简介","description":null,"frontmatter":{"title":"LV005-IS62WV51216简介","date":"2025-09-24T19:11:58.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/peripheral/fsmc/sram/126b09248db61d861c837fd7","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-24T19:11:58.472Z","fulluuid":"61c837fd7bf24e47b455ebbf97c03db7","useduuid":"61c837fd7"}},"headers":[],"relativePath":"sdoc/peripheral/fsmc/sram/126b09248db61d861c837fd7.md","filePath":"sdoc/20-基本外设篇/25-FSMC/05-外部SRAM/LV005-IS62WV51216简介.md","lastUpdated":1758153691000}'),c={name:"sdoc/peripheral/fsmc/sram/126b09248db61d861c837fd7.md"},k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},E={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"22.636ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 10005.2 915.9","aria-hidden":"true"};function y(x,a,u,b,_,V){return i(),e("div",null,[a[4]||(a[4]=s('<h1 id="lv005-is62wv51216简介" tabindex="-1">LV005-IS62WV51216简介 <a class="header-anchor" href="#lv005-is62wv51216简介" aria-label="Permalink to &quot;LV005-IS62WV51216简介&quot;">​</a></h1><h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;">​</a></h2><p>IS62WV51216是ISSI（<a href="https://www.issi.com/CN/index.shtml" target="_blank" rel="noreferrer">Integrated Silicon Solution, Inc</a>）公司生产的一颗16位宽512K（512*16，即1M字节）容量的CMOS静态内存（SRAM）芯片。开发板上使用的完整的型号是 <a href="https://www.issi.com/WW/pdf/62WV51216ALL.pdf" target="_blank" rel="noreferrer">IS62WV51216BLL</a>，它有以下特点：</p><p>（1）高速。具有45ns/55ns访问速度。</p><p>（2）低功耗。操作时：36mW;待机时：12uW。</p><p>（3）兼容TTL电平。</p><p>（4）全静态操作。不需要刷新和时钟电路。</p><p>（5）三态输出。</p><p>（6）字节控制功能。支持高/低字节控制。</p><h2 id="二、引脚说明" tabindex="-1">二、引脚说明 <a class="header-anchor" href="#二、引脚说明" aria-label="Permalink to &quot;二、引脚说明&quot;">​</a></h2><img src="'+d+'" alt="image-20230514155945480" style="zoom:50%;"><p>各个引脚的说明如下图表（表中的#就表示图中的字母上方的横线，表示低电平有效）：</p><table tabindex="0"><thead><tr><th><strong>信号线</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>A0-A18</td><td>I</td><td>地址输入</td></tr><tr><td>I/O0-I/O7</td><td>I/O</td><td>数据输入输出信号，低字节</td></tr><tr><td>I/O8-I/O15</td><td>I/O</td><td>数据输入输出信号，高字节</td></tr><tr><td>CS2 和CS1#</td><td>I</td><td>片选信号，CS2高电平有效，CS1#低电平有效，部分芯片只有其中一个引脚</td></tr><tr><td>OE#</td><td>I</td><td>输出使能信号，低电平有效</td></tr><tr><td>WE#</td><td>I</td><td>写入使能信号，低电平有效</td></tr><tr><td>UB#</td><td>I</td><td>数据掩码信号Upper Byte，高位字节允许访问，低电平有效，</td></tr><tr><td>LB#</td><td>I</td><td>数据掩码信号Lower Byte，低位字节允许访问，低电平有效</td></tr></tbody></table><p>SRAM的控制比较简单，只要控制信号线使能了访问，从地址线输入要访问的地址，即可从I/O数据线写入或读出数据。</p><h2 id="三、功能框图" tabindex="-1">三、功能框图 <a class="header-anchor" href="#三、功能框图" aria-label="Permalink to &quot;三、功能框图&quot;">​</a></h2><p>功能框图我们可以看<a href="https://www.issi.com/WW/pdf/62WV51216ALL.pdf" target="_blank" rel="noreferrer">IS62WV51216BLL-datasheet</a>的 FUNCTIONAL BLOCK DIAGRAM部分：</p><img src="'+l+'" alt="image-20230514160336545" style="zoom:67%;"><h3 id="_1-1存储器矩阵" tabindex="-1">1. ①存储器矩阵 <a class="header-anchor" href="#_1-1存储器矩阵" aria-label="Permalink to &quot;1. ①存储器矩阵&quot;">​</a></h3><p>SRAM的存储矩阵如下图所示：</p><img src="'+h+'" alt="image-20230514160607461" style="zoom:67%;"><p>SRAM内部包含的存储阵列，可以把它理解成一张表格，数据就填在这张表格上。和表格查找一样，指定一个行地址和列地址，就可以精确地找到目标单元格，这是SRAM芯片寻址的基本原理。这样的每个单元格被称为存储单元，而这样的表则被称为<strong>存储矩阵</strong>。</p><h3 id="_2-2地址译码器、列i-o和i-o数据电路" tabindex="-1">2. ②地址译码器、列I/O和I/O数据电路 <a class="header-anchor" href="#_2-2地址译码器、列i-o和i-o数据电路" aria-label="Permalink to &quot;2. ②地址译码器、列I/O和I/O数据电路&quot;">​</a></h3><img src="'+l+'" alt="image-20230514160336545" style="zoom:67%;"><p>地址译码器把N根地址线转换成2N根信号线，每根信号线对应一行或一列存储单元，通过地址线找到具体的存储单元，实现寻址。如果存储阵列比较大，地址线会分成行和列地址，或者行、列分时复用同一地址总线，访问数据寻址时先用地址线传输行地址再传输列地址。</p>',24)),t("p",null,[a[2]||(a[2]=n("我们使用的这个的SRAM比较小，没有列地址线，它的数据宽度为16位，即一个行地址对应2字节空间，框图中左侧的A0-A18是行址信号（共19根），当有18根地址线一共可以表示",-1)),t("mjx-container",k,[(i(),e("svg",E,[...a[0]||(a[0]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(1567.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(2623.7,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(3782.4,0)"><path data-c="B7" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(4282.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000,0)" style="stroke-width:3;"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1500,0)" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(6560.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(7616.2,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" style="stroke-width:3;"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)" style="stroke-width:3;"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000,0)" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(9116.2,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z" style="stroke-width:3;"></path></g></g></g>',1)])])),a[1]||(a[1]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msup",null,[t("mn",null,"2"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mn",null,"18")])]),t("mo",null,"="),t("msup",null,[t("mn",null,"2"),t("mn",null,"8")]),t("mo",null,"·"),t("mn",null,"1024"),t("mo",null,"="),t("mn",null,"512"),t("mi",null,"K")])],-1))]),a[3]||(a[3]=n("行存储单元，所以18根地址线一共能访问512Kx16bits大小的空间，一共就是512K*2B=1024KB=1MB，刚好就是1M字节的大小，所以其实实际上我们使用18根地址线就足够了。访问时，使用UB#或LB#线控制数据宽度。",-1))]),a[5]||(a[5]=s('<p>我们每次给一个18位的地址，这会对应一个16位的数据空间，比如我们给了一个0地址，这个时候我们可以访问16位的数据：</p><table tabindex="0"><thead><tr><th style="text-align:center;">地址</th><th style="text-align:center;">0~7位</th><th style="text-align:center;">8~15位</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">xxxx xxxx</td><td style="text-align:center;">xxxx xxxx</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">xxxx xxxx</td><td style="text-align:center;">xxxx xxxx</td></tr></tbody></table><p>可以访问到第0字节和第1字节的数据，那么怎么确定访问的是第0字节还是第1字节呢？我们这个时候将这两个字节的0~7位看做低8位，对应I/O0~I/O7，8~15位看做高8位，对应I/O8~I/O15，然后通过UB#或LB#线来控制是要访问高位还是低位，UB#控制的是高字节的访问，LB#控制低字节的访问：</p><table tabindex="0"><thead><tr><th>LB#</th><th>UB#</th><th>有效的数据线</th></tr></thead><tbody><tr><td>低电平</td><td>高电平</td><td>I/O0~I/O7，此时可访问低8位</td></tr><tr><td>高电平</td><td>低电平</td><td>I/O8~I/O15，此时可访问低8位</td></tr><tr><td>低电平</td><td>低电平</td><td>I/O0~I/O7和I/O8~I/O15均有效，可以访问16位数据</td></tr><tr><td>高电平</td><td>高电平</td><td>均无效，无法访问数据</td></tr></tbody></table><h3 id="_3-3控制电路" tabindex="-1">3. ③控制电路 <a class="header-anchor" href="#_3-3控制电路" aria-label="Permalink to &quot;3. ③控制电路&quot;">​</a></h3><img src="'+p+'" alt="image-20230514162342000" style="zoom:50%;"><p>控制电路主要包含了片选、读写使能以及上面提到的宽度控制信号UB#和LB#。利用CS2或CS1#片选信号，可以把多个SRAM芯片组成一个大容量的内存条。OE#和WE#可以控制读写使能，防止误操作。</p><p>访问时，使用 UB# 或 LB# 线控制数据宽度，例如，当要访问宽度为 16 位的数据时，使用行地址线指出地址，然后把 UB# 和 LB# 线都设置为低电平，那么 I/O0-I/O15 线都有效，它们一起输出该地址的 16 位数据 (或者接收 16 位数据到该地址)；当要访问宽度为 8 位的数据时，使用行地址线指出地址，然后把UB# 或 LB# 其中一个设置为低电平，I/O 会对应输出该地址的高 8 位和低 8 位数据，因此它们被称为数据掩码信号。</p><h2 id="四、读写时序" tabindex="-1">四、读写时序 <a class="header-anchor" href="#四、读写时序" aria-label="Permalink to &quot;四、读写时序&quot;">​</a></h2><p>注意，下边的时序图都是没有时钟线的，这也说明SRAM是通过异步通信的方式进行读写的。</p><h3 id="_1-读时序" tabindex="-1">1. 读时序 <a class="header-anchor" href="#_1-读时序" aria-label="Permalink to &quot;1. 读时序&quot;">​</a></h3><img src="'+o+'" alt="image-20230514163912339" style="zoom:50%;"><p>上图为IS62WV51216芯片的8080并口读时序，我们重点要关注的是：读周期时间（tRC）、地址建立时间（tAA）和OE建立时间（tDOE）。开发板使用55ns的IS62WV51216，tRC=55ns，tAA=55ns（Max），tDOE=25ns（Max）：</p><img src="'+T+'" alt="image-20230514163937864" style="zoom:50%;"><p>读时序过程：</p><p>（1）主机使用地址信号线发出要访问的存储器目标地址；</p><p>（2）控制片选信号CS1#及CS2#使能存储器芯片；</p><p>（3）控制读使能信号OE#表示要读数据；</p><p>（4）使用掩码信号LB#与UB#指示要访问目标地址的高、低字节部分；</p><p>（5）存储器会通过数据线向主机输出目标数据。</p><h3 id="_2-写时序" tabindex="-1">2. 写时序 <a class="header-anchor" href="#_2-写时序" aria-label="Permalink to &quot;2. 写时序&quot;">​</a></h3><img src="'+Q+'" alt="image-20230514164004262" style="zoom:50%;"><p>上图为IS62WV51216芯片的8080并口写时序，我们重点要关注的是：读周期时间(tWC)、地址建立时间(tSA)和OE建立时间(tPWE)。开发板使用55ns的IS62WV51216，tWC=55ns，tSA=0ns，tPWE=45ns（min）：</p><img src="'+m+'" alt="image-20230514164018470" style="zoom:50%;"><p>写时序过程：</p><p>（1）主机使用地址信号线发出要访问的存储器目标地址；</p><p>（2）控制片选信号CS1#及CS2#使能存储器芯片；</p><p>（3）控制写使能信号WE#表示要写数据；</p><p>（4）使用掩码信号LB#与UB#指示要访问目标地址的高、低字节部分；</p><p>（5）使用数据线向存储器传输目标数据。</p><h3 id="_3-关键时间参数总结" tabindex="-1">3. 关键时间参数总结 <a class="header-anchor" href="#_3-关键时间参数总结" aria-label="Permalink to &quot;3. 关键时间参数总结&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;"><strong>时间参数</strong></th><th style="text-align:center;"><strong>IS62WV51216BLL-55ns<br>型号要求的最短时间</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center;">tRC</td><td style="text-align:center;">55ns</td><td>读操作周期</td></tr><tr><td style="text-align:center;">tAA</td><td style="text-align:center;">0ns</td><td>地址访问时间</td></tr><tr><td style="text-align:center;">tWC</td><td style="text-align:center;">55ns</td><td>写操作周期</td></tr><tr><td style="text-align:center;">tSA</td><td style="text-align:center;">0ns</td><td>地址建立时间</td></tr><tr><td style="text-align:center;">tSD</td><td style="text-align:center;">25ns</td><td>数据建立至写结束的时间</td></tr><tr><td style="text-align:center;">tHD</td><td style="text-align:center;">0ns</td><td>数据写结束后的保持时间</td></tr></tbody></table><h2 id="五、与stm32接线" tabindex="-1">五、与STM32接线 <a class="header-anchor" href="#五、与stm32接线" aria-label="Permalink to &quot;五、与STM32接线&quot;">​</a></h2><img src="'+g+`" alt="image-20230503175021794" style="zoom:50%;"><p>理论上IS62WV51216与STM32的FSMC接线应该是这样的：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">FMSC_A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">FSMC_D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UB     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FSMC_NBL1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LB     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FSMC_NBL0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OE     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FSMC_OE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WE     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FSMC_WE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CS     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FSMC_NE3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>实际上IS62WV51216 的 A[0:18]并不是按顺序连接 STM32F1 的 FMSC_A[0:18]，不过这并不影响我们正常使用外部 SRAM，因为地址具有唯一性。所以，只要地址线不和数据线混淆，就可以正常使用外部 SRAM。这样设计的好处，就是可以方便 PCB 布线。</p>`,37))])}const f=r(c,[["render",y]]);export{S as __pageData,f as default};
