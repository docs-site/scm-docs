import{_ as e,c as a,o as l,b0 as d}from"./chunks/framework.C5ev1SXp.js";const r="/scm-docs/assets/MDK018.CyGOpz0f.png",i="/scm-docs/assets/image-20230529195524330.BaeJgpi-.png",o="/scm-docs/assets/image-20230529195633353.BoIugpjs.png",n="/scm-docs/assets/image-20230529195721667-1758358981825-1.Cu9XOM6b.png",s="/scm-docs/assets/MDK022.D55nw4ke.jpg",_=JSON.parse('{"title":"LV015-MDK工程文件简介","description":null,"frontmatter":{"title":"LV015-MDK工程文件简介","date":"2025-09-23T07:49:41.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/dev-tool/keil/126b0913857d3670d6f0eef1","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-23T07:49:41.871Z","fulluuid":"0d6f0eef153042fc862dc752cb0e3c2d","useduuid":"0d6f0eef1"}},"headers":[],"relativePath":"sdoc/dev-tool/keil/126b0913857d3670d6f0eef1.md","filePath":"sdoc/01-开发工具/01-keil/LV015-MDK工程文件简介.md","lastUpdated":1758153691000}'),c={name:"sdoc/dev-tool/keil/126b0913857d3670d6f0eef1.md"};function f(u,t,g,p,h,m){return l(),a("div",null,[...t[0]||(t[0]=[d('<h1 id="lv015-mdk工程文件简介" tabindex="-1">LV015-MDK工程文件简介 <a class="header-anchor" href="#lv015-mdk工程文件简介" aria-label="Permalink to &quot;LV015-MDK工程文件简介&quot;">​</a></h1><p>本篇笔记主要是参考的野火的文档。使用的工程呢可以去这里下载：<a href="https://gitee.com/Embedfire-stm32f103-badao/ebf_stm32f103_badao_std_code" target="_blank" rel="noreferrer">ebf_stm32f103_badao_std_code: 野火STM32F103 霸道开发板 标准库教程配套代码 (gitee.com)</a></p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1Uq_kTrjQWxPYFQ00HoxN1Q?pwd=gryg" target="_blank" rel="noreferrer">程序</a> 提取码: gryg</p></blockquote><h2 id="一、mdk工程文件类型" tabindex="-1">一、MDK工程文件类型 <a class="header-anchor" href="#一、mdk工程文件类型" aria-label="Permalink to &quot;一、MDK工程文件类型&quot;">​</a></h2><h3 id="_1-project工程文件" tabindex="-1">1. Project工程文件 <a class="header-anchor" href="#_1-project工程文件" aria-label="Permalink to &quot;1. Project工程文件&quot;">​</a></h3><table><tbody><tr><td align="left">后缀</td><td align="left">说明</td></tr><tr><td align="left">.uvguix</td><td align="left">MDK5工程的窗口布局文件，在MDK4中*.UVGUI后缀的文件功能相同</td></tr><tr><td align="left">.uvprojx</td><td align="left">MDK5的工程文件，它使用了XML格式记录了工程结构，双击它可以打开整个工程，在MDK4中*.UVPROJ后缀的文件功能相同</td></tr><tr><td align="left">.uvoptx</td><td align="left">MDK5的工程配置选项，包含debugger、trace configuration、breakpooints以及当前打开的文件，在MDK4中*.UVOPT后缀的文件功能相同</td></tr><tr><td align="left">.ini</td><td align="left">某些下载器的配置记录文件</td></tr></tbody></table><h3 id="_2-源文件" tabindex="-1">2. 源文件 <a class="header-anchor" href="#_2-源文件" aria-label="Permalink to &quot;2. 源文件&quot;">​</a></h3><table><tbody><tr><td align="left">后缀</td><td align="left">说明</td></tr><tr><td align="left">.c</td><td align="left">C语言源文件</td></tr><tr><td align="left">.cpp</td><td align="left">C++语言源文件</td></tr><tr><td align="left">.h</td><td align="left">C/C++的头文件</td></tr><tr><td align="left">.s</td><td align="left">汇编语言的源文件</td></tr><tr><td align="left">.inc</td><td align="left">汇编语言的头文件(使用“$include”来包含)</td></tr></tbody></table><h3 id="_3-output目录" tabindex="-1">3. Output目录 <a class="header-anchor" href="#_3-output目录" aria-label="Permalink to &quot;3. Output目录&quot;">​</a></h3><table><tbody><tr><td align="left">后缀</td><td align="left">说明</td></tr><tr><td align="left">.dep</td><td align="left">整个工程的依赖文件</td></tr><tr><td align="left">.d</td><td align="left">描述了对应.o的依赖的文件</td></tr><tr><td align="left">.crf</td><td align="left">交叉引用文件，包含了浏览信息(定义、引用及标识符)</td></tr><tr><td align="left">.o</td><td align="left">可重定位的对象文件(目标文件)</td></tr><tr><td align="left">.bin</td><td align="left">二进制格式的映像文件，是纯粹的FLASH映像，不含任何额外信息</td></tr><tr><td align="left">.hex</td><td align="left">Intel Hex格式的映像文件，可理解为带存储地址描述格式的bin文件 </td></tr><tr><td align="left">.elf</td><td align="left">由GCC编译生成的文件，功能跟axf文件一样，该文件不可重定位</td></tr><tr><td align="left">.axf</td><td align="left">由ARMCC编译生成的可执行对象文件，可用于调试，该文件不可重定位</td></tr><tr><td align="left">.sct</td><td align="left">链接器控制文件(分散加载)</td></tr><tr><td align="left">.scr</td><td align="left">链接器产生的分散加载文件</td></tr><tr><td align="left">.lnp</td><td align="left">MDK生成的链接输入文件，用于调用链接器时的命令输入</td></tr><tr><td align="left">.htm</td><td align="left">链接器生成的静态调用图文件</td></tr><tr><td align="left">.build_log.htm</td><td align="left">构建工程的日志记录文件</td></tr></tbody></table><h3 id="_4-listing目录" tabindex="-1">4. Listing目录 <a class="header-anchor" href="#_4-listing目录" aria-label="Permalink to &quot;4. Listing目录&quot;">​</a></h3><table><tbody><tr><td align="left">后缀</td><td align="left">说明</td></tr><tr><td align="left">.lst</td><td align="left">C及汇编编译器产生的列表文件</td></tr><tr><td align="left">.map</td><td align="left">链接器生成的列表文件，包含存储器映像分布</td></tr><tr><td align="left">.ini</td><td align="left">仿真、下载器的脚本文件</td></tr><tr><td align="left">其它</td><td align="left"></td></tr></tbody></table><h2 id="二、project工程文件" tabindex="-1">二、Project工程文件 <a class="header-anchor" href="#二、project工程文件" aria-label="Permalink to &quot;二、Project工程文件&quot;">​</a></h2><p>uvprojx、 uvoptx 及 uvguix 都是使用 XML 格式记录的文件，若使用记事本打开可以看到 XML 代码。而当使用 MDK 软件打开时，它根据这些文件的 XML 记录加载工程的各种参数，使得我们每次重新打开工程时，都能恢复上一次的工作环境。</p><p><img src="'+r+'" alt="Project目录下文件"></p><h3 id="_1-uvprojx-文件" tabindex="-1">1. uvprojx 文件 <a class="header-anchor" href="#_1-uvprojx-文件" aria-label="Permalink to &quot;1. uvprojx 文件&quot;">​</a></h3><p>uvprojx 文件就是我们平时双击打开的工程文件，它记录了整个工程的结构，如芯片类型、工程包含了哪些源文件等内容 。</p><img src="'+i+'" alt="image-20230529195524330" style="zoom:67%;"><h3 id="_2-uvoptx-文件" tabindex="-1">2. uvoptx 文件 <a class="header-anchor" href="#_2-uvoptx-文件" aria-label="Permalink to &quot;2. uvoptx 文件&quot;">​</a></h3><p>uvoptx 文件记录了工程的配置选项，如下载器的类型、变量跟踪配置、断点位置以及当前已打开的文件等等 。</p><img src="'+o+'" alt="image-20230529195633353" style="zoom:50%;"><h3 id="_3-uvguix-文件" tabindex="-1">3. uvguix 文件 <a class="header-anchor" href="#_3-uvguix-文件" aria-label="Permalink to &quot;3. uvguix 文件&quot;">​</a></h3><p>uvguix 文件记录了 MDK 软件的 GUI 布局，如代码编辑区窗口的大小、编译输出提示窗口的位置等等。</p><img src="'+n+'" alt="image-20230529195721667" style="zoom:70%;"><h3 id="_4-总结" tabindex="-1">4. 总结 <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;4. 总结&quot;">​</a></h3><p>这些工程参数都是当 MDK 正常退出时才会被写入保存，所以若 MDK 错误退出时 (如使用 Windows 的任务管理器强制关闭)，工程配置参数的最新更改是不会被记录的，重新打开工程时要再次配置。其中 uvprojx 文件是最重要的，删掉它我们就无法再正常打开工程了，而 uvoptx 及 uvguix 文件并不是必须的，可以删除，重新使用 MDK 打开 uvprojx工程文件后，会以默认参数重新创建 uvoptx 及 uvguix 文件。 (所以当使用 Git/SVN 等代码管理的时候，往往只保留 uvprojx 文件) 。</p><p>vprojx、uvoptx及uvguix都是使用XML格式记录的文件，若使用记事本打开可以看到XML代码， 而当使用MDK软件打开时，它根据这些文件的XML记录加载工程的各种参数，使得我们每次重新打开工程时，都能恢复上一次的工作环境。</p><p><img src="'+s+'" alt="XML格式的记录"></p><h2 id="三、源文件" tabindex="-1">三、源文件 <a class="header-anchor" href="#三、源文件" aria-label="Permalink to &quot;三、源文件&quot;">​</a></h2><p>源文件是工程中我们最熟悉的内容了，它们就是我们编写的各种源代码，MDK支持c、cpp、h、s、inc类型的源代码文件， 其中c、cpp分别是c/c++语言的源代码，h是它们的头文件，s是汇编文件，inc是汇编文件的头文件，可使用“$include”语法包含。 编译器根据工程中的源文件最终生成机器码。</p><h2 id="四、output目录下文件" tabindex="-1">四、Output目录下文件 <a class="header-anchor" href="#四、output目录下文件" aria-label="Permalink to &quot;四、Output目录下文件&quot;">​</a></h2><p>参考 <a href="/scm-docs/sdoc/dev-tool/keil/126b091384f9220a0ff9cf1d.html">01-开发工具/01-keil/LV016-Output目录文件.md</a></p><h2 id="五、listing目录下文件" tabindex="-1">五、Listing目录下文件 <a class="header-anchor" href="#五、listing目录下文件" aria-label="Permalink to &quot;五、Listing目录下文件&quot;">​</a></h2><p>参考 <a href="/scm-docs/sdoc/dev-tool/keil/126b0913865605b5493dc70e.html">01-开发工具/01-keil/LV017-Listing目录文件.md</a></p><blockquote><p>参考资料：</p><p><a href="https://bbs.huaweicloud.com/blogs/375342" target="_blank" rel="noreferrer">STM32的内存管理相关（内存架构，内存管理，map文件分析）-云社区-华为云</a></p><p><a href="https://doc.embedfire.com/mcu/stm32/f103badao/std/zh/latest/book/MDK.html" target="_blank" rel="noreferrer">46. MDK的编译过程及文件类型全解</a></p></blockquote>',35)])])}const x=e(c,[["render",f]]);export{_ as __pageData,x as default};
