import{_ as a,c as n,o as e,b0 as l}from"./chunks/framework.C5ev1SXp.js";const t="/scm-docs/assets/image-20230419232250397.CihHdxRS.png",p="/scm-docs/assets/image-20230419232522160.2sfnaGMd.png",h="/scm-docs/assets/image-20230426210514225.D4U6xkCc.png",r="/scm-docs/assets/image-20230419233134342.DOBdY4ZI.png",k="/scm-docs/assets/image-20230426210629918.CvGuU_uj.png",d="/scm-docs/assets/image-20230426213033497.BZl92wgC.png",o="/scm-docs/assets/image-20230426213909099.D8YcUxoy.png",c="/scm-docs/assets/image-20230426214024128.CJct1cUv.png",g="/scm-docs/assets/image-20230426214228303.BMD6trVV.png",E="/scm-docs/assets/image-20230426214517651.6zSKJVlJ.png",u="/scm-docs/assets/image-20230426214604370.BKBwW31s.png",m="/scm-docs/assets/image-20230426214838500.BguXCDk2.png",F="/scm-docs/assets/image-20230426215013932.B8578fOW.png",b="/scm-docs/assets/image-20230426215512905.NIHfPS3j.png",C="/scm-docs/assets/image-20230426215744238.CodWBW6k.png",y="/scm-docs/assets/image-20230426224452113.BFNqh5aa.png",B="/scm-docs/assets/image-20230426224726235.CPayhGxr.png",v="/scm-docs/assets/image-20230426224838061.ID6v0n8-.png",_="/scm-docs/assets/image-20230426225128572.DhLJqRPY.png",q="/scm-docs/assets/image-20230426225710937.CUPCoEp5.png",S="/scm-docs/assets/image-20230426225626967.DqFoyJTo.png",f="/scm-docs/assets/image-20230426225843040.Sjrlging.png",x="/scm-docs/assets/image-20230426230632688.Dvk7Ei8U.png",w="/scm-docs/assets/image-20230426230122282.BIR1HI7Q.png",D="/scm-docs/assets/image-20230426230728232.D5rk34DB.png",M="/scm-docs/assets/image-20230426230948750.DZ-V4SlE.png",P="/scm-docs/assets/image-20230426231029504.x31Nk0FX.png",V="/scm-docs/assets/image-20230426231132629.BLMepnbz.png",I="/scm-docs/assets/image-20230426231720359.D8h5aqu5.png",A="/scm-docs/assets/image-20230427222754213.CMbAkY8C.png",T="/scm-docs/assets/image-20230427223310155.C8dWeWMx.png",U="/scm-docs/assets/image-20230427072908842.D8Z541LF.png",G="/scm-docs/assets/image-20230427073034364.KURqpQ5S.png",N="/scm-docs/assets/image-20230427073727984.B5Lc3ir8.png",L="/scm-docs/assets/image-20230427074055930.j7AZHuQD.png",z="/scm-docs/assets/image-20230427165944750.BoTI3bxg.png",j="/scm-docs/assets/image-20230427170146996.CQBe-lSR.png",W="/scm-docs/assets/image-20230427171803285.D-9vdRsj.png",R="/scm-docs/assets/image-20230427172022809.BvTU5WMv.png",O="/scm-docs/assets/image-20230427172133345.DaCf8MnX.png",H="/scm-docs/assets/image-20230427172444867.9zkfp0VZ.png",$="/scm-docs/assets/image-20230427173928801.BAPjUrj_.png",i="/scm-docs/assets/image-20230427171510342.DAUTZvTh.png",X="/scm-docs/assets/image-20230427171338781.CP6A7Gj0.png",ns=JSON.parse('{"title":"LV010-Makefile管理工程","description":null,"frontmatter":{"title":"LV010-Makefile管理工程","date":"2025-09-20T15:25:27.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/dev-tool/stm32cube/126b08e6edcf211c7df7916d","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-20T15:25:27.529Z","fulluuid":"c7df7916d51c40f295ec8bdf0e20a228","useduuid":"c7df7916d"}},"headers":[],"relativePath":"sdoc/dev-tool/stm32cube/126b08e6edcf211c7df7916d.md","filePath":"sdoc/01-开发工具/02-STM32Cube/LV010-Makefile管理工程.md","lastUpdated":1758153691000}'),J={name:"sdoc/dev-tool/stm32cube/126b08e6edcf211c7df7916d.md"};function Z(K,s,Q,Y,ss,is){return e(),n("div",null,[...s[0]||(s[0]=[l('<h1 id="lv010-makefile管理工程" tabindex="-1">LV010-Makefile管理工程 <a class="header-anchor" href="#lv010-makefile管理工程" aria-label="Permalink to &quot;LV010-Makefile管理工程&quot;">​</a></h1><h2 id="一、stm32cubemx生成工程" tabindex="-1">一、STM32CubeMX生成工程 <a class="header-anchor" href="#一、stm32cubemx生成工程" aria-label="Permalink to &quot;一、STM32CubeMX生成工程&quot;">​</a></h2><h3 id="_1-生成makefile" tabindex="-1">1. 生成Makefile <a class="header-anchor" href="#_1-生成makefile" aria-label="Permalink to &quot;1. 生成Makefile&quot;">​</a></h3><p>前边我们已经熟悉了一下STM32CubeMX软件的使用方法，以及创建和导出MDK工程的过程，接下来我们创建一个含有Makefile文件的工程。</p><ul><li>（1）【File】→【New Project】</li></ul><img src="'+t+'" alt="image-20230419232250397"><ul><li>（2）【选择芯片型号】→【Start Project】</li></ul><img src="'+p+'" alt="image-20230419232522160"><ul><li>（3）【Project Manager】→【Project】</li></ul><img src="'+h+'" alt="image-20230426210514225"><ul><li>（4）【Project Manager】→【Code Generator】</li></ul><img src="'+r+'" alt="image-20230419233134342"><ul><li>（5）点击右上角的全大写的【GENERATE CODE】然后等待生成工程即可，生成的工程文件如下图所示：</li></ul><img src="'+k+`" alt="image-20230426210629918" style="zoom:50%;"><h3 id="_2-修改makefile" tabindex="-1">2. 修改Makefile <a class="header-anchor" href="#_2-修改makefile" aria-label="Permalink to &quot;2. 修改Makefile&quot;">​</a></h3><p>工程导出的Makefile文件只包含工程自动生成的文件及目录位置，我们要是有自定义的源文件和头文件怎么办？</p><ul><li>源文件添加位置</li></ul><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">######################################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># source</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">######################################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># C sources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C_SOURCES =  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个最后边追加就可以了，当我们在STM32CubeMX中增加或者删除功能的时候不会影响到我们自己添加的这些。</p><ul><li>头文件添加位置</li></ul><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># C includes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C_INCLUDES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  \\</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>我们加到这个后边就可以了。我们只需要修改这两个地方即可，其他的保持默认。我尝试了一下，我们添加在这两个变量后边的内容不受STM32CubeMX软件的影响，不管是在哪个位置，可以放心添加。</p><h2 id="二、编译工具" tabindex="-1">二、编译工具 <a class="header-anchor" href="#二、编译工具" aria-label="Permalink to &quot;二、编译工具&quot;">​</a></h2><p>我们可以参考下这篇文档：<a href="http://landley.net/writing/docs/cross-compiling.html" target="_blank" rel="noreferrer">Introduction to cross-compiling for Linux (landley.net)</a></p><h3 id="_1-什么是交叉编译" tabindex="-1">1. 什么是交叉编译 <a class="header-anchor" href="#_1-什么是交叉编译" aria-label="Permalink to &quot;1. 什么是交叉编译&quot;">​</a></h3><ul><li>本地编译</li></ul><p>本地编译可以理解为，在当前编译平台下，编译出来的程序只能放到当前平台下运行。平时我们常见的软件开发，都是属于本地编译。比如，我们在 x86 平台上，编写程序并编译成可执行程序。这种方式下，我们使用 x86 平台上的工具，开发针对 x86 平台本身的可执行程序，这个编译过程称为本地编译。</p><ul><li>交叉编译</li></ul><p>交叉编译可以理解为，在当前编译平台下，编译出来的程序能运行在体系结构不同的另一种目标平台上，但是编译平台本身却不能运行该程序。比如，我们在 x86 平台上，编写程序并编译成能运行在 ARM 平台的程序，编译得到的程序在 x86 平台上是不能运行的，必须放到 ARM 平台上才能运行。</p><h3 id="_2-为什么会有交叉编译" tabindex="-1">2. 为什么会有交叉编译 <a class="header-anchor" href="#_2-为什么会有交叉编译" aria-label="Permalink to &quot;2. 为什么会有交叉编译&quot;">​</a></h3><p>主要原因有以下几点：</p><p>（1）Speed： 目标平台的运行速度往往比主机慢得多，许多专用的嵌入式硬件被设计为低成本和低功耗，没有太高的性能.</p><p>（2）Capability： 整个编译过程是非常消耗资源的，嵌入式系统往往没有足够的内存或磁盘空间。</p><p>（3）Availability： 即使目标平台资源很充足，可以本地编译，但是第一个在目标平台上运行的本地编译器总需要通过交叉编译获得。</p><p>（4）Flexibility： 一个完整的Linux编译环境需要很多支持包，交叉编译使我们不需要花时间将各种支持包移植到目标板上。</p><h3 id="_3-交叉编译链" tabindex="-1">3. 交叉编译链 <a class="header-anchor" href="#_3-交叉编译链" aria-label="Permalink to &quot;3. 交叉编译链&quot;">​</a></h3><p>我们来看看什么是交叉编译链。首先编译过程是按照不同的子功能，依照先后顺序组成的一个复杂的流程，如下图：</p><img src="`+d+`" alt="image-20230426213033497" style="zoom:33%;"><p>编译过程包括了预处理、编译、汇编、链接等功能。每个过程都是一个单独的工具来实现，它们合在一起形成了一个完整的工具集。</p><p>同时编译过程又是一个有先后顺序的流程，它必然牵涉到工具的使用顺序，每个工具按照先后关系串联在一起，这就形成了一个链式结构。</p><p>因此，交叉编译链就是为了编译跨平台体系结构的程序代码而形成的由多个子工具构成的一套完整的工具集。同时，它隐藏了预处理、编译、汇编、链接等细节，当我们指定了源文件(.c)时，它会自动按照编译流程调用不同的子工具，自动生成最终的二进制程序映像(.bin)。</p><p>注意：严格意义上来说，交叉编译器，只是指交叉编译的gcc，但是实际上为了方便，我们常说的交叉编译器就是交叉工具链。本文对这两个概念不加以区分，都是指编译链。</p><h3 id="_4-交叉编译链的命名规则" tabindex="-1">4. 交叉编译链的命名规则 <a class="header-anchor" href="#_4-交叉编译链的命名规则" aria-label="Permalink to &quot;4. 交叉编译链的命名规则&quot;">​</a></h3><p>我们使用交叉编译链时，常常会看到这样的名字：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-linux-gnueabi-gcc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-cortex_a8-linux-gnueabi-gcc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mips-malta-linux-gnu-gcc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中，对应的前缀为：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-linux-gnueabi-</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-cortex_a8-linux-gnueabi-</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mips-malta-linux-gnu-</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这些交叉编译链的命名规则似乎是通用的，有一定的规则：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arch-core-kernel-system</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arch：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 用于哪个目标平台。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">core：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 使用的是哪个CPU</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Core，如Cortex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> A8，但是这一组命名好像比较灵活，在其它厂家提供的交叉编译链中，有以厂家名称命名的，也有以开发板命名的，或者直接是none或cross的。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kernel：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 所运行的OS，见过的有Linux，uclinux，bare（无OS）。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">system：交叉编译链所选择的库函数和目标映像的规范，如gnu，gnueabi等。其中gnu等价于glibc+oabi；gnueabi等价于glibc+eabi。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意：这个规则是一个总结的规律罢了，并没有在哪份官方资料上看到过，而且有些编译链的命名确实没有按照这个规则。</p><h3 id="_5-我们的工程用什么" tabindex="-1">5. 我们的工程用什么？ <a class="header-anchor" href="#_5-我们的工程用什么" aria-label="Permalink to &quot;5. 我们的工程用什么？&quot;">​</a></h3><p>那我们的工程用哪个交叉编译工具链呢？我们来看一下Makefile文件：</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#######################################</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># binaries</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#######################################</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PREFIX = arm-none-eabi-</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The gcc compiler bin path can be either defined in make command via GCC_PATH variable (&gt; make GCC_PATH=xxx)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># either it can be added to the PATH environment variable.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ifdef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GCC_PATH</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GCC_PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PREFIX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gcc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AS = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GCC_PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PREFIX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gcc -x assembler-with-cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CP = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GCC_PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PREFIX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">objcopy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SZ = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GCC_PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PREFIX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">size</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PREFIX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gcc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AS = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PREFIX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gcc -x assembler-with-cpp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CP = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PREFIX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">objcopy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SZ = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PREFIX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">size</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">endif</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>我们可以看到有上边这一段，这里就指明了默认使用的交叉编译工具链的名称：arm-none-eabi-</p><h3 id="_6-交叉编译工具安装" tabindex="-1">6. 交叉编译工具安装 <a class="header-anchor" href="#_6-交叉编译工具安装" aria-label="Permalink to &quot;6. 交叉编译工具安装&quot;">​</a></h3><h4 id="_6-1-工具下载" tabindex="-1">6.1 工具下载 <a class="header-anchor" href="#_6-1-工具下载" aria-label="Permalink to &quot;6.1 工具下载&quot;">​</a></h4><p>我们直接百度搜索一下，就会看到这个编译工具链的官网，其实我们再ARM的官网也可以找得到：[Arm GNU Toolchain](<a href="https://developer.arm.com/Tools" target="_blank" rel="noreferrer">https://developer.arm.com/Tools</a> and Software/GNU Toolchain)</p><img src="`+o+'" alt="image-20230426213909099" style="zoom:25%;"><p>我们来到下载页面：<a href="https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads" target="_blank" rel="noreferrer">Arm GNU Toolchain Downloads – Arm Developer</a></p><img src="'+c+'" alt="image-20230426214024128" style="zoom:33%;"><p>我们选这个把，因为看上去，只需要双击就可以啦。我们好像也可以在这里下载：<a href="https://launchpad.net/gcc-arm-embedded/+download" target="_blank" rel="noreferrer">GNU Arm Embedded Toolchain project files : GNU Arm Embedded Toolchain (launchpad.net)</a></p><img src="'+g+'" alt="image-20230426214228303" style="zoom:33%;"><p>感觉差不多，我是在ARM官网那个链接里边下载的。</p><h4 id="_6-2-工具安装" tabindex="-1">6.2 工具安装 <a class="header-anchor" href="#_6-2-工具安装" aria-label="Permalink to &quot;6.2 工具安装&quot;">​</a></h4><p>我们下载完毕后，会得到这样一个可执行文件：</p><img src="'+E+'" alt="image-20230426214517651" style="zoom:50%;"><p>我们双击进行安装，一路默认就是了，这一步注意一下，就是安装路径，后边我们还要添加环境变量，这里的路径可以记一下安装在哪。</p><img src="'+u+'" alt="image-20230426214604370" style="zoom:50%;"><p>我是按照默认的路径安装的：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\Program</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x86)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rm GNU Toolchain arm-none-eabi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2.2 mpacbti-rel1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>最后等待安装完成就是了，安装完成后，我们会看到这样一个界面：</p><img src="'+m+'" alt="image-20230426214838500" style="zoom:50%;"><p>注意这里有把软件加进环境变量的选项，我们可以勾选上，这样后边就不用手动添加了。安装完毕后，我们来到安装目录，看一下我们安装的工具都有哪些：</p><img src="'+F+'" alt="image-20230426215013932" style="zoom:40%;"><p>这便是我们安装的工具啦。</p><h4 id="_6-3-环境变量" tabindex="-1">6.3 环境变量 <a class="header-anchor" href="#_6-3-环境变量" aria-label="Permalink to &quot;6.3 环境变量&quot;">​</a></h4><p>安装完毕后，我们在命令行是无法直接使用命令的，我们还要将命令的路径告诉系统，这个时候就需要添加环境变量啦。当然，前边安装的时候勾选了添加环境变量的话，这里应该就不用手动添加了：</p><ul><li>（1）找到此电脑图标，【右键】→【属性】→【高级系统设置】</li></ul><img src="'+b+'" alt="image-20230426215512905" style="zoom:33%;"><ul><li>（2）【环境变量】→【用户环境变量】→【PATH】→【新建】</li></ul><img src="'+C+`" alt="image-20230426215744238" style="zoom:25%;"><p>我们新建一个环境变量，填入刚才的路径：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\Program</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x86)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rm GNU Toolchain arm-none-eabi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2.2 mpacbti-rel1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">in</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后依次选择确认或者OK即可。</p><ul><li>（3）是否设置成功？</li></ul><p>我们随便找一个目录，然后【右键】→【在终端打开（win11才有）】，若是没有在终端打开的选项，我们也可以win+r调出运行窗口，然后输入cmd后按回车，打开命令行也行，打开后我们输入以下命令：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sers</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">038</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arm-none-eabi-gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>若有以下打印信息，则说明安装和添加环境变量成功：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sers</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">038</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arm-none-eabi-gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Using</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> built-in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> specs.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">COLLECT_GCC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rogram</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x86)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rm GNU Toolchain arm-none-eabi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2.2 mpacbti-rel1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rm-none-eabi-gcc.exe</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">COLLECT_LTO_WRAPPER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c:/program</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">files\\</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x86)/arm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gnu</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">toolchain</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arm-none-eabi/12.2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mpacbti-rel1/bin/../libexec/gcc/arm-none-eabi/12.2.1/lto-wrapper.exe</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Target:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arm-none-eabi</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Configured</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data/jenkins/workspace/GNU-toolchain/arm-12-mpacbti/src/gcc/configure</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --target=arm-none-eabi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix=/data/jenkins/workspace/GNU-toolchain/arm-12-mpacbti/build-mingw-arm-none-eabi/install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-gmp=/data/jenkins/workspace/GNU-toolchain/arm-12-mpacbti/build-mingw-arm-none-eabi/host-tools</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-mpfr=/data/jenkins/workspace/GNU-toolchain/arm-12-mpacbti/build-mingw-arm-none-eabi/host-tools</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-mpc=/data/jenkins/workspace/GNU-toolchain/arm-12-mpacbti/build-mingw-arm-none-eabi/host-tools</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-isl=/data/jenkins/workspace/GNU-toolchain/arm-12-mpacbti/build-mingw-arm-none-eabi/host-tools</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --disable-shared</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --disable-nls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --disable-threads</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --disable-tls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --enable-checking=release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --enable-languages=c,c++,fortran</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-newlib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-gnu-as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-gnu-ld</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-sysroot=/data/jenkins/workspace/GNU-toolchain/arm-12-mpacbti/build-mingw-arm-none-eabi/install/arm-none-eabi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-multilib-list=aprofile,rmprofile</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-libiconv-prefix=/data/jenkins/workspace/GNU-toolchain/arm-12-mpacbti/build-mingw-arm-none-eabi/host-tools</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --host=i686-w64-mingw32</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-pkgversion=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Arm GNU Toolchain 12.2.MPACBTI-Rel1 (Build arm-12-mpacbti.34)&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-bugurl=https://bugs.linaro.org/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Thread</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> model:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Supported</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LTO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compression</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> algorithms:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zlib</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12.2.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20230214</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Arm </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GNU</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Toolchain</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 12.2.MPACBTI-Rel1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Build </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">arm-12-mpacbti.34</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>【注意】若是没有任何信息，可能是环境变量未生效，我们可以重启电脑再试。</p><h3 id="_7-make工具安装" tabindex="-1">7. make工具安装 <a class="header-anchor" href="#_7-make工具安装" aria-label="Permalink to &quot;7. make工具安装&quot;">​</a></h3><p>我们在linux下基本都会安装make工具，但是windows下不一样，我们大概率是没有安装的。</p><h4 id="_7-1-官网下载安装-暂时放弃" tabindex="-1">7.1 官网下载安装(暂时放弃) <a class="header-anchor" href="#_7-1-官网下载安装-暂时放弃" aria-label="Permalink to &quot;7.1 官网下载安装(暂时放弃)&quot;">​</a></h4><p>这个比较坑，我尝试了从GNU官网安装make，结果在生成的时候报下边的错，我也看不懂，感觉挺复杂，就放弃啦，转而使用另一种方式。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\B</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">aiduNetdiskDownload</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ake-4.4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ake-4.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">4&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">uild_w32.bat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Creating</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GNU</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Windows</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9X/NT/2K/XP/Vista/7/8/10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">No</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MSVC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compiler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> available.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Please</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vcvarsall.bat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and/or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configure</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Path.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里还是记一下官网的位置吧，万一以后知道怎么解决了呢。</p><ul><li>GNU官网：<a href="https://www.gnu.org/software/software.html" target="_blank" rel="noreferrer">软件 - GNU 工程 - 自由软件基金会</a></li><li>Make：<a href="https://www.gnu.org/software/make/" target="_blank" rel="noreferrer">Make - GNU Project - Free Software Foundation</a></li></ul><h4 id="_7-2-mingw" tabindex="-1">7.2 MinGW <a class="header-anchor" href="#_7-2-mingw" aria-label="Permalink to &quot;7.2 MinGW&quot;">​</a></h4><p>MinGW是一个GNU编译器集合(GCC)的本机Windows端口，具有可自由分发的导入库和头文件，用于构建本机Windows应用程序;包括对MSVC运行时的扩展，以支持C99功能。MinGW的所有软件都将在64位Windows平台上运行，安装后，默认会有make工具，所以win下使用make的话，就通过这种方式喽。</p><h5 id="_7-2-1-下载" tabindex="-1">7.2.1 下载 <a class="header-anchor" href="#_7-2-1-下载" aria-label="Permalink to &quot;7.2.1 下载&quot;">​</a></h5><p>网上发现MinGW里边含有make，所以我们只要转而用这个里边的make啦。我们可以在这里下载MinGW：<a href="https://sourceforge.net/projects/mingw/files/Installer/" target="_blank" rel="noreferrer">MinGW - Minimalist GNU for Windows - Browse /Installer at SourceForge.net</a>，另外还有一个地址，这里也能找到下载的地方：<a href="https://sourceforge.net/projects/mingw/files/MinGW/" target="_blank" rel="noreferrer">MinGW - Minimalist GNU for Windows - Browse /MinGW at SourceForge.net</a></p><img src="`+y+'" alt="image-20230426224452113" style="zoom:33%;"><h5 id="_7-2-2-安装" tabindex="-1">7.2.2 安装 <a class="header-anchor" href="#_7-2-2-安装" aria-label="Permalink to &quot;7.2.2 安装&quot;">​</a></h5><p>下载完成后我们会得到这样一个可执行文件：</p><img src="'+B+'" alt="image-20230426224726235" style="zoom:50%;"><p>我们双击运行，后边一路下一步就是了，这里可以注意记一下安装目录，我是安装在默认的目录下</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\MinGW</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><img src="'+v+'" alt="image-20230426224838061" style="zoom:50%;"><p>然后安装完毕后就会进入一个包的安装管理界面：</p><img src="'+_+'" alt="image-20230426225128572" style="zoom:28%;"><p>这里会打开MinGW Installer（后续我们也可以打开这个软件来管理我们的工具包）让我们选择要安装的包，我一般就选择的第二个（mingw32-base），然后左上角选择【Installation】→【Apply Changes】</p><img src="'+q+'" alt="image-20230426225710937" style="zoom:33%;"><p>后边会开始安装我们选择的包，安装完毕后如下图，点击close即可：</p><img src="'+S+'" alt="image-20230426225626967" style="zoom:50%;"><p>然后我们就可以在安装目录下找到一个make工具啦：</p><img src="'+f+'" alt="image-20230426225843040" style="zoom:40%;"><p>但是它的名字并不是make，为了后边方便使用，我们可以复制一个可执行文件，并命名为<code>make.exe</code></p><img src="'+x+'" style="zoom:50%;"><h5 id="_7-2-3-添加环境变量" tabindex="-1">7.2.3 添加环境变量 <a class="header-anchor" href="#_7-2-3-添加环境变量" aria-label="Permalink to &quot;7.2.3 添加环境变量&quot;">​</a></h5><p>步骤与上边添加交叉编译工具的环境变量的步骤一样，这里就不写了，环境变量的路径为：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\MinGW\\bin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><img src="'+w+'" alt="image-20230426230122282" style="zoom:50%;"><p>然后我们随便找一个位置打开终端，输入以下命令：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>若有以下输出，则说明我们安装成功啦，并且环境变量已生效。</p><img src="'+D+'" alt="image-20230426230728232" style="zoom:50%;"><h2 id="三、编译工程" tabindex="-1">三、编译工程 <a class="header-anchor" href="#三、编译工程" aria-label="Permalink to &quot;三、编译工程&quot;">​</a></h2><h3 id="_1-编译" tabindex="-1">1. 编译 <a class="header-anchor" href="#_1-编译" aria-label="Permalink to &quot;1. 编译&quot;">​</a></h3><p>我们已经安装好make和交叉编译工具链了，接下来就是编译工程和验证啦。我们进入工程目录，然后右键打开终端，并执行make命令：</p><img src="'+M+'" alt="image-20230426230948750" style="zoom:50%;"><p>随后便开始编译整个工程，编译完成后如下图所示：</p><img src="'+P+'" alt="image-20230426231029504" style="zoom:50%;"><p>我们来看一下这个build文件夹，发现生成了一系列的文件，有没有很眼熟呢？</p><img src="'+V+'" alt="image-20230426231132629" style="zoom:50%;"><p>哈哈，这个hex文件我们可以烧到STM32里边看一下能不能跑。</p><h3 id="_2-烧写" tabindex="-1">2. 烧写 <a class="header-anchor" href="#_2-烧写" aria-label="Permalink to &quot;2. 烧写&quot;">​</a></h3><p>这里就不写过程了，我们直接用J-Link的J-Flash工具烧写生成的hex文件就好啦：</p><img src="'+I+'" alt="image-20230426231720359" style="zoom:33%;"><p>我这里是更换了一个LED的例子，不然烧写进去也没什么效果，经过验证，程序可以正常跑。</p><h3 id="_3-一个错误" tabindex="-1">3. 一个错误 <a class="header-anchor" href="#_3-一个错误" aria-label="Permalink to &quot;3. 一个错误&quot;">​</a></h3><p>们想要清理中间文件呢？我们可以执行下边的命令：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clean</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但是吧用本地的终端似乎会有问题，会有如下报错：</p><img src="'+A+'" alt="image-20230427222754213" style="zoom:50%;"><p>这个命令按理说是要删除掉由make执行后生成的build目录的，但是看上边就报错了，似乎是执行失败了，也许是这个终端终究linux不太一样把，由于我装了git版本控制工具，它自带一个终端，这个git bash终端就可以正常执行上边的命令并清理相应的文件：</p><img src="'+T+'" alt="image-20230427223310155" style="zoom:50%;"><p>我们后边可以使用这个终端，以及后边使用vscode来作为编辑器编辑工程的时候使用的终端也是这一个。</p><h2 id="四、vscode" tabindex="-1">四、VSCode <a class="header-anchor" href="#四、vscode" aria-label="Permalink to &quot;四、VSCode&quot;">​</a></h2><h3 id="_1-vscode是什么" tabindex="-1">1. VSCode是什么？ <a class="header-anchor" href="#_1-vscode是什么" aria-label="Permalink to &quot;1. VSCode是什么？&quot;">​</a></h3><p>VS Code的全称是Visual Studio Code，但这全名实在是太长了，很多用户喜欢叫它 VS Code。说起VS Code，官方定义它是一个免费的、开源的跨平台<strong>编辑器</strong>。之所以强调“编辑器”，应该是是因为 VS Code 并无意成为一个全尺寸的集成开发环境，也就是IDE。它是Microsoft在2015年4月30日Build开发者大会上正式宣布一个运行于Mac OS X、Windows和Linux之上的，针对于编写现代Web和云应用的跨平台源代码编辑器，可在桌面上运行，并且可用于Windows，macOS和Linux。</p><p>编辑器并等同于IDE。IDE 更为关注开箱即用的编程体验、对代码往往有很好的智能理解，同时侧重于工程项目，为代码调试、测试、工作流等都有图形化界面的支持，因此相对笨重，Java程序员常用的Eclipse定位就是IDE；而编辑器则相对更轻量，侧重于文件或者文件夹，语言和工作流的支持更丰富和自由，VS Code 把自己定位在编辑器这个方向上，但又不完全局限于此。</p><p>2011 年底，微软从 IBM 请来了 Erich Gamma。Erich Gamma 是《设计模式》一书的作者之一，曾和肯特·贝克（Kent Beck） 一起发明了 JUnit，并且在 IBM 领导 Java 开发工具的开发工作。微软把他请过来，就是希望他能够打造一款在线的开发工具，让开发者们能够在浏览器里获得 IDE 般的开发体验，这也就是之后为人所知的 Monaco Editor。</p><p>Erich Gamma 见证了 Eclipse 从崛起到逐渐臃肿，再逐渐式微的整个历程，他深刻认识到 Eclipse 成功的一部分原因是极度的可定制化特性，任何功能在Eclipse中都可以用插件来实现；但是由于 Eclipse 的插件跟核心代码运行在同一个进程内，随着插件的增多，核心功能经常会被插件拖累，也就更加让人觉得笨重。因此，在打造 Monaco Editor 时，开发团队非常注重核心功能的性能，尽可能地保持轻量，而对资源和性能消耗较大的功能，则运行在其他的进程之中。</p><p>2015 年，Erich Gamma 带领团队把 Monaco Editor 移植到桌面平台上，也就是这个专栏的主角 Visual Studio Code，即 VS Code。VS Code 继承了 Monaco Editor 的设计原则，其核心是做一个高性能的轻量级编辑器；个性化的功能，则交给插件系统来完成。这一点可以说是师承 Eclipse，但同时又吸取了 Eclipse 的教训，把插件系统运行在主进程之外，高度可定制但同时又是可控的。与此同时，VS Code 也有自己的使命，那就是让开发者在编辑器里拥有 IDE 那样的开发体验，比如对源代码有智能的理解、图形化的调试工具、版本管理等等。</p><p>不难发现，VS Code 希望在编辑器和 IDE 之间找到一个平衡。在这样的设计思路下，打开编辑器，不需要创建任何的项目工程文件就可以开始使用，并高效便捷地操作文本；同时在编程语言插件的支持下能够得到语法检查、智能提示；还可以借助丰富的插件 API 拓展 VS Code 以满足自己的需求。</p><p>要达成这样的目标，难度可以说是非常大的，但 VS Code 取得了不错的成果。</p><h3 id="_2-visual-studio" tabindex="-1">2. Visual Studio？ <a class="header-anchor" href="#_2-visual-studio" aria-label="Permalink to &quot;2. Visual Studio？&quot;">​</a></h3><p>Visual Studio（简称VS）是美国微软公司的开发工具包系列产品，是一个集成的开发环境，相对来说比较完整，它包括了整个软件生命周期中所需要的大部分工具，如代码完成工具、编译器、图形设计器、UML工具、代码管控工具、集成开发环境(IDE)等等，以简化开发人员构建应用程序的过程。通俗的讲，是一款编译器。</p><p>VS是微软面向Windows和MacOS的首选IDE，Visual Studio 出色的编辑和调试功能使其与竞争对手区分开来，Visual Studio 旨在成为用于构建应用程序的功能丰富、强大且全面的解决方案。</p><p>在Windows上，Visual Studio 目前支持17种工作负载，这些工作负载是针对不同开发目标的一致的工具和组件安装包。工作负载是对Visual Studio安装过程所作的重要改进，Visual Studio 的整个下载和安装很可能耗时数小时，会可能会塞满磁盘。</p><p>Visual Studio 2019有三种SKU：社区版(免费，不支持企业使用)，专业版(第一年1199美元/ 799美元续订)和企业版(第一年5999美元/2569美元续订)。企业版拥有面向架构师的功能、高级调试和测试，这些功能是另两种SKU所没有的。</p><p>Visual Studio旨在成为世界上最好的IDE（集成开发环境），它提供完整的堆栈开发工具集，包括一个名为IntelliSense的强大代码完成组件，一个可以调试源代码和机器代码的调试器</p><h3 id="_3-visual-studio-与-vscode差异" tabindex="-1">3. Visual Studio 与 VSCode差异？ <a class="header-anchor" href="#_3-visual-studio-与-vscode差异" aria-label="Permalink to &quot;3. Visual Studio 与 VSCode差异？&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Visual Studio</th><th>VS Code</th></tr></thead><tbody><tr><td>Visual Studio 是一种集成开发环境，也称为 IDE。</td><td>Visual Studio Code 是一个代码编辑器。 开发人员可以轻松地编辑他们的代码。</td></tr><tr><td>在跨不同平台执行时，VS 速度较慢。处理速度较慢。</td><td>VS Code 相对较快。</td></tr><tr><td>Visual Studio 有一个免费的编辑器供开发人员使用 但也提供了更好的付费 IDE 版本。</td><td>VS Code 完全免费并且是开源的。</td></tr><tr><td>VS 采用最好和最先进的 IntelliSense。</td><td>IntelliSense 在 VS Code 中相对不合格。</td></tr><tr><td>整体下载大小相当大。</td><td>与 Visual Studio 相比，Visual Studio Code 非常轻量级。 它不需要大量或大量下载。</td></tr><tr><td>VS 需要更多空间才能更好、更流畅地工作。</td><td>VS Code 相对来说不需要很多空间来运行。 它可以轻松地在 300 MB 的内存上运行。</td></tr><tr><td>Visual Studio 仅在 macOS 和 Windows 上运行。</td><td>VS Code 可以在 macOS、Windows 和 Linux 上运行。</td></tr><tr><td>没有多少专业开发的插件可用于 Visual Studio。</td><td>VS Code 附带了广泛的专业策划插件和扩展，生态丰富。 以满足各种编辑和编译需求。</td></tr></tbody></table><h3 id="_4-vscode安装" tabindex="-1">4. VSCode安装 <a class="header-anchor" href="#_4-vscode安装" aria-label="Permalink to &quot;4. VSCode安装&quot;">​</a></h3><h4 id="_1-vscode下载" tabindex="-1">1. VSCode下载 <a class="header-anchor" href="#_1-vscode下载" aria-label="Permalink to &quot;1. VSCode下载&quot;">​</a></h4><p>我们可以到VSCode的官网去：<a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code - Code Editing. Redefined</a></p><img src="'+U+'" alt="image-20230427072908842" style="zoom:25%;"><p>找到下载界面：<a href="https://code.visualstudio.com/Download" target="_blank" rel="noreferrer">Download Visual Studio Code - Mac, Linux, Windows</a></p><img src="'+G+'" alt="image-20230427073034364" style="zoom:33%;"><p>我们会发现VSCode为我们提供了多种平台，多种安装方式，我们这里在windows下使用，所以选择windows版本的即可。</p><h4 id="_2-vscode安装" tabindex="-1">2. VSCode安装 <a class="header-anchor" href="#_2-vscode安装" aria-label="Permalink to &quot;2. VSCode安装&quot;">​</a></h4><p>看我们下载的是哪一种包了，若是.zip的，那我们解压后直接运行即可，若是下载的Syatem Installer或者User Installer的，那下载后我们双击安装就可以啦，这里就不写过程了，VScode的安装还是很简单的，没什么坑。安装完毕后界面如下，这个不重要，因为这是我后边加了背景图的，第一次打开若是英文的话，可以安装中文插件，一般都有提示，后来好像直接内置到VSCode里边了，这不是本节笔记重点，就不详写了，可以多百度。</p><img src="'+N+'" alt="image-20230427073727984" style="zoom:25%;"><h4 id="_3-插件安装" tabindex="-1">3. 插件安装 <a class="header-anchor" href="#_3-插件安装" aria-label="Permalink to &quot;3. 插件安装&quot;">​</a></h4><p>VSCode为我们提供了很丰富的插件，常用的如下，还有一些插件后边需要了再安装，有一些可能已经是VSCode的内置功能了，如下面的多彩括号：</p><table><tbody><tr><td align="center" width="200px">插件名称</td><td align="center">插件用途</td></tr><tr><td align="left" width="200px">Bracket Pair Colorizer</td><td align="left">多彩括号，不同层级的代码块的括号展现不同颜色(后来好像内置到VScode了)。</td></tr><tr><td align="left" width="200px">Material Icon Theme</td><td align="left">文件导航窗格不同文件图标样式。</td></tr><tr><td align="left" width="200px">background-cover</td><td align="left">设置VScode背景图片(需要对VScode有可执行权限，所以安装后可以找到安装目录，修改一下权限)。</td></tr><tr><td align="left" width="200px">LinkerScript</td><td align="left">GCC汇编链接文件语法高亮插件(后缀 .lds)。</td></tr><tr><td align="left" width="200px">One Dark Pro</td><td align="left">VScode编辑器主题插件。</td></tr><tr><td align="left" width="200px">Arm Assembly</td><td align="left">ARM GNU汇编语法高亮插件。</td></tr><tr><td align="left" width="200px">Setting Sync</td><td align="left">VScode配置文件同步插件。(有时候内置的有点不好用，这个时候就可以通过这个插件来实现同步，只是这个插件要跟Github一起使用)</td></tr><tr><td align="left" width="200px">Remnote-SSH</td><td align="left">远程连接服务器的SSH工具</td></tr></tbody></table><p>另外还有一个插件，一般打开C语言源文件的时候都会提示安装，就是C/C++扩展工具，我们找到这个 C/C++ Extension Pack插件，安装即可，会自动安装另外两个。</p><img src="'+L+'" alt="image-20230427074055930" style="zoom:50%;"><h3 id="_5-打开工程文件夹" tabindex="-1">5. 打开工程文件夹 <a class="header-anchor" href="#_5-打开工程文件夹" aria-label="Permalink to &quot;5. 打开工程文件夹&quot;">​</a></h3><p>【文件】→【打开文件夹】</p><img src="'+z+'" alt="image-20230427165944750" style="zoom:33%;"><h3 id="_6-配置vscode" tabindex="-1">6. 配置VSCode <a class="header-anchor" href="#_6-配置vscode" aria-label="Permalink to &quot;6. 配置VSCode&quot;">​</a></h3><h4 id="_6-1-报错示例" tabindex="-1">6.1 报错示例 <a class="header-anchor" href="#_6-1-报错示例" aria-label="Permalink to &quot;6.1 报错示例&quot;">​</a></h4><p>我们前边要是安装了C/C++插件的话，它自带的语法检测会给我们报很多的错误，这些错误并不是语法错误，我们的工程没有任何问题的，只是VSCode中没有配置头文件路径以及没有设置 HAL 使用的相关宏定义，所以就会报。</p><img src="'+j+'" alt="image-20230427170146996" style="zoom:43%;"><h4 id="_6-2-处理报错" tabindex="-1">6.2 处理报错 <a class="header-anchor" href="#_6-2-处理报错" aria-label="Permalink to &quot;6.2 处理报错&quot;">​</a></h4><h5 id="_6-2-1-方式一-界面配置" tabindex="-1">6.2.1 方式一：界面配置 <a class="header-anchor" href="#_6-2-1-方式一-界面配置" aria-label="Permalink to &quot;6.2.1 方式一：界面配置&quot;">​</a></h5><ul><li>（1）打开UI界面配置：【Ctrl+Shift+p】→【输入C/C++】→【C/C++：编辑配置（UI）】</li></ul><p>我们在VSCode中按下Ctrl+Shift+p打开配置搜索栏，并输入 C/C++ ：</p><img src="'+W+'" alt="image-20230427171803285" style="zoom:48%;"><p>我们点击第二个，编辑配置（UI），然后会来到这样一个界面：</p><img src="'+R+'" alt="image-20230427172022809" style="zoom:25%;"><p>这就是C/C++的配置界面。</p><ul><li>（2）配置包含路径：</li></ul><img src="'+O+`" alt="image-20230427172133345" style="zoom:37%;"><p>这里就是配置包含路径的地方，要包含哪些路径？我们打开Makefile文件，找到以下部分：</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># C includes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C_INCLUDES =  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-ICore/Inc </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-IDrivers/STM32F1xx_HAL_Driver/Inc </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-IDrivers/STM32F1xx_HAL_Driver/Inc/Legacy </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-IDrivers/CMSIS/Device/ST/STM32F1xx/Include </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-IDrivers/CMSIS/Include</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这里就告诉我们头文件的目录啦，我们在上图的框中添加以下内容：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Core/Inc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Drivers/STM32F1xx_HAL_Driver/Inc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Drivers/STM32F1xx_HAL_Driver/Inc/Legacy</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Drivers/CMSIS/Device/ST/STM32F1xx/Include</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Drivers/CMSIS/Include</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>（3）宏定义：</li></ul><p>接下来是配置全局的宏：</p><img src="`+H+`" alt="image-20230427172444867" style="zoom:39%;"><p>这里我们怎么填呢？这就要去Makefile文件里寻找答案啦，我们打开Makefile文件，找到这一部分：</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># C defines</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C_DEFS =  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-DUSE_HAL_DRIVER </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-DSTM32F103xE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里就告诉了我们如何配置全局的宏定义，我们在上图VSCode C/C++ UI配置的定义框中添加以下内容：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">USE_HAL_DRIVER</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">STM32F103xE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>（4）查看效果</li></ul><p>然后我们重新打开刚才的gpio.c文件，拉到相同的位置，会发现，已经没有报错啦：</p><img src="`+$+'" alt="image-20230427173928801" style="zoom:46%;"><ul><li>（5）多了个文件夹？</li></ul><p>我们往旁边一看，就会发现，当我们编辑过 C/C++：编辑配置（UI）界面后，在我们打开的文件夹目录下生成了一个.vscode目录，随之生成了一个名为 c_cpp_properties.json 的文件：</p><img src="'+i+`" alt="image-20230427171510342" style="zoom:50%;"><p>文件内容如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;configurations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Win32&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;includePath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;\${workspaceFolder}/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;Core/Inc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;Drivers/STM32F1xx_HAL_Driver/Inc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;Drivers/STM32F1xx_HAL_Driver/Inc/Legacy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;Drivers/CMSIS/Device/ST/STM32F1xx/Include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;Drivers/CMSIS/Include&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;defines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;_DEBUG&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;UNICODE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;_UNICODE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;USE_HAL_DRIVER&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;STM32F103xE&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;compilerPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LenovoSoft</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mingw64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gcc.exe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;cStandard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;cppStandard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gnu++17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;intelliSenseMode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;windows-gcc-x64&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>我们刚才配置的两个地方刚好就是includePath和defines。</p><h5 id="_6-2-2-方式二-直接配置json文件" tabindex="-1">6.2.2 方式二：直接配置JSON文件 <a class="header-anchor" href="#_6-2-2-方式二-直接配置json文件" aria-label="Permalink to &quot;6.2.2 方式二：直接配置JSON文件&quot;">​</a></h5><p>我们在VSCode中按下Ctrl+Shift+p打开配置搜索栏，并输入 C/C++ ：</p><img src="`+X+'" alt="image-20230427171338781" style="zoom:50%;"><p>我们点击第一个，编辑配置（JSON），然后便会在当前目录下生成一个.vscode 目录，目录中会有一个名为 c_cpp_properties.json 的文件：</p><img src="'+i+`" alt="image-20230427171510342" style="zoom:50%;"><p>我们打开这个文件，文件默认内容如下所示：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;configurations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Win32&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;includePath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;\${workspaceFolder}/**&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;defines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;_DEBUG&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;UNICODE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;_UNICODE&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;compilerPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LenovoSoft</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mingw64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gcc.exe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;cStandard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;cppStandard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gnu++17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;intelliSenseMode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;windows-gcc-x64&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>我们直接修改成如下内容，可以达到一样的效果：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;configurations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Win32&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;includePath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;\${workspaceFolder}/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;Core/Inc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;Drivers/STM32F1xx_HAL_Driver/Inc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;Drivers/STM32F1xx_HAL_Driver/Inc/Legacy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;Drivers/CMSIS/Device/ST/STM32F1xx/Include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;Drivers/CMSIS/Include&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;defines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;_DEBUG&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;UNICODE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;_UNICODE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;USE_HAL_DRIVER&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;STM32F103xE&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;compilerPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LenovoSoft</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mingw64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gcc.exe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;cStandard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;cppStandard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gnu++17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;intelliSenseMode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;windows-gcc-x64&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h4 id="_6-3-其他配置" tabindex="-1">6.3 其他配置 <a class="header-anchor" href="#_6-3-其他配置" aria-label="Permalink to &quot;6.3 其他配置&quot;">​</a></h4><p>这里我们配置的时候我就直接修改JSON文件了。</p><h5 id="_6-3-1-compilerpath" tabindex="-1">6.3.1 compilerPath <a class="header-anchor" href="#_6-3-1-compilerpath" aria-label="Permalink to &quot;6.3.1 compilerPath&quot;">​</a></h5><p>&quot;compilerPath&quot;这个标签必须指定，否则会出现程序中的基础依赖文件找不到或者宏控制异常，导致全部文件的基础数据类型（例如int8_t/uint8_t等）找不到定义，如果只是简单地将编译器的依赖文件夹“include/”路径添加到普通的工程头文件路径&quot;includePath&quot;下，仍然会出现问题（应该是编译器的自身控制宏导致的）。我们使用的是交叉编译工具链，这里就配置为我们使用的就行：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;compilerPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Program Files (x86)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Arm GNU Toolchain arm-none-eabi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">12.2 mpacbti-rel1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">arm-none-eabi-gcc.exe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_6-3-2-intellisensemode" tabindex="-1">6.3.2 intelliSenseMode <a class="header-anchor" href="#_6-3-2-intellisensemode" aria-label="Permalink to &quot;6.3.2 intelliSenseMode&quot;">​</a></h5><p>要使用的 IntelliSense 模式，该模式映射到 MSVC、gcc 或 Clang 的平台和体系结构变体。如果未设置或设置为 \${default}，则扩展将选择该平台的默认值。Windows 默认为 windows-msvc-x64，Linux 默认为 linux-gcc-x64，macOS 默认为 macos-clang-x64。我们可以选择特定 IntelliSense 模式以替代 \${default} 模式。这里一般就默认就好啦：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;intelliSenseMode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;windows-msvc-x64&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,233)])])}const es=a(J,[["render",Z]]);export{ns as __pageData,es as default};
