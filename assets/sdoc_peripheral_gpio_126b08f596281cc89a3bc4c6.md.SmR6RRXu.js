import{_ as a,c as i,o as n,b0 as l}from"./chunks/framework.C5ev1SXp.js";const e="/scm-docs/assets/image-20230501153706041.EwdycBf8.png",p="/scm-docs/assets/image-20230501154822515.BDVpuOse.png",t="/scm-docs/assets/image-20230501154601968.CvyRlie-.png",h="/scm-docs/assets/image-20230501155128691.BB52H0XT.png",r="/scm-docs/assets/image-20230501155520244.CYPCs-ZU.png",k="/scm-docs/assets/image-20230501155708871.57bl7sGz.png",y=JSON.parse('{"title":"LV045-外部中断实例","description":null,"frontmatter":{"title":"LV045-外部中断实例","date":"2025-09-21T11:31:28.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/peripheral/gpio/126b08f596281cc89a3bc4c6","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-21T11:31:28.460Z","fulluuid":"89a3bc4c6a9b4249afce4152ca5d1241","useduuid":"89a3bc4c6"}},"headers":[],"relativePath":"sdoc/peripheral/gpio/126b08f596281cc89a3bc4c6.md","filePath":"sdoc/20-基本外设篇/01-GPIO/LV045-外部中断实例.md","lastUpdated":1758153691000}'),c={name:"sdoc/peripheral/gpio/126b08f596281cc89a3bc4c6.md"};function d(b,s,E,g,o,u){return n(),i("div",null,[...s[0]||(s[0]=[l('<h1 id="lv045-外部中断实例" tabindex="-1">LV045-外部中断实例 <a class="header-anchor" href="#lv045-外部中断实例" aria-label="Permalink to &quot;LV045-外部中断实例&quot;">​</a></h1><h2 id="一、硬件原理图" tabindex="-1">一、硬件原理图 <a class="header-anchor" href="#一、硬件原理图" aria-label="Permalink to &quot;一、硬件原理图&quot;">​</a></h2><img src="'+e+'" alt="image-20230501153706041" style="zoom:67%;"><h2 id="二、stm32cubemx配置" tabindex="-1">二、STM32CubeMX配置 <a class="header-anchor" href="#二、stm32cubemx配置" aria-label="Permalink to &quot;二、STM32CubeMX配置&quot;">​</a></h2><h3 id="_1-gpio引脚配置" tabindex="-1">1. GPIO引脚配置 <a class="header-anchor" href="#_1-gpio引脚配置" aria-label="Permalink to &quot;1. GPIO引脚配置&quot;">​</a></h3><p>在STM32CubeMX软件中，我们选择好引脚后，GPIO的功能中会自动对应好与EXIT的关系，当然，我们也可以看 <a href="https://www.stmcu.com.cn/Designresource/detail/localization_document%20/710001" target="_blank" rel="noreferrer">STM32中文参考手册</a>的 9.2.5 外部中断/事件线路映像一节。</p><p>（1）PA0 所接按键按下时为高电平，默认时我们设置为下拉，也就是默认时低电平：</p><img src="'+p+'" alt="image-20230501154822515" style="zoom:33%;"><p>（2）PE2、PE3、PE4三个引脚所接按键按下时为低电平，默认时我们设置上拉，也就是默认时为高电平</p><img src="'+t+`" alt="image-20230501154601968" style="zoom:50%;"><p>（3）LED对应的GPIO，设置为对应的输出模式即可。</p><h3 id="_2-nvic配置" tabindex="-1">2. NVIC配置 <a class="header-anchor" href="#_2-nvic配置" aria-label="Permalink to &quot;2. NVIC配置&quot;">​</a></h3><p>GPIO引脚与EXTI中断线的连接方式如下：</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>WK_UP PA0 --- EXTI0</span></span>
<span class="line"><span>KEY1  PE4 --- EXTI4</span></span>
<span class="line"><span>KEY2  PE3 --- EXTI3</span></span>
<span class="line"><span>KEY3  PE2 --- EXTI4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>（1）NVIC优先级分组：我们选择2位抢占优先级，位子优先级：</p><img src="`+h+'" alt="image-20230501155128691" style="zoom:38%;"><p>（2）各中断优先级设置：</p><img src="'+r+'" alt="image-20230501155520244" style="zoom:50%;"><p>（3）中断服务函数，额这个貌似默认都是勾上的，这个应该是创建中断服务函数之类的，要是不勾选的话，可能就要自己去实现中断服务函数了。具体我们使用的中断线使用的是哪一个中断服务函数，我们可以查看[STM32中文参考手册](<a href="https://www.stmcu.com.cn/Designresource/detail/localization_document%20/710001" target="_blank" rel="noreferrer">RM0008_STM32F101xx, STM32F102xx, STM32F103xx, STM32F105xx and STM32F107xx单片机参考手册 | STMCU中文官网</a>)的9.1.2 中断和异常向量小节的 表55 其它STM32F10xxx产品(小容量、中容量和大容量)的向量表，启动文件一般也都是按照这个向量表来定义的 。</p><img src="'+k+`" alt="image-20230501155708871" style="zoom:35%;"><h3 id="_3-导出工程" tabindex="-1">3. 导出工程 <a class="header-anchor" href="#_3-导出工程" aria-label="Permalink to &quot;3. 导出工程&quot;">​</a></h3><p>这里我们直接生成代码就可以了，别的没什么需要配置的。</p><h2 id="三、函数调用关系" tabindex="-1">三、函数调用关系 <a class="header-anchor" href="#三、函数调用关系" aria-label="Permalink to &quot;三、函数调用关系&quot;">​</a></h2><p>当中断发生的时候，会跳到 启动文件的中断向量表对应的位置，这里以EXIT0为例：</p><p>（1）发生异常时，跳到 startup_stm32f103xe.s 中中断异常向量表的下边这一行：</p><div class="language-assembly vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">assembly</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DCD     EXTI2_IRQHandler           ; EXTI Line 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>（2）到这里之后知道了终端服务程序的函数名叫 EXTI2_IRQHandler ,便会去执行 stm32f1xx_it.c z中的 EXTI0_IRQHandler 这个函数</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@brief</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> This function handles EXTI line0 interrupt.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EXTI0_IRQHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  HAL_GPIO_EXTI_IRQHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GPIO_PIN_0);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>（3）显然，在中断服务函数中又去执行了 stm32f1xx_hal_gpio.c 中的 HAL_GPIO_EXTI_IRQHandler 函数：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@brief</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  This function handles EXTI interrupt request.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  GPIO_Pin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">: Specifies the pins connected EXTI line</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@retval</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> None</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HAL_GPIO_EXTI_IRQHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> GPIO_Pin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* EXTI line interrupt detected */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__HAL_GPIO_EXTI_GET_IT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GPIO_Pin) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __HAL_GPIO_EXTI_CLEAR_IT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GPIO_Pin);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HAL_GPIO_EXTI_Callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GPIO_Pin);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>从函数中内容可以看到，首先时判断中断是否发生了，若发生了，则先清除中断标志位，然后再执行一个回调函数 HAL_GPIO_EXTI_Callback。</p><p>（4）执行回调函数 HAL_GPIO_EXTI_Callback，同样在 stm32f1xx_hal_gpio.c 文件中，有一个 __weak 修饰的 HAL_GPIO_EXTI_Callback 函数，这说明我们重写这个函数就可以了，我们在重写的函数中实现自己想要实现的功能即可。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@brief</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  EXTI line detection callbacks.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  GPIO_Pin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">: Specifies the pins connected EXTI line</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@retval</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> None</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__weak </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HAL_GPIO_EXTI_Callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> GPIO_Pin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* Prevent unused argument(s) compilation warning */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  UNUSED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GPIO_Pin);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* NOTE: This function Should not be modified, when the callback is needed,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           the HAL_GPIO_EXTI_Callback could be implemented in the user file</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="四、功能实现的回调函数" tabindex="-1">四、功能实现的回调函数 <a class="header-anchor" href="#四、功能实现的回调函数" aria-label="Permalink to &quot;四、功能实现的回调函数&quot;">​</a></h2><p>对于EXIT0来说，我们上边分析到，我们需要重写 void HAL_GPIO_EXTI_Callback 函数，在函数内部实现自己的功能即可：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HAL_GPIO_EXTI_Callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> GPIO_Pin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* Prevent unused argument(s) compilation warning */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    UNUSED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GPIO_Pin);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* NOTE: This function Should not be modified, when the callback is needed,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             the HAL_GPIO_EXTI_Callback could be implemented in the user file</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GPIO_Pin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPIO_PIN_0:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// ......</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPIO_PIN_2:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// ......</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPIO_PIN_3:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// ......</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPIO_PIN_4:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// ......</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>`,36)])])}const _=a(c,[["render",d]]);export{y as __pageData,_ as default};
