import{_ as i,c as a,o as n,b0 as l}from"./chunks/framework.C5ev1SXp.js";const p="/scm-docs/assets/image-20230409205001077.CQJCOWFK.png",e="/scm-docs/assets/image-20230409205027990.BBwB7N7c.png",t="/scm-docs/assets/image-20230409205110604.D1SPTmlC.png",h="/scm-docs/assets/image-20230409205939501.Z9C3YNRf.png",o=JSON.parse('{"title":"LV022-CortexM0存储器映射","description":null,"frontmatter":{"title":"LV022-CortexM0存储器映射","date":"2025-09-20T13:44:05.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/basic/overview/126b08e6a7051c291c1151a6","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-09-20T13:44:05.450Z","fulluuid":"91c1151a6b3c4a07b26e0383912b8543","useduuid":"91c1151a6"}},"headers":[],"relativePath":"sdoc/basic/overview/126b08e6a7051c291c1151a6.md","filePath":"sdoc/10-基础篇/01-概述/LV022-CortexM0存储器映射.md","lastUpdated":1758153691000}'),k={name:"sdoc/basic/overview/126b08e6a7051c291c1151a6.md"};function r(d,s,E,c,g,y){return n(),a("div",null,[...s[0]||(s[0]=[l('<h1 id="lv022-cortexm0存储器映射" tabindex="-1">LV022-CortexM0存储器映射 <a class="header-anchor" href="#lv022-cortexm0存储器映射" aria-label="Permalink to &quot;LV022-CortexM0存储器映射&quot;">​</a></h1><h2 id="一、存储器映射" tabindex="-1">一、存储器映射 <a class="header-anchor" href="#一、存储器映射" aria-label="Permalink to &quot;一、存储器映射&quot;">​</a></h2><p>后面学习STM32的存储器映射的时候，有用到过M0架构的STM32F05x系列芯片，部分笔记记录在这里：</p><img src="'+p+'" alt="image-20230409205001077" style="zoom:33%;"><p>被控单元的FLASH，RAM和AHB到APB的桥（即片上外设），这些功能部件共同排列在一个 4GB 的地址空间内。我们在编程的时候，可以通过他们的地址找到他们，然后来操作他们。存储器本身没有地址，给存储器分配地址的过程叫存储器映射。</p><img src="'+e+'" alt="image-20230409205027990" style="zoom:40%;"><h2 id="二、stm32f05x实际映射" tabindex="-1">二、STM32F05x实际映射 <a class="header-anchor" href="#二、stm32f05x实际映射" aria-label="Permalink to &quot;二、STM32F05x实际映射&quot;">​</a></h2><h3 id="_1-存储器映射" tabindex="-1">1. 存储器映射 <a class="header-anchor" href="#_1-存储器映射" aria-label="Permalink to &quot;1. 存储器映射&quot;">​</a></h3><img src="'+t+'" alt="image-20230409205110604" style="zoom:67%;"><p>STM32F05x 存储器映像和外设寄存器编址部分截图如下，详情可以看STM32F0参考手册的 存储器组织 一节。</p><p><img src="'+h+`" alt="image-20230409205939501"></p><h3 id="_2-如何访问寄存器" tabindex="-1">2. 如何访问寄存器 <a class="header-anchor" href="#_2-如何访问寄存器" aria-label="Permalink to &quot;2. 如何访问寄存器&quot;">​</a></h3><p>以GPIOA寄存器组为例、如何读写ODR寄存器？</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">以知GPIOA的起始地址为0x48000000,各寄存器的偏移地址如下：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODER;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* Address offset: 0x00 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OTYPER;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	/* Address offset: 0x04 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OSPEEDR;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	/* Address offset: 0x08 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PUPDR;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 	/* Address offset: 0x0C */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IDR;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 		/* Address offset: 0x10 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ODR;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 		/* Address offset: 0x14 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BSRR;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 		/* Address offset: 0x18 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LCKR;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 		/* Address offset: 0x1C */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>第一种方式</li></ul><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GPIOA_BASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">48000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GPIOA_ODR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( GPIOA_BASE  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) GPIOA_ODR;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  GPIOA_ODR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//==================================</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//改进后的样子</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     GPIOA_ODR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    （ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ( GPIOA_BASE  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPIOA_ODR  ;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //读</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GPIOA_ODR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val  ;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //写</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>第二种方式</li></ul><p>用上面的方法去定义地址，还是稍显繁琐、根据我们每一类外设对应的寄存器组地址都是连续增长的特点，我们引入 C 语言中的结构体语法对寄存器进行封装、</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		MODER;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* Address offset: 0x00 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		OTYPER;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	/* Address offset: 0x04 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		OSPEEDR;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	/* Address offset: 0x08 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		PUPDR;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 	/* Address offset: 0x0C */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		IDR;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 		/* Address offset: 0x10 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		ODR;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 		/* Address offset: 0x14 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		BSRR;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 		/* Address offset: 0x18 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		LCKR;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 		/* Address offset: 0x1C */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} GPIO_TypeDef;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GPIOA_BASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">48000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GPIOA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ((GPIO_TypeDef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) GPIOA_BASE)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>我们访问 GPIOA 的控制寄存器组时、直接使用宏定义好 GPIO_TypeDef 类型的指针，而且指针指向 GPIOA 端口的首地址，这样我们直接用宏 GPIOA 访问改外设的任意一个寄存器：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GPIOA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODER   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GPIOA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OSPEEDR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,21)])])}const b=i(k,[["render",r]]);export{o as __pageData,b as default};
